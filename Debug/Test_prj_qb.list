
Test_prj_qb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023c0  080023c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023c0  080023c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023c0  080023c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023c0  080023c0  000123c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023c4  080023c4  000123c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  080023d4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080023d4  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086ad  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001784  00000000  00000000  000286e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  00029e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  0002a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018499  00000000  00000000  0002ac50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009668  00000000  00000000  000430e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca34  00000000  00000000  0004c751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9185  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001870  00000000  00000000  000d91d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002370 	.word	0x08002370

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002370 	.word	0x08002370

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <WriteConfig>:
struct lines_settings {
	uint16_t L0_interval;
	uint16_t L1_interval;
};
struct lines_settings lss;
void WriteConfig() {
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock(); // Открыть доступ к FLASH (она закрыта от случайной записи)
 8000226:	f000 fbdb 	bl	80009e0 <HAL_FLASH_Unlock>
	// В структуре settings хранятся настройки, преобразую ее в 16-битный массив для удобства доступа
	uint16_t *data = (uint16_t*) &lss;
 800022a:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <WriteConfig+0x84>)
 800022c:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef ef; // Объявляю структуру, необходимую для функции стирания страницы
	HAL_StatusTypeDef stat;
	ef.TypeErase = FLASH_TYPEERASE_PAGES; // Стирать постранично
 800022e:	2108      	movs	r1, #8
 8000230:	187b      	adds	r3, r7, r1
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
	ef.PageAddress = SETTINGS_ADDRESS; // Адрес страницы для стирания
 8000236:	187b      	adds	r3, r7, r1
 8000238:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <WriteConfig+0x88>)
 800023a:	605a      	str	r2, [r3, #4]
	ef.NbPages = 1; //Число страниц = 1
 800023c:	187b      	adds	r3, r7, r1
 800023e:	2201      	movs	r2, #1
 8000240:	609a      	str	r2, [r3, #8]
	uint32_t temp; // Временная переменная для результата стирания (не использую)
	HAL_FLASHEx_Erase(&ef, &temp); // Вызов функции стирания
 8000242:	1d3a      	adds	r2, r7, #4
 8000244:	187b      	adds	r3, r7, r1
 8000246:	0011      	movs	r1, r2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fc89 	bl	8000b60 <HAL_FLASHEx_Erase>
	// Будьте уверены, что размер структуры настроек кратен 2 байтам
	for (int i = 0; i < sizeof(lss); i += 2) { // Запись всех настроек
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
 8000252:	e01c      	b.n	800028e <WriteConfig+0x6e>
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
				SETTINGS_ADDRESS + i, *(data++));
 8000254:	69bb      	ldr	r3, [r7, #24]
 8000256:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <WriteConfig+0x88>)
 8000258:	4694      	mov	ip, r2
 800025a:	4463      	add	r3, ip
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800025c:	0019      	movs	r1, r3
				SETTINGS_ADDRESS + i, *(data++));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	1c9a      	adds	r2, r3, #2
 8000262:	61fa      	str	r2, [r7, #28]
 8000264:	881b      	ldrh	r3, [r3, #0]
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000266:	001c      	movs	r4, r3
 8000268:	2300      	movs	r3, #0
 800026a:	001d      	movs	r5, r3
 800026c:	2317      	movs	r3, #23
 800026e:	18fe      	adds	r6, r7, r3
 8000270:	0022      	movs	r2, r4
 8000272:	002b      	movs	r3, r5
 8000274:	2001      	movs	r0, #1
 8000276:	f000 fb1d 	bl	80008b4 <HAL_FLASH_Program>
 800027a:	0003      	movs	r3, r0
 800027c:	7033      	strb	r3, [r6, #0]
		if (stat != HAL_OK)
 800027e:	2317      	movs	r3, #23
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d106      	bne.n	8000296 <WriteConfig+0x76>
	for (int i = 0; i < sizeof(lss); i += 2) { // Запись всех настроек
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3302      	adds	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	2b03      	cmp	r3, #3
 8000292:	d9df      	bls.n	8000254 <WriteConfig+0x34>
 8000294:	e000      	b.n	8000298 <WriteConfig+0x78>
			break; // Если что-то пошло не так - выскочить из цикла
 8000296:	46c0      	nop			; (mov r8, r8)
	}
	HAL_FLASH_Lock(); // Закрыть флешку от случайной записи
 8000298:	f000 fbc8 	bl	8000a2c <HAL_FLASH_Lock>
}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46bd      	mov	sp, r7
 80002a0:	b009      	add	sp, #36	; 0x24
 80002a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002a4:	200000b0 	.word	0x200000b0
 80002a8:	08003c00 	.word	0x08003c00

080002ac <FlashRead>:
uint32_t FlashRead(uint32_t address) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	return (*(__IO uint32_t*) address);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}

080002c0 <ReadConfig>:
// Пример чтения 4 байт настроек.
void ReadConfig() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
	// Структуру настроек превращаю в указатель на массив 8-ми битных значений
	uint8_t *setData = (uint8_t*) &lss;
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <ReadConfig+0x50>)
 80002c8:	607b      	str	r3, [r7, #4]
	uint32_t tempData = FlashRead(SETTINGS_ADDRESS); // Прочесть слово из флешки
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadConfig+0x54>)
 80002cc:	0018      	movs	r0, r3
 80002ce:	f7ff ffed 	bl	80002ac <FlashRead>
 80002d2:	0003      	movs	r3, r0
 80002d4:	603b      	str	r3, [r7, #0]
	if (tempData != 0xffffffff) { // Если флешка не пустая
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	3301      	adds	r3, #1
 80002da:	d015      	beq.n	8000308 <ReadConfig+0x48>
		setData[0] = (uint8_t) ((tempData & 0xff000000) >> 24); // Извлечь первый байт из слова
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	0e1b      	lsrs	r3, r3, #24
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	701a      	strb	r2, [r3, #0]
		setData[1] = (uint8_t) ((tempData & 0x00ff0000) >> 16); // Извлечь второй байт из слова
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	0c1a      	lsrs	r2, r3, #16
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3301      	adds	r3, #1
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	701a      	strb	r2, [r3, #0]
		setData[2] = (uint8_t) ((tempData & 0x0000ff00) >> 8); // Излечь третий байт из слова
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	0a1a      	lsrs	r2, r3, #8
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3302      	adds	r3, #2
 80002fa:	b2d2      	uxtb	r2, r2
 80002fc:	701a      	strb	r2, [r3, #0]
		setData[3] = tempData & 0xff; // Извлечь четвертый байт из слова
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3303      	adds	r3, #3
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	701a      	strb	r2, [r3, #0]
	}
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	200000b0 	.word	0x200000b0
 8000314:	08003c00 	.word	0x08003c00

08000318 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	ReadConfig();
 800031e:	f7ff ffcf 	bl	80002c0 <ReadConfig>
	if (!lss.L0_interval || !lss.L1_interval) { //если один из интервалов == 0, заменяем преднастройкой
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <main+0x48>)
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d003      	beq.n	8000332 <main+0x1a>
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <main+0x48>)
 800032c:	885b      	ldrh	r3, [r3, #2]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d107      	bne.n	8000342 <main+0x2a>
		lss.L0_interval = L0_interval_def;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <main+0x48>)
 8000334:	2264      	movs	r2, #100	; 0x64
 8000336:	801a      	strh	r2, [r3, #0]
		lss.L1_interval = L1_interval_def;
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <main+0x48>)
 800033a:	22c8      	movs	r2, #200	; 0xc8
 800033c:	805a      	strh	r2, [r3, #2]
		WriteConfig(); //сохраняем
 800033e:	f7ff ff6f 	bl	8000220 <WriteConfig>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000342:	f000 f99f 	bl	8000684 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000346:	f000 f80d 	bl	8000364 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800034a:	f000 f893 	bl	8000474 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800034e:	f000 f861 	bl	8000414 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	uint32_t i_tick = 0; //счетчик прохождения main while
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		i_tick++;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	3301      	adds	r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	e7fb      	b.n	8000356 <main+0x3e>
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	200000b0 	.word	0x200000b0

08000364 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b099      	sub	sp, #100	; 0x64
 8000368:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800036a:	242c      	movs	r4, #44	; 0x2c
 800036c:	193b      	adds	r3, r7, r4
 800036e:	0018      	movs	r0, r3
 8000370:	2334      	movs	r3, #52	; 0x34
 8000372:	001a      	movs	r2, r3
 8000374:	2100      	movs	r1, #0
 8000376:	f001 fff3 	bl	8002360 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800037a:	231c      	movs	r3, #28
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	0018      	movs	r0, r3
 8000380:	2310      	movs	r3, #16
 8000382:	001a      	movs	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	f001 ffeb 	bl	8002360 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800038a:	003b      	movs	r3, r7
 800038c:	0018      	movs	r0, r3
 800038e:	231c      	movs	r3, #28
 8000390:	001a      	movs	r2, r3
 8000392:	2100      	movs	r1, #0
 8000394:	f001 ffe4 	bl	8002360 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000398:	0021      	movs	r1, r4
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2202      	movs	r2, #2
 800039e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2201      	movs	r2, #1
 80003a4:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2210      	movs	r2, #16
 80003aa:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	0018      	movs	r0, r3
 80003b6:	f000 fe15 	bl	8000fe4 <HAL_RCC_OscConfig>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x5e>
		Error_Handler();
 80003be:	f000 f8a3 	bl	8000508 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003c2:	211c      	movs	r1, #28
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2207      	movs	r2, #7
 80003c8:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2100      	movs	r1, #0
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 f985 	bl	80016f0 <HAL_RCC_ClockConfig>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x8a>
		Error_Handler();
 80003ea:	f000 f88d 	bl	8000508 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003ee:	003b      	movs	r3, r7
 80003f0:	2201      	movs	r2, #1
 80003f2:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003f4:	003b      	movs	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80003fa:	003b      	movs	r3, r7
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 faf1 	bl	80019e4 <HAL_RCCEx_PeriphCLKConfig>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0xa6>
		Error_Handler();
 8000406:	f000 f87f 	bl	8000508 <Error_Handler>
	}
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b019      	add	sp, #100	; 0x64
 8000410:	bd90      	pop	{r4, r7, pc}
	...

08000414 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_USART1_UART_Init+0x58>)
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <MX_USART1_UART_Init+0x5c>)
 800041c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000420:	2296      	movs	r2, #150	; 0x96
 8000422:	0212      	lsls	r2, r2, #8
 8000424:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USART1_UART_Init+0x58>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_USART1_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_USART1_UART_Init+0x58>)
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fbc1 	bl	8001be0 <HAL_UART_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000462:	f000 f851 	bl	8000508 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000002c 	.word	0x2000002c
 8000470:	40013800 	.word	0x40013800

08000474 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b089      	sub	sp, #36	; 0x24
 8000478:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800047a:	240c      	movs	r4, #12
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2314      	movs	r3, #20
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f001 ff6b 	bl	8002360 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <MX_GPIO_Init+0x8c>)
 800048c:	695a      	ldr	r2, [r3, #20]
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <MX_GPIO_Init+0x8c>)
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	02c9      	lsls	r1, r1, #11
 8000494:	430a      	orrs	r2, r1
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <MX_GPIO_Init+0x8c>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	02db      	lsls	r3, r3, #11
 80004a0:	4013      	ands	r3, r2
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <MX_GPIO_Init+0x8c>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_GPIO_Init+0x8c>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0289      	lsls	r1, r1, #10
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_GPIO_Init+0x8c>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	029b      	lsls	r3, r3, #10
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, L1_Pin | L0_Pin, GPIO_PIN_RESET);
 80004c2:	23c0      	movs	r3, #192	; 0xc0
 80004c4:	019b      	lsls	r3, r3, #6
 80004c6:	480f      	ldr	r0, [pc, #60]	; (8000504 <MX_GPIO_Init+0x90>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0019      	movs	r1, r3
 80004cc:	f000 fd6c 	bl	8000fa8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : L1_Pin L0_Pin */
	GPIO_InitStruct.Pin = L1_Pin | L0_Pin;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	22c0      	movs	r2, #192	; 0xc0
 80004d4:	0192      	lsls	r2, r2, #6
 80004d6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	4a05      	ldr	r2, [pc, #20]	; (8000504 <MX_GPIO_Init+0x90>)
 80004ee:	0019      	movs	r1, r3
 80004f0:	0010      	movs	r0, r2
 80004f2:	f000 fbe1 	bl	8000cb8 <HAL_GPIO_Init>

}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b009      	add	sp, #36	; 0x24
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000
 8000504:	48000400 	.word	0x48000400

08000508 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_MspInit+0x44>)
 800051c:	699a      	ldr	r2, [r3, #24]
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_MspInit+0x44>)
 8000520:	2101      	movs	r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	619a      	str	r2, [r3, #24]
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_MspInit+0x44>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <HAL_MspInit+0x44>)
 8000534:	69da      	ldr	r2, [r3, #28]
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_MspInit+0x44>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0549      	lsls	r1, r1, #21
 800053c:	430a      	orrs	r2, r1
 800053e:	61da      	str	r2, [r3, #28]
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <HAL_MspInit+0x44>)
 8000542:	69da      	ldr	r2, [r3, #28]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	055b      	lsls	r3, r3, #21
 8000548:	4013      	ands	r3, r2
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b08b      	sub	sp, #44	; 0x2c
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	2414      	movs	r4, #20
 8000566:	193b      	adds	r3, r7, r4
 8000568:	0018      	movs	r0, r3
 800056a:	2314      	movs	r3, #20
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f001 fef6 	bl	8002360 <memset>
  if(huart->Instance==USART1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <HAL_UART_MspInit+0x94>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d133      	bne.n	80005e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <HAL_UART_MspInit+0x98>)
 8000580:	699a      	ldr	r2, [r3, #24]
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <HAL_UART_MspInit+0x98>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	01c9      	lsls	r1, r1, #7
 8000588:	430a      	orrs	r2, r1
 800058a:	619a      	str	r2, [r3, #24]
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <HAL_UART_MspInit+0x98>)
 800058e:	699a      	ldr	r2, [r3, #24]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	01db      	lsls	r3, r3, #7
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <HAL_UART_MspInit+0x98>)
 800059c:	695a      	ldr	r2, [r3, #20]
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <HAL_UART_MspInit+0x98>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0289      	lsls	r1, r1, #10
 80005a4:	430a      	orrs	r2, r1
 80005a6:	615a      	str	r2, [r3, #20]
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_UART_MspInit+0x98>)
 80005aa:	695a      	ldr	r2, [r3, #20]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	029b      	lsls	r3, r3, #10
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	22c0      	movs	r2, #192	; 0xc0
 80005ba:	00d2      	lsls	r2, r2, #3
 80005bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	0021      	movs	r1, r4
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2202      	movs	r2, #2
 80005c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2203      	movs	r2, #3
 80005d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2201      	movs	r2, #1
 80005d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	187a      	adds	r2, r7, r1
 80005da:	2390      	movs	r3, #144	; 0x90
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 fb69 	bl	8000cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b00b      	add	sp, #44	; 0x2c
 80005ec:	bd90      	pop	{r4, r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	40013800 	.word	0x40013800
 80005f4:	40021000 	.word	0x40021000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061c:	f000 f87a 	bl	8000714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000632:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 8000636:	490e      	ldr	r1, [pc, #56]	; (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000638:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 800064c:	4c0b      	ldr	r4, [pc, #44]	; (800067c <LoopForever+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800065a:	f7ff ffe4 	bl	8000626 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800065e:	f001 fe5b 	bl	8002318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fe59 	bl	8000318 <main>

08000666 <LoopForever>:

LoopForever:
    b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   r0, =_estack
 8000668:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000674:	080023c8 	.word	0x080023c8
  ldr r2, =_sbss
 8000678:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800067c:	200000d8 	.word	0x200000d8

08000680 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_COMP_IRQHandler>
	...

08000684 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <HAL_Init+0x24>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_Init+0x24>)
 800068e:	2110      	movs	r1, #16
 8000690:	430a      	orrs	r2, r1
 8000692:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f809 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800069a:	f7ff ff3b 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	0018      	movs	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	40022000 	.word	0x40022000

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_InitTick+0x5c>)
 80006b6:	681c      	ldr	r4, [r3, #0]
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <HAL_InitTick+0x60>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	0019      	movs	r1, r3
 80006be:	23fa      	movs	r3, #250	; 0xfa
 80006c0:	0098      	lsls	r0, r3, #2
 80006c2:	f7ff fd21 	bl	8000108 <__udivsi3>
 80006c6:	0003      	movs	r3, r0
 80006c8:	0019      	movs	r1, r3
 80006ca:	0020      	movs	r0, r4
 80006cc:	f7ff fd1c 	bl	8000108 <__udivsi3>
 80006d0:	0003      	movs	r3, r0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 f8e1 	bl	800089a <HAL_SYSTICK_Config>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	e00f      	b.n	8000700 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d80b      	bhi.n	80006fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	2301      	movs	r3, #1
 80006ea:	425b      	negs	r3, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 f8be 	bl	8000870 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_InitTick+0x64>)
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e000      	b.n	8000700 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	b003      	add	sp, #12
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	20000000 	.word	0x20000000
 800070c:	20000008 	.word	0x20000008
 8000710:	20000004 	.word	0x20000004

08000714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x1c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	001a      	movs	r2, r3
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_IncTick+0x20>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	18d2      	adds	r2, r2, r3
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_IncTick+0x20>)
 8000726:	601a      	str	r2, [r3, #0]
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	20000008 	.word	0x20000008
 8000734:	200000b4 	.word	0x200000b4

08000738 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <HAL_GetTick+0x10>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	200000b4 	.word	0x200000b4

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	0002      	movs	r2, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b7f      	cmp	r3, #127	; 0x7f
 8000760:	d828      	bhi.n	80007b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000762:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <__NVIC_SetPriority+0xd4>)
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b25b      	sxtb	r3, r3
 800076a:	089b      	lsrs	r3, r3, #2
 800076c:	33c0      	adds	r3, #192	; 0xc0
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	589b      	ldr	r3, [r3, r2]
 8000772:	1dfa      	adds	r2, r7, #7
 8000774:	7812      	ldrb	r2, [r2, #0]
 8000776:	0011      	movs	r1, r2
 8000778:	2203      	movs	r2, #3
 800077a:	400a      	ands	r2, r1
 800077c:	00d2      	lsls	r2, r2, #3
 800077e:	21ff      	movs	r1, #255	; 0xff
 8000780:	4091      	lsls	r1, r2
 8000782:	000a      	movs	r2, r1
 8000784:	43d2      	mvns	r2, r2
 8000786:	401a      	ands	r2, r3
 8000788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	019b      	lsls	r3, r3, #6
 800078e:	22ff      	movs	r2, #255	; 0xff
 8000790:	401a      	ands	r2, r3
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	0018      	movs	r0, r3
 8000798:	2303      	movs	r3, #3
 800079a:	4003      	ands	r3, r0
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a0:	481f      	ldr	r0, [pc, #124]	; (8000820 <__NVIC_SetPriority+0xd4>)
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	089b      	lsrs	r3, r3, #2
 80007aa:	430a      	orrs	r2, r1
 80007ac:	33c0      	adds	r3, #192	; 0xc0
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007b2:	e031      	b.n	8000818 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <__NVIC_SetPriority+0xd8>)
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	0019      	movs	r1, r3
 80007bc:	230f      	movs	r3, #15
 80007be:	400b      	ands	r3, r1
 80007c0:	3b08      	subs	r3, #8
 80007c2:	089b      	lsrs	r3, r3, #2
 80007c4:	3306      	adds	r3, #6
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	18d3      	adds	r3, r2, r3
 80007ca:	3304      	adds	r3, #4
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	1dfa      	adds	r2, r7, #7
 80007d0:	7812      	ldrb	r2, [r2, #0]
 80007d2:	0011      	movs	r1, r2
 80007d4:	2203      	movs	r2, #3
 80007d6:	400a      	ands	r2, r1
 80007d8:	00d2      	lsls	r2, r2, #3
 80007da:	21ff      	movs	r1, #255	; 0xff
 80007dc:	4091      	lsls	r1, r2
 80007de:	000a      	movs	r2, r1
 80007e0:	43d2      	mvns	r2, r2
 80007e2:	401a      	ands	r2, r3
 80007e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	019b      	lsls	r3, r3, #6
 80007ea:	22ff      	movs	r2, #255	; 0xff
 80007ec:	401a      	ands	r2, r3
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	0018      	movs	r0, r3
 80007f4:	2303      	movs	r3, #3
 80007f6:	4003      	ands	r3, r0
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <__NVIC_SetPriority+0xd8>)
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	001c      	movs	r4, r3
 8000804:	230f      	movs	r3, #15
 8000806:	4023      	ands	r3, r4
 8000808:	3b08      	subs	r3, #8
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	430a      	orrs	r2, r1
 800080e:	3306      	adds	r3, #6
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	18c3      	adds	r3, r0, r3
 8000814:	3304      	adds	r3, #4
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b003      	add	sp, #12
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	045b      	lsls	r3, r3, #17
 8000838:	429a      	cmp	r2, r3
 800083a:	d301      	bcc.n	8000840 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083c:	2301      	movs	r3, #1
 800083e:	e010      	b.n	8000862 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <SysTick_Config+0x44>)
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	3a01      	subs	r2, #1
 8000846:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000848:	2301      	movs	r3, #1
 800084a:	425b      	negs	r3, r3
 800084c:	2103      	movs	r1, #3
 800084e:	0018      	movs	r0, r3
 8000850:	f7ff ff7c 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <SysTick_Config+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <SysTick_Config+0x44>)
 800085c:	2207      	movs	r2, #7
 800085e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000860:	2300      	movs	r3, #0
}
 8000862:	0018      	movs	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	210f      	movs	r1, #15
 800087c:	187b      	adds	r3, r7, r1
 800087e:	1c02      	adds	r2, r0, #0
 8000880:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	187b      	adds	r3, r7, r1
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b004      	add	sp, #16
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff ffbf 	bl	8000828 <SysTick_Config>
 80008aa:	0003      	movs	r3, r0
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80008b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	603a      	str	r2, [r7, #0]
 80008c0:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80008c2:	2317      	movs	r3, #23
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 80008ca:	2316      	movs	r3, #22
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 80008d2:	2315      	movs	r3, #21
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80008da:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <HAL_FLASH_Program+0x120>)
 80008dc:	7e1b      	ldrb	r3, [r3, #24]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d101      	bne.n	80008e6 <HAL_FLASH_Program+0x32>
 80008e2:	2302      	movs	r3, #2
 80008e4:	e072      	b.n	80009cc <HAL_FLASH_Program+0x118>
 80008e6:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <HAL_FLASH_Program+0x120>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008ec:	2317      	movs	r3, #23
 80008ee:	18fe      	adds	r6, r7, r3
 80008f0:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <HAL_FLASH_Program+0x124>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 f8c4 	bl	8000a80 <FLASH_WaitForLastOperation>
 80008f8:	0003      	movs	r3, r0
 80008fa:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80008fc:	2317      	movs	r3, #23
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d15c      	bne.n	80009c0 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d104      	bne.n	8000916 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800090c:	2315      	movs	r3, #21
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e00b      	b.n	800092e <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d104      	bne.n	8000926 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800091c:	2315      	movs	r3, #21
 800091e:	18fb      	adds	r3, r7, r3
 8000920:	2202      	movs	r2, #2
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e003      	b.n	800092e <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000926:	2315      	movs	r3, #21
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	2204      	movs	r2, #4
 800092c:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 800092e:	2316      	movs	r3, #22
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	e039      	b.n	80009ac <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000938:	2116      	movs	r1, #22
 800093a:	187b      	adds	r3, r7, r1
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	005a      	lsls	r2, r3, #1
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	18d0      	adds	r0, r2, r3
 8000944:	187b      	adds	r3, r7, r1
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	001a      	movs	r2, r3
 800094c:	3a20      	subs	r2, #32
 800094e:	2a00      	cmp	r2, #0
 8000950:	db03      	blt.n	800095a <HAL_FLASH_Program+0xa6>
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	40d1      	lsrs	r1, r2
 8000956:	000c      	movs	r4, r1
 8000958:	e008      	b.n	800096c <HAL_FLASH_Program+0xb8>
 800095a:	2220      	movs	r2, #32
 800095c:	1ad2      	subs	r2, r2, r3
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	4091      	lsls	r1, r2
 8000962:	000a      	movs	r2, r1
 8000964:	6839      	ldr	r1, [r7, #0]
 8000966:	40d9      	lsrs	r1, r3
 8000968:	000c      	movs	r4, r1
 800096a:	4314      	orrs	r4, r2
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	40da      	lsrs	r2, r3
 8000970:	0015      	movs	r5, r2
 8000972:	b2a3      	uxth	r3, r4
 8000974:	0019      	movs	r1, r3
 8000976:	f000 f867 	bl	8000a48 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800097a:	2317      	movs	r3, #23
 800097c:	18fe      	adds	r6, r7, r3
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <HAL_FLASH_Program+0x124>)
 8000980:	0018      	movs	r0, r3
 8000982:	f000 f87d 	bl	8000a80 <FLASH_WaitForLastOperation>
 8000986:	0003      	movs	r3, r0
 8000988:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_FLASH_Program+0x128>)
 800098c:	691a      	ldr	r2, [r3, #16]
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <HAL_FLASH_Program+0x128>)
 8000990:	2101      	movs	r1, #1
 8000992:	438a      	bics	r2, r1
 8000994:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000996:	2317      	movs	r3, #23
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10e      	bne.n	80009be <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 80009a0:	2116      	movs	r1, #22
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	3201      	adds	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	2316      	movs	r3, #22
 80009ae:	18fa      	adds	r2, r7, r3
 80009b0:	2315      	movs	r3, #21
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	7812      	ldrb	r2, [r2, #0]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d3bd      	bcc.n	8000938 <HAL_FLASH_Program+0x84>
 80009bc:	e000      	b.n	80009c0 <HAL_FLASH_Program+0x10c>
      {
        break;
 80009be:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <HAL_FLASH_Program+0x120>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	761a      	strb	r2, [r3, #24]

  return status;
 80009c6:	2317      	movs	r3, #23
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	781b      	ldrb	r3, [r3, #0]
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b007      	add	sp, #28
 80009d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d4:	200000b8 	.word	0x200000b8
 80009d8:	0000c350 	.word	0x0000c350
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_FLASH_Unlock+0x40>)
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	4013      	ands	r3, r2
 80009f4:	d00d      	beq.n	8000a12 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_FLASH_Unlock+0x40>)
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_FLASH_Unlock+0x44>)
 80009fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_FLASH_Unlock+0x40>)
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_FLASH_Unlock+0x48>)
 8000a00:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <HAL_FLASH_Unlock+0x40>)
 8000a04:	691b      	ldr	r3, [r3, #16]
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	4013      	ands	r3, r2
 8000a0a:	d002      	beq.n	8000a12 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
}
 8000a16:	0018      	movs	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40022000 	.word	0x40022000
 8000a24:	45670123 	.word	0x45670123
 8000a28:	cdef89ab 	.word	0xcdef89ab

08000a2c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_FLASH_Lock+0x18>)
 8000a32:	691a      	ldr	r2, [r3, #16]
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_FLASH_Lock+0x18>)
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40022000 	.word	0x40022000

08000a48 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	000a      	movs	r2, r1
 8000a52:	1cbb      	adds	r3, r7, #2
 8000a54:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <FLASH_Program_HalfWord+0x30>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <FLASH_Program_HalfWord+0x34>)
 8000a5e:	691a      	ldr	r2, [r3, #16]
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <FLASH_Program_HalfWord+0x34>)
 8000a62:	2101      	movs	r1, #1
 8000a64:	430a      	orrs	r2, r1
 8000a66:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	1cba      	adds	r2, r7, #2
 8000a6c:	8812      	ldrh	r2, [r2, #0]
 8000a6e:	801a      	strh	r2, [r3, #0]
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200000b8 	.word	0x200000b8
 8000a7c:	40022000 	.word	0x40022000

08000a80 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff fe56 	bl	8000738 <HAL_GetTick>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000a90:	e00f      	b.n	8000ab2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3301      	adds	r3, #1
 8000a96:	d00c      	beq.n	8000ab2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d007      	beq.n	8000aae <FLASH_WaitForLastOperation+0x2e>
 8000a9e:	f7ff fe4b 	bl	8000738 <HAL_GetTick>
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d201      	bcs.n	8000ab2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e01f      	b.n	8000af2 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <FLASH_WaitForLastOperation+0x7c>)
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d0e9      	beq.n	8000a92 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <FLASH_WaitForLastOperation+0x7c>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	2b20      	cmp	r3, #32
 8000ac8:	d102      	bne.n	8000ad0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <FLASH_WaitForLastOperation+0x7c>)
 8000acc:	2220      	movs	r2, #32
 8000ace:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <FLASH_WaitForLastOperation+0x7c>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2b10      	cmp	r3, #16
 8000ada:	d005      	beq.n	8000ae8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <FLASH_WaitForLastOperation+0x7c>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d103      	bne.n	8000af0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000ae8:	f000 f80a 	bl	8000b00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e000      	b.n	8000af2 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b004      	add	sp, #16
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40022000 	.word	0x40022000

08000b00 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <FLASH_SetErrorCode+0x58>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	2210      	movs	r2, #16
 8000b10:	4013      	ands	r3, r2
 8000b12:	2b10      	cmp	r3, #16
 8000b14:	d109      	bne.n	8000b2a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <FLASH_SetErrorCode+0x5c>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <FLASH_SetErrorCode+0x5c>)
 8000b20:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2210      	movs	r2, #16
 8000b26:	4313      	orrs	r3, r2
 8000b28:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <FLASH_SetErrorCode+0x58>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	2204      	movs	r2, #4
 8000b30:	4013      	ands	r3, r2
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d109      	bne.n	8000b4a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <FLASH_SetErrorCode+0x5c>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <FLASH_SetErrorCode+0x5c>)
 8000b40:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2204      	movs	r2, #4
 8000b46:	4313      	orrs	r3, r2
 8000b48:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000b4a:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <FLASH_SetErrorCode+0x58>)
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	60da      	str	r2, [r3, #12]
}  
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	200000b8 	.word	0x200000b8

08000b60 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b76:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <HAL_FLASHEx_Erase+0xe0>)
 8000b78:	7e1b      	ldrb	r3, [r3, #24]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d101      	bne.n	8000b82 <HAL_FLASHEx_Erase+0x22>
 8000b7e:	2302      	movs	r3, #2
 8000b80:	e05a      	b.n	8000c38 <HAL_FLASHEx_Erase+0xd8>
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_FLASHEx_Erase+0xe0>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d116      	bne.n	8000bbe <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <HAL_FLASHEx_Erase+0xe4>)
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff ff74 	bl	8000a80 <FLASH_WaitForLastOperation>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d147      	bne.n	8000c2c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000b9c:	f000 f856 	bl	8000c4c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	18fc      	adds	r4, r7, r3
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <HAL_FLASHEx_Erase+0xe4>)
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff ff6a 	bl	8000a80 <FLASH_WaitForLastOperation>
 8000bac:	0003      	movs	r3, r0
 8000bae:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <HAL_FLASHEx_Erase+0xe8>)
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_FLASHEx_Erase+0xe8>)
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	438a      	bics	r2, r1
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	e036      	b.n	8000c2c <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_FLASHEx_Erase+0xe4>)
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <FLASH_WaitForLastOperation>
 8000bc6:	1e03      	subs	r3, r0, #0
 8000bc8:	d130      	bne.n	8000c2c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4252      	negs	r2, r2
 8000bd0:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	e01f      	b.n	8000c1a <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 f84d 	bl	8000c7c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000be2:	250f      	movs	r5, #15
 8000be4:	197c      	adds	r4, r7, r5
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_FLASHEx_Erase+0xe4>)
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ff49 	bl	8000a80 <FLASH_WaitForLastOperation>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_FLASHEx_Erase+0xe8>)
 8000bf4:	691a      	ldr	r2, [r3, #16]
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_FLASHEx_Erase+0xe8>)
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	438a      	bics	r2, r1
 8000bfc:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000bfe:	197b      	adds	r3, r7, r5
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	601a      	str	r2, [r3, #0]
            break;
 8000c0c:	e00e      	b.n	8000c2c <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	4694      	mov	ip, r2
 8000c16:	4463      	add	r3, ip
 8000c18:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	02da      	lsls	r2, r3, #11
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d3d6      	bcc.n	8000bda <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <HAL_FLASHEx_Erase+0xe0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	761a      	strb	r2, [r3, #24]

  return status;
 8000c32:	230f      	movs	r3, #15
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	781b      	ldrb	r3, [r3, #0]
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b004      	add	sp, #16
 8000c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c40:	200000b8 	.word	0x200000b8
 8000c44:	0000c350 	.word	0x0000c350
 8000c48:	40022000 	.word	0x40022000

08000c4c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <FLASH_MassErase+0x28>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <FLASH_MassErase+0x2c>)
 8000c58:	691a      	ldr	r2, [r3, #16]
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <FLASH_MassErase+0x2c>)
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <FLASH_MassErase+0x2c>)
 8000c64:	691a      	ldr	r2, [r3, #16]
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <FLASH_MassErase+0x2c>)
 8000c68:	2140      	movs	r1, #64	; 0x40
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	611a      	str	r2, [r3, #16]
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000b8 	.word	0x200000b8
 8000c78:	40022000 	.word	0x40022000

08000c7c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <FLASH_PageErase+0x34>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <FLASH_PageErase+0x38>)
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <FLASH_PageErase+0x38>)
 8000c90:	2102      	movs	r1, #2
 8000c92:	430a      	orrs	r2, r1
 8000c94:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <FLASH_PageErase+0x38>)
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <FLASH_PageErase+0x38>)
 8000c9e:	691a      	ldr	r2, [r3, #16]
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <FLASH_PageErase+0x38>)
 8000ca2:	2140      	movs	r1, #64	; 0x40
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	611a      	str	r2, [r3, #16]
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000b8 	.word	0x200000b8
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc6:	e155      	b.n	8000f74 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	000a      	movs	r2, r1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d100      	bne.n	8000ce0 <HAL_GPIO_Init+0x28>
 8000cde:	e146      	b.n	8000f6e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d005      	beq.n	8000cf8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d130      	bne.n	8000d5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	409a      	lsls	r2, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2e:	2201      	movs	r2, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	091b      	lsrs	r3, r3, #4
 8000d44:	2201      	movs	r2, #1
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2203      	movs	r2, #3
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d017      	beq.n	8000d96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d123      	bne.n	8000dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	08da      	lsrs	r2, r3, #3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3208      	adds	r2, #8
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	58d3      	ldr	r3, [r2, r3]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2207      	movs	r2, #7
 8000db4:	4013      	ands	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	2107      	movs	r1, #7
 8000dce:	400b      	ands	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3208      	adds	r2, #8
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	6939      	ldr	r1, [r7, #16]
 8000de8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2203      	movs	r2, #3
 8000e08:	401a      	ands	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	23c0      	movs	r3, #192	; 0xc0
 8000e24:	029b      	lsls	r3, r3, #10
 8000e26:	4013      	ands	r3, r2
 8000e28:	d100      	bne.n	8000e2c <HAL_GPIO_Init+0x174>
 8000e2a:	e0a0      	b.n	8000f6e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2c:	4b57      	ldr	r3, [pc, #348]	; (8000f8c <HAL_GPIO_Init+0x2d4>)
 8000e2e:	699a      	ldr	r2, [r3, #24]
 8000e30:	4b56      	ldr	r3, [pc, #344]	; (8000f8c <HAL_GPIO_Init+0x2d4>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	430a      	orrs	r2, r1
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <HAL_GPIO_Init+0x2d4>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4013      	ands	r3, r2
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e44:	4a52      	ldr	r2, [pc, #328]	; (8000f90 <HAL_GPIO_Init+0x2d8>)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	589b      	ldr	r3, [r3, r2]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2203      	movs	r2, #3
 8000e56:	4013      	ands	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	43da      	mvns	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	2390      	movs	r3, #144	; 0x90
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d019      	beq.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a47      	ldr	r2, [pc, #284]	; (8000f94 <HAL_GPIO_Init+0x2dc>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x1ea>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_GPIO_Init+0x2e0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x1e6>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <HAL_GPIO_Init+0x2e4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x1e2>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a44      	ldr	r2, [pc, #272]	; (8000fa0 <HAL_GPIO_Init+0x2e8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x1de>
 8000e92:	2304      	movs	r3, #4
 8000e94:	e008      	b.n	8000ea8 <HAL_GPIO_Init+0x1f0>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x1f0>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e004      	b.n	8000ea8 <HAL_GPIO_Init+0x1f0>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x1f0>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x1f0>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	2103      	movs	r1, #3
 8000eac:	400a      	ands	r2, r1
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4093      	lsls	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eb8:	4935      	ldr	r1, [pc, #212]	; (8000f90 <HAL_GPIO_Init+0x2d8>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec6:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	025b      	lsls	r3, r3, #9
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	029b      	lsls	r3, r3, #10
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	035b      	lsls	r3, r3, #13
 8000f32:	4013      	ands	r3, r2
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	039b      	lsls	r3, r3, #14
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	40da      	lsrs	r2, r3
 8000f7c:	1e13      	subs	r3, r2, #0
 8000f7e:	d000      	beq.n	8000f82 <HAL_GPIO_Init+0x2ca>
 8000f80:	e6a2      	b.n	8000cc8 <HAL_GPIO_Init+0x10>
  } 
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b006      	add	sp, #24
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000
 8000f94:	48000400 	.word	0x48000400
 8000f98:	48000800 	.word	0x48000800
 8000f9c:	48000c00 	.word	0x48000c00
 8000fa0:	48001000 	.word	0x48001000
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	0008      	movs	r0, r1
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	1cbb      	adds	r3, r7, #2
 8000fb6:	1c02      	adds	r2, r0, #0
 8000fb8:	801a      	strh	r2, [r3, #0]
 8000fba:	1c7b      	adds	r3, r7, #1
 8000fbc:	1c0a      	adds	r2, r1, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc0:	1c7b      	adds	r3, r7, #1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc8:	1cbb      	adds	r3, r7, #2
 8000fca:	881a      	ldrh	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd0:	e003      	b.n	8000fda <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd2:	1cbb      	adds	r3, r7, #2
 8000fd4:	881a      	ldrh	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f000 fb76 	bl	80016e4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4013      	ands	r3, r2
 8001000:	d100      	bne.n	8001004 <HAL_RCC_OscConfig+0x20>
 8001002:	e08e      	b.n	8001122 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001004:	4bc5      	ldr	r3, [pc, #788]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	220c      	movs	r2, #12
 800100a:	4013      	ands	r3, r2
 800100c:	2b04      	cmp	r3, #4
 800100e:	d00e      	beq.n	800102e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001010:	4bc2      	ldr	r3, [pc, #776]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	220c      	movs	r2, #12
 8001016:	4013      	ands	r3, r2
 8001018:	2b08      	cmp	r3, #8
 800101a:	d117      	bne.n	800104c <HAL_RCC_OscConfig+0x68>
 800101c:	4bbf      	ldr	r3, [pc, #764]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	23c0      	movs	r3, #192	; 0xc0
 8001022:	025b      	lsls	r3, r3, #9
 8001024:	401a      	ands	r2, r3
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	025b      	lsls	r3, r3, #9
 800102a:	429a      	cmp	r2, r3
 800102c:	d10e      	bne.n	800104c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102e:	4bbb      	ldr	r3, [pc, #748]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	029b      	lsls	r3, r3, #10
 8001036:	4013      	ands	r3, r2
 8001038:	d100      	bne.n	800103c <HAL_RCC_OscConfig+0x58>
 800103a:	e071      	b.n	8001120 <HAL_RCC_OscConfig+0x13c>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d000      	beq.n	8001046 <HAL_RCC_OscConfig+0x62>
 8001044:	e06c      	b.n	8001120 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	f000 fb4c 	bl	80016e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <HAL_RCC_OscConfig+0x80>
 8001054:	4bb1      	ldr	r3, [pc, #708]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4bb0      	ldr	r3, [pc, #704]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	0249      	lsls	r1, r1, #9
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e02f      	b.n	80010c4 <HAL_RCC_OscConfig+0xe0>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10c      	bne.n	8001086 <HAL_RCC_OscConfig+0xa2>
 800106c:	4bab      	ldr	r3, [pc, #684]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4baa      	ldr	r3, [pc, #680]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001072:	49ab      	ldr	r1, [pc, #684]	; (8001320 <HAL_RCC_OscConfig+0x33c>)
 8001074:	400a      	ands	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	4ba8      	ldr	r3, [pc, #672]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4ba7      	ldr	r3, [pc, #668]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800107e:	49a9      	ldr	r1, [pc, #676]	; (8001324 <HAL_RCC_OscConfig+0x340>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e01e      	b.n	80010c4 <HAL_RCC_OscConfig+0xe0>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b05      	cmp	r3, #5
 800108c:	d10e      	bne.n	80010ac <HAL_RCC_OscConfig+0xc8>
 800108e:	4ba3      	ldr	r3, [pc, #652]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4ba2      	ldr	r3, [pc, #648]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	02c9      	lsls	r1, r1, #11
 8001098:	430a      	orrs	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	4b9f      	ldr	r3, [pc, #636]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b9e      	ldr	r3, [pc, #632]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0249      	lsls	r1, r1, #9
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0xe0>
 80010ac:	4b9b      	ldr	r3, [pc, #620]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b9a      	ldr	r3, [pc, #616]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80010b2:	499b      	ldr	r1, [pc, #620]	; (8001320 <HAL_RCC_OscConfig+0x33c>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	4b98      	ldr	r3, [pc, #608]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b97      	ldr	r3, [pc, #604]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80010be:	4999      	ldr	r1, [pc, #612]	; (8001324 <HAL_RCC_OscConfig+0x340>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d014      	beq.n	80010f6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fb34 	bl	8000738 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d6:	f7ff fb2f 	bl	8000738 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b64      	cmp	r3, #100	; 0x64
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e2fd      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e8:	4b8c      	ldr	r3, [pc, #560]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	4013      	ands	r3, r2
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0xf2>
 80010f4:	e015      	b.n	8001122 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb1f 	bl	8000738 <HAL_GetTick>
 80010fa:	0003      	movs	r3, r0
 80010fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fb1a 	bl	8000738 <HAL_GetTick>
 8001104:	0002      	movs	r2, r0
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e2e8      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	4b82      	ldr	r3, [pc, #520]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	029b      	lsls	r3, r3, #10
 800111a:	4013      	ands	r3, r2
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x11c>
 800111e:	e000      	b.n	8001122 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2202      	movs	r2, #2
 8001128:	4013      	ands	r3, r2
 800112a:	d100      	bne.n	800112e <HAL_RCC_OscConfig+0x14a>
 800112c:	e06c      	b.n	8001208 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800112e:	4b7b      	ldr	r3, [pc, #492]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	220c      	movs	r2, #12
 8001134:	4013      	ands	r3, r2
 8001136:	d00e      	beq.n	8001156 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001138:	4b78      	ldr	r3, [pc, #480]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	220c      	movs	r2, #12
 800113e:	4013      	ands	r3, r2
 8001140:	2b08      	cmp	r3, #8
 8001142:	d11f      	bne.n	8001184 <HAL_RCC_OscConfig+0x1a0>
 8001144:	4b75      	ldr	r3, [pc, #468]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	23c0      	movs	r3, #192	; 0xc0
 800114a:	025b      	lsls	r3, r3, #9
 800114c:	401a      	ands	r2, r3
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	429a      	cmp	r2, r3
 8001154:	d116      	bne.n	8001184 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001156:	4b71      	ldr	r3, [pc, #452]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2202      	movs	r2, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d005      	beq.n	800116c <HAL_RCC_OscConfig+0x188>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d001      	beq.n	800116c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e2bb      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116c:	4b6b      	ldr	r3, [pc, #428]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	22f8      	movs	r2, #248	; 0xf8
 8001172:	4393      	bics	r3, r2
 8001174:	0019      	movs	r1, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	00da      	lsls	r2, r3, #3
 800117c:	4b67      	ldr	r3, [pc, #412]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001182:	e041      	b.n	8001208 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d024      	beq.n	80011d6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800118c:	4b63      	ldr	r3, [pc, #396]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b62      	ldr	r3, [pc, #392]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001192:	2101      	movs	r1, #1
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff face 	bl	8000738 <HAL_GetTick>
 800119c:	0003      	movs	r3, r0
 800119e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a2:	f7ff fac9 	bl	8000738 <HAL_GetTick>
 80011a6:	0002      	movs	r2, r0
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e297      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	4b59      	ldr	r3, [pc, #356]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2202      	movs	r2, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d0f1      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	4b57      	ldr	r3, [pc, #348]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	22f8      	movs	r2, #248	; 0xf8
 80011c4:	4393      	bics	r3, r2
 80011c6:	0019      	movs	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	00da      	lsls	r2, r3, #3
 80011ce:	4b53      	ldr	r3, [pc, #332]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80011d0:	430a      	orrs	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e018      	b.n	8001208 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d6:	4b51      	ldr	r3, [pc, #324]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b50      	ldr	r3, [pc, #320]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80011dc:	2101      	movs	r1, #1
 80011de:	438a      	bics	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff faa9 	bl	8000738 <HAL_GetTick>
 80011e6:	0003      	movs	r3, r0
 80011e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ec:	f7ff faa4 	bl	8000738 <HAL_GetTick>
 80011f0:	0002      	movs	r2, r0
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e272      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2202      	movs	r2, #2
 8001204:	4013      	ands	r3, r2
 8001206:	d1f1      	bne.n	80011ec <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2208      	movs	r2, #8
 800120e:	4013      	ands	r3, r2
 8001210:	d036      	beq.n	8001280 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d019      	beq.n	800124e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121a:	4b40      	ldr	r3, [pc, #256]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800121c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800121e:	4b3f      	ldr	r3, [pc, #252]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001220:	2101      	movs	r1, #1
 8001222:	430a      	orrs	r2, r1
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001226:	f7ff fa87 	bl	8000738 <HAL_GetTick>
 800122a:	0003      	movs	r3, r0
 800122c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fa82 	bl	8000738 <HAL_GetTick>
 8001234:	0002      	movs	r2, r0
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e250      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	2202      	movs	r2, #2
 8001248:	4013      	ands	r3, r2
 800124a:	d0f1      	beq.n	8001230 <HAL_RCC_OscConfig+0x24c>
 800124c:	e018      	b.n	8001280 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001254:	2101      	movs	r1, #1
 8001256:	438a      	bics	r2, r1
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fa6d 	bl	8000738 <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff fa68 	bl	8000738 <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e236      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001276:	4b29      	ldr	r3, [pc, #164]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d1f1      	bne.n	8001264 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2204      	movs	r2, #4
 8001286:	4013      	ands	r3, r2
 8001288:	d100      	bne.n	800128c <HAL_RCC_OscConfig+0x2a8>
 800128a:	e0b5      	b.n	80013f8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128c:	201f      	movs	r0, #31
 800128e:	183b      	adds	r3, r7, r0
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001296:	69da      	ldr	r2, [r3, #28]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	055b      	lsls	r3, r3, #21
 800129c:	4013      	ands	r3, r2
 800129e:	d110      	bne.n	80012c2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	0549      	lsls	r1, r1, #21
 80012aa:	430a      	orrs	r2, r1
 80012ac:	61da      	str	r2, [r3, #28]
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80012b0:	69da      	ldr	r2, [r3, #28]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	055b      	lsls	r3, r3, #21
 80012b6:	4013      	ands	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012bc:	183b      	adds	r3, r7, r0
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_RCC_OscConfig+0x344>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	d11a      	bne.n	8001304 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_RCC_OscConfig+0x344>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_RCC_OscConfig+0x344>)
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0049      	lsls	r1, r1, #1
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fa2c 	bl	8000738 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e6:	f7ff fa27 	bl	8000738 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b64      	cmp	r3, #100	; 0x64
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e1f5      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_RCC_OscConfig+0x344>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4013      	ands	r3, r2
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d10f      	bne.n	800132c <HAL_RCC_OscConfig+0x348>
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800130e:	6a1a      	ldr	r2, [r3, #32]
 8001310:	4b02      	ldr	r3, [pc, #8]	; (800131c <HAL_RCC_OscConfig+0x338>)
 8001312:	2101      	movs	r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	621a      	str	r2, [r3, #32]
 8001318:	e036      	b.n	8001388 <HAL_RCC_OscConfig+0x3a4>
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	40021000 	.word	0x40021000
 8001320:	fffeffff 	.word	0xfffeffff
 8001324:	fffbffff 	.word	0xfffbffff
 8001328:	40007000 	.word	0x40007000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d10c      	bne.n	800134e <HAL_RCC_OscConfig+0x36a>
 8001334:	4bca      	ldr	r3, [pc, #808]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001336:	6a1a      	ldr	r2, [r3, #32]
 8001338:	4bc9      	ldr	r3, [pc, #804]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800133a:	2101      	movs	r1, #1
 800133c:	438a      	bics	r2, r1
 800133e:	621a      	str	r2, [r3, #32]
 8001340:	4bc7      	ldr	r3, [pc, #796]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001342:	6a1a      	ldr	r2, [r3, #32]
 8001344:	4bc6      	ldr	r3, [pc, #792]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001346:	2104      	movs	r1, #4
 8001348:	438a      	bics	r2, r1
 800134a:	621a      	str	r2, [r3, #32]
 800134c:	e01c      	b.n	8001388 <HAL_RCC_OscConfig+0x3a4>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b05      	cmp	r3, #5
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x38c>
 8001356:	4bc2      	ldr	r3, [pc, #776]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001358:	6a1a      	ldr	r2, [r3, #32]
 800135a:	4bc1      	ldr	r3, [pc, #772]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800135c:	2104      	movs	r1, #4
 800135e:	430a      	orrs	r2, r1
 8001360:	621a      	str	r2, [r3, #32]
 8001362:	4bbf      	ldr	r3, [pc, #764]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	4bbe      	ldr	r3, [pc, #760]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001368:	2101      	movs	r1, #1
 800136a:	430a      	orrs	r2, r1
 800136c:	621a      	str	r2, [r3, #32]
 800136e:	e00b      	b.n	8001388 <HAL_RCC_OscConfig+0x3a4>
 8001370:	4bbb      	ldr	r3, [pc, #748]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001372:	6a1a      	ldr	r2, [r3, #32]
 8001374:	4bba      	ldr	r3, [pc, #744]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001376:	2101      	movs	r1, #1
 8001378:	438a      	bics	r2, r1
 800137a:	621a      	str	r2, [r3, #32]
 800137c:	4bb8      	ldr	r3, [pc, #736]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800137e:	6a1a      	ldr	r2, [r3, #32]
 8001380:	4bb7      	ldr	r3, [pc, #732]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001382:	2104      	movs	r1, #4
 8001384:	438a      	bics	r2, r1
 8001386:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d014      	beq.n	80013ba <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff f9d2 	bl	8000738 <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	e009      	b.n	80013ae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff f9cd 	bl	8000738 <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	4aaf      	ldr	r2, [pc, #700]	; (8001664 <HAL_RCC_OscConfig+0x680>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e19a      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ae:	4bac      	ldr	r3, [pc, #688]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	2202      	movs	r2, #2
 80013b4:	4013      	ands	r3, r2
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x3b6>
 80013b8:	e013      	b.n	80013e2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff f9bd 	bl	8000738 <HAL_GetTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c2:	e009      	b.n	80013d8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c4:	f7ff f9b8 	bl	8000738 <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	4aa5      	ldr	r2, [pc, #660]	; (8001664 <HAL_RCC_OscConfig+0x680>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e185      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	4ba1      	ldr	r3, [pc, #644]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	2202      	movs	r2, #2
 80013de:	4013      	ands	r3, r2
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013e2:	231f      	movs	r3, #31
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d105      	bne.n	80013f8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ec:	4b9c      	ldr	r3, [pc, #624]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80013ee:	69da      	ldr	r2, [r3, #28]
 80013f0:	4b9b      	ldr	r3, [pc, #620]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80013f2:	499d      	ldr	r1, [pc, #628]	; (8001668 <HAL_RCC_OscConfig+0x684>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2210      	movs	r2, #16
 80013fe:	4013      	ands	r3, r2
 8001400:	d063      	beq.n	80014ca <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d12a      	bne.n	8001460 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800140a:	4b95      	ldr	r3, [pc, #596]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800140c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140e:	4b94      	ldr	r3, [pc, #592]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001410:	2104      	movs	r1, #4
 8001412:	430a      	orrs	r2, r1
 8001414:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001416:	4b92      	ldr	r3, [pc, #584]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800141a:	4b91      	ldr	r3, [pc, #580]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800141c:	2101      	movs	r1, #1
 800141e:	430a      	orrs	r2, r1
 8001420:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff f989 	bl	8000738 <HAL_GetTick>
 8001426:	0003      	movs	r3, r0
 8001428:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800142c:	f7ff f984 	bl	8000738 <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e152      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800143e:	4b88      	ldr	r3, [pc, #544]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	2202      	movs	r2, #2
 8001444:	4013      	ands	r3, r2
 8001446:	d0f1      	beq.n	800142c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001448:	4b85      	ldr	r3, [pc, #532]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144c:	22f8      	movs	r2, #248	; 0xf8
 800144e:	4393      	bics	r3, r2
 8001450:	0019      	movs	r1, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	00da      	lsls	r2, r3, #3
 8001458:	4b81      	ldr	r3, [pc, #516]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800145a:	430a      	orrs	r2, r1
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
 800145e:	e034      	b.n	80014ca <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	3305      	adds	r3, #5
 8001466:	d111      	bne.n	800148c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001468:	4b7d      	ldr	r3, [pc, #500]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800146a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146c:	4b7c      	ldr	r3, [pc, #496]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800146e:	2104      	movs	r1, #4
 8001470:	438a      	bics	r2, r1
 8001472:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001474:	4b7a      	ldr	r3, [pc, #488]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001478:	22f8      	movs	r2, #248	; 0xf8
 800147a:	4393      	bics	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	00da      	lsls	r2, r3, #3
 8001484:	4b76      	ldr	r3, [pc, #472]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001486:	430a      	orrs	r2, r1
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
 800148a:	e01e      	b.n	80014ca <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800148c:	4b74      	ldr	r3, [pc, #464]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800148e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001490:	4b73      	ldr	r3, [pc, #460]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001492:	2104      	movs	r1, #4
 8001494:	430a      	orrs	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001498:	4b71      	ldr	r3, [pc, #452]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800149a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800149c:	4b70      	ldr	r3, [pc, #448]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800149e:	2101      	movs	r1, #1
 80014a0:	438a      	bics	r2, r1
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7ff f948 	bl	8000738 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014ae:	f7ff f943 	bl	8000738 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e111      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014c0:	4b67      	ldr	r3, [pc, #412]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80014c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c4:	2202      	movs	r2, #2
 80014c6:	4013      	ands	r3, r2
 80014c8:	d1f1      	bne.n	80014ae <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2220      	movs	r2, #32
 80014d0:	4013      	ands	r3, r2
 80014d2:	d05c      	beq.n	800158e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014d4:	4b62      	ldr	r3, [pc, #392]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	220c      	movs	r2, #12
 80014da:	4013      	ands	r3, r2
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	d00e      	beq.n	80014fe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014e0:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	220c      	movs	r2, #12
 80014e6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d114      	bne.n	8001516 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014ec:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	23c0      	movs	r3, #192	; 0xc0
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	401a      	ands	r2, r3
 80014f6:	23c0      	movs	r3, #192	; 0xc0
 80014f8:	025b      	lsls	r3, r3, #9
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d10b      	bne.n	8001516 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	025b      	lsls	r3, r3, #9
 8001506:	4013      	ands	r3, r2
 8001508:	d040      	beq.n	800158c <HAL_RCC_OscConfig+0x5a8>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d03c      	beq.n	800158c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0e6      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01b      	beq.n	8001556 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001522:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	0249      	lsls	r1, r1, #9
 8001528:	430a      	orrs	r2, r1
 800152a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff f904 	bl	8000738 <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001536:	f7ff f8ff 	bl	8000738 <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0cd      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001548:	4b45      	ldr	r3, [pc, #276]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800154a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	025b      	lsls	r3, r3, #9
 8001550:	4013      	ands	r3, r2
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x552>
 8001554:	e01b      	b.n	800158e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001556:	4b42      	ldr	r3, [pc, #264]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800155c:	4943      	ldr	r1, [pc, #268]	; (800166c <HAL_RCC_OscConfig+0x688>)
 800155e:	400a      	ands	r2, r1
 8001560:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff f8e9 	bl	8000738 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800156c:	f7ff f8e4 	bl	8000738 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0b2      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	025b      	lsls	r3, r3, #9
 8001586:	4013      	ands	r3, r2
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x588>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800158c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	2b00      	cmp	r3, #0
 8001594:	d100      	bne.n	8001598 <HAL_RCC_OscConfig+0x5b4>
 8001596:	e0a4      	b.n	80016e2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	220c      	movs	r2, #12
 800159e:	4013      	ands	r3, r2
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d100      	bne.n	80015a6 <HAL_RCC_OscConfig+0x5c2>
 80015a4:	e078      	b.n	8001698 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d14c      	bne.n	8001648 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	492e      	ldr	r1, [pc, #184]	; (8001670 <HAL_RCC_OscConfig+0x68c>)
 80015b6:	400a      	ands	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff f8bd 	bl	8000738 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff f8b8 	bl	8000738 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e086      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	049b      	lsls	r3, r3, #18
 80015de:	4013      	ands	r3, r2
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	220f      	movs	r2, #15
 80015e8:	4393      	bics	r3, r2
 80015ea:	0019      	movs	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80015f2:	430a      	orrs	r2, r1
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <HAL_RCC_OscConfig+0x690>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	431a      	orrs	r2, r3
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800160c:	430a      	orrs	r2, r1
 800160e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	0449      	lsls	r1, r1, #17
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff f88b 	bl	8000738 <HAL_GetTick>
 8001622:	0003      	movs	r3, r0
 8001624:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff f886 	bl	8000738 <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e054      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	049b      	lsls	r3, r3, #18
 8001642:	4013      	ands	r3, r2
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x644>
 8001646:	e04c      	b.n	80016e2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <HAL_RCC_OscConfig+0x67c>)
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <HAL_RCC_OscConfig+0x68c>)
 8001650:	400a      	ands	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff f870 	bl	8000738 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x6a6>
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	40021000 	.word	0x40021000
 8001664:	00001388 	.word	0x00001388
 8001668:	efffffff 	.word	0xefffffff
 800166c:	fffeffff 	.word	0xfffeffff
 8001670:	feffffff 	.word	0xfeffffff
 8001674:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff f85e 	bl	8000738 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e02c      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_RCC_OscConfig+0x708>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	049b      	lsls	r3, r3, #18
 8001692:	4013      	ands	r3, r2
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x694>
 8001696:	e024      	b.n	80016e2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e01f      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_RCC_OscConfig+0x708>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_RCC_OscConfig+0x708>)
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	23c0      	movs	r3, #192	; 0xc0
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	401a      	ands	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	429a      	cmp	r2, r3
 80016be:	d10e      	bne.n	80016de <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	220f      	movs	r2, #15
 80016c4:	401a      	ands	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	23f0      	movs	r3, #240	; 0xf0
 80016d2:	039b      	lsls	r3, r3, #14
 80016d4:	401a      	ands	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b008      	add	sp, #32
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0bf      	b.n	8001884 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b61      	ldr	r3, [pc, #388]	; (800188c <HAL_RCC_ClockConfig+0x19c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	4013      	ands	r3, r2
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d911      	bls.n	8001736 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b5e      	ldr	r3, [pc, #376]	; (800188c <HAL_RCC_ClockConfig+0x19c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	4393      	bics	r3, r2
 800171a:	0019      	movs	r1, r3
 800171c:	4b5b      	ldr	r3, [pc, #364]	; (800188c <HAL_RCC_ClockConfig+0x19c>)
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001724:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_RCC_ClockConfig+0x19c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	4013      	ands	r3, r2
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0a6      	b.n	8001884 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d015      	beq.n	800176c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2204      	movs	r2, #4
 8001746:	4013      	ands	r3, r2
 8001748:	d006      	beq.n	8001758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800174a:	4b51      	ldr	r3, [pc, #324]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4b50      	ldr	r3, [pc, #320]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 8001750:	21e0      	movs	r1, #224	; 0xe0
 8001752:	00c9      	lsls	r1, r1, #3
 8001754:	430a      	orrs	r2, r1
 8001756:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	22f0      	movs	r2, #240	; 0xf0
 800175e:	4393      	bics	r3, r2
 8001760:	0019      	movs	r1, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 8001768:	430a      	orrs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	d04c      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b44      	ldr	r3, [pc, #272]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	4013      	ands	r3, r2
 8001788:	d120      	bne.n	80017cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e07a      	b.n	8001884 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	049b      	lsls	r3, r3, #18
 800179e:	4013      	ands	r3, r2
 80017a0:	d114      	bne.n	80017cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e06e      	b.n	8001884 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 80017b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	4013      	ands	r3, r2
 80017b8:	d108      	bne.n	80017cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e062      	b.n	8001884 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2202      	movs	r2, #2
 80017c4:	4013      	ands	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e05b      	b.n	8001884 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017cc:	4b30      	ldr	r3, [pc, #192]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	4393      	bics	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7fe ffaa 	bl	8000738 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e8:	e009      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ea:	f7fe ffa5 	bl	8000738 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a27      	ldr	r2, [pc, #156]	; (8001894 <HAL_RCC_ClockConfig+0x1a4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e042      	b.n	8001884 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	220c      	movs	r2, #12
 8001804:	401a      	ands	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1ec      	bne.n	80017ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_RCC_ClockConfig+0x19c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d211      	bcs.n	8001842 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_RCC_ClockConfig+0x19c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4393      	bics	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_RCC_ClockConfig+0x19c>)
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_RCC_ClockConfig+0x19c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2201      	movs	r2, #1
 8001836:	4013      	ands	r3, r2
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d001      	beq.n	8001842 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e020      	b.n	8001884 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2204      	movs	r2, #4
 8001848:	4013      	ands	r3, r2
 800184a:	d009      	beq.n	8001860 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_RCC_ClockConfig+0x1a8>)
 8001852:	4013      	ands	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001860:	f000 f820 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001864:	0001      	movs	r1, r0
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_RCC_ClockConfig+0x1a0>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	220f      	movs	r2, #15
 800186e:	4013      	ands	r3, r2
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_RCC_ClockConfig+0x1ac>)
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	000a      	movs	r2, r1
 8001876:	40da      	lsrs	r2, r3
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_RCC_ClockConfig+0x1b0>)
 800187a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800187c:	2003      	movs	r0, #3
 800187e:	f7fe ff15 	bl	80006ac <HAL_InitTick>
  
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b004      	add	sp, #16
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40022000 	.word	0x40022000
 8001890:	40021000 	.word	0x40021000
 8001894:	00001388 	.word	0x00001388
 8001898:	fffff8ff 	.word	0xfffff8ff
 800189c:	080023a8 	.word	0x080023a8
 80018a0:	20000000 	.word	0x20000000

080018a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b08f      	sub	sp, #60	; 0x3c
 80018a8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018aa:	2314      	movs	r3, #20
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	4a38      	ldr	r2, [pc, #224]	; (8001990 <HAL_RCC_GetSysClockFreq+0xec>)
 80018b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018b2:	c313      	stmia	r3!, {r0, r1, r4}
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4a36      	ldr	r2, [pc, #216]	; (8001994 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018be:	c313      	stmia	r3!, {r0, r1, r4}
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	220c      	movs	r2, #12
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d047      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0xd4>
 80018e8:	d849      	bhi.n	800197e <HAL_RCC_GetSysClockFreq+0xda>
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x50>
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x56>
 80018f2:	e044      	b.n	800197e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018f8:	e044      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	0c9b      	lsrs	r3, r3, #18
 80018fe:	220f      	movs	r2, #15
 8001900:	4013      	ands	r3, r2
 8001902:	2214      	movs	r2, #20
 8001904:	18ba      	adds	r2, r7, r2
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <HAL_RCC_GetSysClockFreq+0xf4>)
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	220f      	movs	r2, #15
 8001910:	4013      	ands	r3, r2
 8001912:	1d3a      	adds	r2, r7, #4
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191a:	23c0      	movs	r3, #192	; 0xc0
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	401a      	ands	r2, r3
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	429a      	cmp	r2, r3
 8001926:	d109      	bne.n	800193c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800192a:	481c      	ldr	r0, [pc, #112]	; (800199c <HAL_RCC_GetSysClockFreq+0xf8>)
 800192c:	f7fe fbec 	bl	8000108 <__udivsi3>
 8001930:	0003      	movs	r3, r0
 8001932:	001a      	movs	r2, r3
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	4353      	muls	r3, r2
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
 800193a:	e01a      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800193c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193e:	23c0      	movs	r3, #192	; 0xc0
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	401a      	ands	r2, r3
 8001944:	23c0      	movs	r3, #192	; 0xc0
 8001946:	025b      	lsls	r3, r3, #9
 8001948:	429a      	cmp	r2, r3
 800194a:	d109      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800194c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800194e:	4814      	ldr	r0, [pc, #80]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001950:	f7fe fbda 	bl	8000108 <__udivsi3>
 8001954:	0003      	movs	r3, r0
 8001956:	001a      	movs	r2, r3
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	4353      	muls	r3, r2
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
 800195e:	e008      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001962:	480e      	ldr	r0, [pc, #56]	; (800199c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001964:	f7fe fbd0 	bl	8000108 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	001a      	movs	r2, r3
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	4353      	muls	r3, r2
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001976:	e005      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800197c:	e002      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001982:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b00f      	add	sp, #60	; 0x3c
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	08002388 	.word	0x08002388
 8001994:	08002398 	.word	0x08002398
 8001998:	40021000 	.word	0x40021000
 800199c:	007a1200 	.word	0x007a1200
 80019a0:	02dc6c00 	.word	0x02dc6c00

080019a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019bc:	f7ff fff2 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019c0:	0001      	movs	r1, r0
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	2207      	movs	r2, #7
 80019ca:	4013      	ands	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	40d9      	lsrs	r1, r3
 80019d2:	000b      	movs	r3, r1
}    
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	40021000 	.word	0x40021000
 80019e0:	080023b8 	.word	0x080023b8

080019e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	4013      	ands	r3, r2
 80019fe:	d100      	bne.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a00:	e08e      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a02:	2017      	movs	r0, #23
 8001a04:	183b      	adds	r3, r7, r0
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b6e      	ldr	r3, [pc, #440]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	055b      	lsls	r3, r3, #21
 8001a12:	4013      	ands	r3, r2
 8001a14:	d110      	bne.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b6b      	ldr	r3, [pc, #428]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a18:	69da      	ldr	r2, [r3, #28]
 8001a1a:	4b6a      	ldr	r3, [pc, #424]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	0549      	lsls	r1, r1, #21
 8001a20:	430a      	orrs	r2, r1
 8001a22:	61da      	str	r2, [r3, #28]
 8001a24:	4b67      	ldr	r3, [pc, #412]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a26:	69da      	ldr	r2, [r3, #28]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	055b      	lsls	r3, r3, #21
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a32:	183b      	adds	r3, r7, r0
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d11a      	bne.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a44:	4b60      	ldr	r3, [pc, #384]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b5f      	ldr	r3, [pc, #380]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	0049      	lsls	r1, r1, #1
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a52:	f7fe fe71 	bl	8000738 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	e008      	b.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7fe fe6c 	bl	8000738 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0a6      	b.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a7a:	4b52      	ldr	r3, [pc, #328]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a7c:	6a1a      	ldr	r2, [r3, #32]
 8001a7e:	23c0      	movs	r3, #192	; 0xc0
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d034      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	23c0      	movs	r3, #192	; 0xc0
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d02c      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a9c:	4b49      	ldr	r3, [pc, #292]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a4a      	ldr	r2, [pc, #296]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa8:	6a1a      	ldr	r2, [r3, #32]
 8001aaa:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0249      	lsls	r1, r1, #9
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ab4:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab6:	6a1a      	ldr	r2, [r3, #32]
 8001ab8:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aba:	4945      	ldr	r1, [pc, #276]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001abc:	400a      	ands	r2, r1
 8001abe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ac0:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7fe fe33 	bl	8000738 <HAL_GetTick>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad6:	e009      	b.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7fe fe2e 	bl	8000738 <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	4a3c      	ldr	r2, [pc, #240]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e067      	b.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	2202      	movs	r2, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001af6:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a34      	ldr	r2, [pc, #208]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	0019      	movs	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b06:	430a      	orrs	r2, r1
 8001b08:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b0a:	2317      	movs	r3, #23
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b1a:	492f      	ldr	r1, [pc, #188]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	d009      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	2203      	movs	r2, #3
 8001b30:	4393      	bics	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2220      	movs	r2, #32
 8001b62:	4013      	ands	r3, r2
 8001b64:	d009      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	029b      	lsls	r3, r3, #10
 8001b82:	4013      	ands	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d009      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	4393      	bics	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b006      	add	sp, #24
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	fffffcff 	.word	0xfffffcff
 8001bd0:	fffeffff 	.word	0xfffeffff
 8001bd4:	00001388 	.word	0x00001388
 8001bd8:	efffffff 	.word	0xefffffff
 8001bdc:	fffcffff 	.word	0xfffcffff

08001be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e044      	b.n	8001c7c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2274      	movs	r2, #116	; 0x74
 8001bfe:	2100      	movs	r1, #0
 8001c00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7fe fca9 	bl	800055c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2224      	movs	r2, #36	; 0x24
 8001c0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 f830 	bl	8001c88 <UART_SetConfig>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e024      	b.n	8001c7c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 f9ab 	bl	8001f98 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	490d      	ldr	r1, [pc, #52]	; (8001c84 <HAL_UART_Init+0xa4>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	212a      	movs	r1, #42	; 0x2a
 8001c5e:	438a      	bics	r2, r1
 8001c60:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 fa43 	bl	8002100 <UART_CheckIdleState>
 8001c7a:	0003      	movs	r3, r0
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b002      	add	sp, #8
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	ffffb7ff 	.word	0xffffb7ff

08001c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c90:	231e      	movs	r3, #30
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4aaf      	ldr	r2, [pc, #700]	; (8001f74 <UART_SetConfig+0x2ec>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	0019      	movs	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4aaa      	ldr	r2, [pc, #680]	; (8001f78 <UART_SetConfig+0x2f0>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4aa1      	ldr	r2, [pc, #644]	; (8001f7c <UART_SetConfig+0x2f4>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a9d      	ldr	r2, [pc, #628]	; (8001f80 <UART_SetConfig+0x2f8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d127      	bne.n	8001d5e <UART_SetConfig+0xd6>
 8001d0e:	4b9d      	ldr	r3, [pc, #628]	; (8001f84 <UART_SetConfig+0x2fc>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	2203      	movs	r2, #3
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d00d      	beq.n	8001d36 <UART_SetConfig+0xae>
 8001d1a:	d81b      	bhi.n	8001d54 <UART_SetConfig+0xcc>
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d014      	beq.n	8001d4a <UART_SetConfig+0xc2>
 8001d20:	d818      	bhi.n	8001d54 <UART_SetConfig+0xcc>
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <UART_SetConfig+0xa4>
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d00a      	beq.n	8001d40 <UART_SetConfig+0xb8>
 8001d2a:	e013      	b.n	8001d54 <UART_SetConfig+0xcc>
 8001d2c:	231f      	movs	r3, #31
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e065      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001d36:	231f      	movs	r3, #31
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	e060      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001d40:	231f      	movs	r3, #31
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2204      	movs	r2, #4
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e05b      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001d4a:	231f      	movs	r3, #31
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	2208      	movs	r2, #8
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e056      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001d54:	231f      	movs	r3, #31
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2210      	movs	r2, #16
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e051      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a89      	ldr	r2, [pc, #548]	; (8001f88 <UART_SetConfig+0x300>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d134      	bne.n	8001dd2 <UART_SetConfig+0x14a>
 8001d68:	4b86      	ldr	r3, [pc, #536]	; (8001f84 <UART_SetConfig+0x2fc>)
 8001d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	22c0      	movs	r2, #192	; 0xc0
 8001d74:	0292      	lsls	r2, r2, #10
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d017      	beq.n	8001daa <UART_SetConfig+0x122>
 8001d7a:	22c0      	movs	r2, #192	; 0xc0
 8001d7c:	0292      	lsls	r2, r2, #10
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d822      	bhi.n	8001dc8 <UART_SetConfig+0x140>
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	0292      	lsls	r2, r2, #10
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <UART_SetConfig+0x136>
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	0292      	lsls	r2, r2, #10
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d81a      	bhi.n	8001dc8 <UART_SetConfig+0x140>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <UART_SetConfig+0x118>
 8001d96:	2280      	movs	r2, #128	; 0x80
 8001d98:	0252      	lsls	r2, r2, #9
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00a      	beq.n	8001db4 <UART_SetConfig+0x12c>
 8001d9e:	e013      	b.n	8001dc8 <UART_SetConfig+0x140>
 8001da0:	231f      	movs	r3, #31
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e02b      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001daa:	231f      	movs	r3, #31
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	2202      	movs	r2, #2
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e026      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001db4:	231f      	movs	r3, #31
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	2204      	movs	r2, #4
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e021      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001dbe:	231f      	movs	r3, #31
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e01c      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001dc8:	231f      	movs	r3, #31
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2210      	movs	r2, #16
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e017      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a6d      	ldr	r2, [pc, #436]	; (8001f8c <UART_SetConfig+0x304>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d104      	bne.n	8001de6 <UART_SetConfig+0x15e>
 8001ddc:	231f      	movs	r3, #31
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	e00d      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a69      	ldr	r2, [pc, #420]	; (8001f90 <UART_SetConfig+0x308>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d104      	bne.n	8001dfa <UART_SetConfig+0x172>
 8001df0:	231f      	movs	r3, #31
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e003      	b.n	8001e02 <UART_SetConfig+0x17a>
 8001dfa:	231f      	movs	r3, #31
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2210      	movs	r2, #16
 8001e00:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d15d      	bne.n	8001eca <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8001e0e:	231f      	movs	r3, #31
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d015      	beq.n	8001e44 <UART_SetConfig+0x1bc>
 8001e18:	dc18      	bgt.n	8001e4c <UART_SetConfig+0x1c4>
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d00d      	beq.n	8001e3a <UART_SetConfig+0x1b2>
 8001e1e:	dc15      	bgt.n	8001e4c <UART_SetConfig+0x1c4>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <UART_SetConfig+0x1a2>
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d005      	beq.n	8001e34 <UART_SetConfig+0x1ac>
 8001e28:	e010      	b.n	8001e4c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e2a:	f7ff fdc5 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	61bb      	str	r3, [r7, #24]
        break;
 8001e32:	e012      	b.n	8001e5a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e34:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <UART_SetConfig+0x30c>)
 8001e36:	61bb      	str	r3, [r7, #24]
        break;
 8001e38:	e00f      	b.n	8001e5a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e3a:	f7ff fd33 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	61bb      	str	r3, [r7, #24]
        break;
 8001e42:	e00a      	b.n	8001e5a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	61bb      	str	r3, [r7, #24]
        break;
 8001e4a:	e006      	b.n	8001e5a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e50:	231e      	movs	r3, #30
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
        break;
 8001e58:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d100      	bne.n	8001e62 <UART_SetConfig+0x1da>
 8001e60:	e07b      	b.n	8001f5a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	005a      	lsls	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	18d2      	adds	r2, r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0019      	movs	r1, r3
 8001e74:	0010      	movs	r0, r2
 8001e76:	f7fe f947 	bl	8000108 <__udivsi3>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	d91c      	bls.n	8001ec0 <UART_SetConfig+0x238>
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	025b      	lsls	r3, r3, #9
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d217      	bcs.n	8001ec0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	200e      	movs	r0, #14
 8001e96:	183b      	adds	r3, r7, r0
 8001e98:	210f      	movs	r1, #15
 8001e9a:	438a      	bics	r2, r1
 8001e9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	b299      	uxth	r1, r3
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	183a      	adds	r2, r7, r0
 8001eae:	8812      	ldrh	r2, [r2, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	183a      	adds	r2, r7, r0
 8001eba:	8812      	ldrh	r2, [r2, #0]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	e04c      	b.n	8001f5a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8001ec0:	231e      	movs	r3, #30
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	e047      	b.n	8001f5a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001eca:	231f      	movs	r3, #31
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d015      	beq.n	8001f00 <UART_SetConfig+0x278>
 8001ed4:	dc18      	bgt.n	8001f08 <UART_SetConfig+0x280>
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d00d      	beq.n	8001ef6 <UART_SetConfig+0x26e>
 8001eda:	dc15      	bgt.n	8001f08 <UART_SetConfig+0x280>
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <UART_SetConfig+0x25e>
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d005      	beq.n	8001ef0 <UART_SetConfig+0x268>
 8001ee4:	e010      	b.n	8001f08 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ee6:	f7ff fd67 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8001eea:	0003      	movs	r3, r0
 8001eec:	61bb      	str	r3, [r7, #24]
        break;
 8001eee:	e012      	b.n	8001f16 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ef0:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <UART_SetConfig+0x30c>)
 8001ef2:	61bb      	str	r3, [r7, #24]
        break;
 8001ef4:	e00f      	b.n	8001f16 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ef6:	f7ff fcd5 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001efa:	0003      	movs	r3, r0
 8001efc:	61bb      	str	r3, [r7, #24]
        break;
 8001efe:	e00a      	b.n	8001f16 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	61bb      	str	r3, [r7, #24]
        break;
 8001f06:	e006      	b.n	8001f16 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f0c:	231e      	movs	r3, #30
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
        break;
 8001f14:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01e      	beq.n	8001f5a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	085a      	lsrs	r2, r3, #1
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	18d2      	adds	r2, r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	0010      	movs	r0, r2
 8001f2e:	f7fe f8eb 	bl	8000108 <__udivsi3>
 8001f32:	0003      	movs	r3, r0
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	d909      	bls.n	8001f52 <UART_SetConfig+0x2ca>
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d204      	bcs.n	8001f52 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	e003      	b.n	8001f5a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8001f52:	231e      	movs	r3, #30
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001f66:	231e      	movs	r3, #30
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b008      	add	sp, #32
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	efff69f3 	.word	0xefff69f3
 8001f78:	ffffcfff 	.word	0xffffcfff
 8001f7c:	fffff4ff 	.word	0xfffff4ff
 8001f80:	40013800 	.word	0x40013800
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40004400 	.word	0x40004400
 8001f8c:	40004800 	.word	0x40004800
 8001f90:	40004c00 	.word	0x40004c00
 8001f94:	007a1200 	.word	0x007a1200

08001f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d00b      	beq.n	8001fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	; (80020dc <UART_AdvFeatureConfig+0x144>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d00b      	beq.n	8001fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4a43      	ldr	r2, [pc, #268]	; (80020e0 <UART_AdvFeatureConfig+0x148>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2204      	movs	r2, #4
 8001fea:	4013      	ands	r3, r2
 8001fec:	d00b      	beq.n	8002006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <UART_AdvFeatureConfig+0x14c>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	2208      	movs	r2, #8
 800200c:	4013      	ands	r3, r2
 800200e:	d00b      	beq.n	8002028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4a34      	ldr	r2, [pc, #208]	; (80020e8 <UART_AdvFeatureConfig+0x150>)
 8002018:	4013      	ands	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	2210      	movs	r2, #16
 800202e:	4013      	ands	r3, r2
 8002030:	d00b      	beq.n	800204a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a2c      	ldr	r2, [pc, #176]	; (80020ec <UART_AdvFeatureConfig+0x154>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	2220      	movs	r2, #32
 8002050:	4013      	ands	r3, r2
 8002052:	d00b      	beq.n	800206c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <UART_AdvFeatureConfig+0x158>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2240      	movs	r2, #64	; 0x40
 8002072:	4013      	ands	r3, r2
 8002074:	d01d      	beq.n	80020b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <UART_AdvFeatureConfig+0x15c>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	035b      	lsls	r3, r3, #13
 8002096:	429a      	cmp	r2, r3
 8002098:	d10b      	bne.n	80020b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <UART_AdvFeatureConfig+0x160>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	4013      	ands	r3, r2
 80020ba:	d00b      	beq.n	80020d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <UART_AdvFeatureConfig+0x164>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
  }
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	fffdffff 	.word	0xfffdffff
 80020e0:	fffeffff 	.word	0xfffeffff
 80020e4:	fffbffff 	.word	0xfffbffff
 80020e8:	ffff7fff 	.word	0xffff7fff
 80020ec:	ffffefff 	.word	0xffffefff
 80020f0:	ffffdfff 	.word	0xffffdfff
 80020f4:	ffefffff 	.word	0xffefffff
 80020f8:	ff9fffff 	.word	0xff9fffff
 80020fc:	fff7ffff 	.word	0xfff7ffff

08002100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af02      	add	r7, sp, #8
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	2100      	movs	r1, #0
 800210e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002110:	f7fe fb12 	bl	8000738 <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2208      	movs	r2, #8
 8002120:	4013      	ands	r3, r2
 8002122:	2b08      	cmp	r3, #8
 8002124:	d10c      	bne.n	8002140 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	0391      	lsls	r1, r2, #14
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4a17      	ldr	r2, [pc, #92]	; (800218c <UART_CheckIdleState+0x8c>)
 8002130:	9200      	str	r2, [sp, #0]
 8002132:	2200      	movs	r2, #0
 8002134:	f000 f82c 	bl	8002190 <UART_WaitOnFlagUntilTimeout>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d001      	beq.n	8002140 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e021      	b.n	8002184 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2204      	movs	r2, #4
 8002148:	4013      	ands	r3, r2
 800214a:	2b04      	cmp	r3, #4
 800214c:	d10c      	bne.n	8002168 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2280      	movs	r2, #128	; 0x80
 8002152:	03d1      	lsls	r1, r2, #15
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4a0d      	ldr	r2, [pc, #52]	; (800218c <UART_CheckIdleState+0x8c>)
 8002158:	9200      	str	r2, [sp, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	f000 f818 	bl	8002190 <UART_WaitOnFlagUntilTimeout>
 8002160:	1e03      	subs	r3, r0, #0
 8002162:	d001      	beq.n	8002168 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e00d      	b.n	8002184 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2220      	movs	r2, #32
 8002172:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2274      	movs	r2, #116	; 0x74
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b004      	add	sp, #16
 800218a:	bd80      	pop	{r7, pc}
 800218c:	01ffffff 	.word	0x01ffffff

08002190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b094      	sub	sp, #80	; 0x50
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a0:	e0a3      	b.n	80022ea <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021a4:	3301      	adds	r3, #1
 80021a6:	d100      	bne.n	80021aa <UART_WaitOnFlagUntilTimeout+0x1a>
 80021a8:	e09f      	b.n	80022ea <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021aa:	f7fe fac5 	bl	8000738 <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80021ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d13d      	bne.n	800223c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021c0:	f3ef 8310 	mrs	r3, PRIMASK
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021c8:	647b      	str	r3, [r7, #68]	; 0x44
 80021ca:	2301      	movs	r3, #1
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	f383 8810 	msr	PRIMASK, r3
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	494c      	ldr	r1, [pc, #304]	; (8002314 <UART_WaitOnFlagUntilTimeout+0x184>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	f383 8810 	msr	PRIMASK, r3
}
 80021f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f2:	f3ef 8310 	mrs	r3, PRIMASK
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80021f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021fa:	643b      	str	r3, [r7, #64]	; 0x40
 80021fc:	2301      	movs	r3, #1
 80021fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002202:	f383 8810 	msr	PRIMASK, r3
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2101      	movs	r1, #1
 8002214:	438a      	bics	r2, r1
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800221c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221e:	f383 8810 	msr	PRIMASK, r3
}
 8002222:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2220      	movs	r2, #32
 800222e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2274      	movs	r2, #116	; 0x74
 8002234:	2100      	movs	r1, #0
 8002236:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e067      	b.n	800230c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2204      	movs	r2, #4
 8002244:	4013      	ands	r3, r2
 8002246:	d050      	beq.n	80022ea <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	401a      	ands	r2, r3
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	429a      	cmp	r2, r3
 800225a:	d146      	bne.n	80022ea <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002266:	f3ef 8310 	mrs	r3, PRIMASK
 800226a:	613b      	str	r3, [r7, #16]
  return(result);
 800226c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800226e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002270:	2301      	movs	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f383 8810 	msr	PRIMASK, r3
}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4923      	ldr	r1, [pc, #140]	; (8002314 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002288:	400a      	ands	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800228e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f383 8810 	msr	PRIMASK, r3
}
 8002296:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002298:	f3ef 8310 	mrs	r3, PRIMASK
 800229c:	61fb      	str	r3, [r7, #28]
  return(result);
 800229e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80022a2:	2301      	movs	r3, #1
 80022a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f383 8810 	msr	PRIMASK, r3
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	438a      	bics	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	f383 8810 	msr	PRIMASK, r3
}
 80022c8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2220      	movs	r2, #32
 80022ce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	2120      	movs	r1, #32
 80022dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2274      	movs	r2, #116	; 0x74
 80022e2:	2100      	movs	r1, #0
 80022e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e010      	b.n	800230c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	4013      	ands	r3, r2
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	425a      	negs	r2, r3
 80022fa:	4153      	adcs	r3, r2
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	001a      	movs	r2, r3
 8002300:	1dfb      	adds	r3, r7, #7
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d100      	bne.n	800230a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002308:	e74b      	b.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b014      	add	sp, #80	; 0x50
 8002312:	bd80      	pop	{r7, pc}
 8002314:	fffffe5f 	.word	0xfffffe5f

08002318 <__libc_init_array>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	2600      	movs	r6, #0
 800231c:	4d0c      	ldr	r5, [pc, #48]	; (8002350 <__libc_init_array+0x38>)
 800231e:	4c0d      	ldr	r4, [pc, #52]	; (8002354 <__libc_init_array+0x3c>)
 8002320:	1b64      	subs	r4, r4, r5
 8002322:	10a4      	asrs	r4, r4, #2
 8002324:	42a6      	cmp	r6, r4
 8002326:	d109      	bne.n	800233c <__libc_init_array+0x24>
 8002328:	2600      	movs	r6, #0
 800232a:	f000 f821 	bl	8002370 <_init>
 800232e:	4d0a      	ldr	r5, [pc, #40]	; (8002358 <__libc_init_array+0x40>)
 8002330:	4c0a      	ldr	r4, [pc, #40]	; (800235c <__libc_init_array+0x44>)
 8002332:	1b64      	subs	r4, r4, r5
 8002334:	10a4      	asrs	r4, r4, #2
 8002336:	42a6      	cmp	r6, r4
 8002338:	d105      	bne.n	8002346 <__libc_init_array+0x2e>
 800233a:	bd70      	pop	{r4, r5, r6, pc}
 800233c:	00b3      	lsls	r3, r6, #2
 800233e:	58eb      	ldr	r3, [r5, r3]
 8002340:	4798      	blx	r3
 8002342:	3601      	adds	r6, #1
 8002344:	e7ee      	b.n	8002324 <__libc_init_array+0xc>
 8002346:	00b3      	lsls	r3, r6, #2
 8002348:	58eb      	ldr	r3, [r5, r3]
 800234a:	4798      	blx	r3
 800234c:	3601      	adds	r6, #1
 800234e:	e7f2      	b.n	8002336 <__libc_init_array+0x1e>
 8002350:	080023c0 	.word	0x080023c0
 8002354:	080023c0 	.word	0x080023c0
 8002358:	080023c0 	.word	0x080023c0
 800235c:	080023c4 	.word	0x080023c4

08002360 <memset>:
 8002360:	0003      	movs	r3, r0
 8002362:	1882      	adds	r2, r0, r2
 8002364:	4293      	cmp	r3, r2
 8002366:	d100      	bne.n	800236a <memset+0xa>
 8002368:	4770      	bx	lr
 800236a:	7019      	strb	r1, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	e7f9      	b.n	8002364 <memset+0x4>

08002370 <_init>:
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002376:	bc08      	pop	{r3}
 8002378:	469e      	mov	lr, r3
 800237a:	4770      	bx	lr

0800237c <_fini>:
 800237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002382:	bc08      	pop	{r3}
 8002384:	469e      	mov	lr, r3
 8002386:	4770      	bx	lr
