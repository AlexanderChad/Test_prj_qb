
Test_prj_qb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000010  08002d38  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002d38  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3d2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6a  00000000  00000000  0002a406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0002c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001946e  00000000  00000000  0002d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0f3  00000000  00000000  000465c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c25  00000000  00000000  000516b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e22de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  000e2330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cd4 	.word	0x08002cd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002cd4 	.word	0x08002cd4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <WriteConfig>:
struct lines_settings {
	unsigned int L0_interval;
	unsigned int L1_interval;
};
struct lines_settings lss;
void WriteConfig() {
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock(); // Открыть доступ к FLASH (она закрыта от случайной записи)
 8000226:	f000 fcd3 	bl	8000bd0 <HAL_FLASH_Unlock>
	// В структуре settings хранятся настройки, преобразую ее в 16-битный массив для удобства доступа
	uint16_t *data = (uint16_t*) &lss;
 800022a:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <WriteConfig+0x84>)
 800022c:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef ef; // Объявляю структуру, необходимую для функции стирания страницы
	HAL_StatusTypeDef stat;
	ef.TypeErase = FLASH_TYPEERASE_PAGES; // Стирать постранично
 800022e:	2108      	movs	r1, #8
 8000230:	187b      	adds	r3, r7, r1
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
	ef.PageAddress = SETTINGS_ADDRESS; // Адрес страницы для стирания
 8000236:	187b      	adds	r3, r7, r1
 8000238:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <WriteConfig+0x88>)
 800023a:	605a      	str	r2, [r3, #4]
	ef.NbPages = 1; //Число страниц = 1
 800023c:	187b      	adds	r3, r7, r1
 800023e:	2201      	movs	r2, #1
 8000240:	609a      	str	r2, [r3, #8]
	uint32_t temp; // Временная переменная для результата стирания (не использую)
	HAL_FLASHEx_Erase(&ef, &temp); // Вызов функции стирания
 8000242:	1d3a      	adds	r2, r7, #4
 8000244:	187b      	adds	r3, r7, r1
 8000246:	0011      	movs	r1, r2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fd81 	bl	8000d50 <HAL_FLASHEx_Erase>
	// Будьте уверены, что размер структуры настроек кратен 2 байтам
	for (int i = 0; i < sizeof(lss); i += 2) { // Запись всех настроек
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
 8000252:	e01c      	b.n	800028e <WriteConfig+0x6e>
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
		SETTINGS_ADDRESS + i, *(data++));
 8000254:	69bb      	ldr	r3, [r7, #24]
 8000256:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <WriteConfig+0x88>)
 8000258:	4694      	mov	ip, r2
 800025a:	4463      	add	r3, ip
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800025c:	0019      	movs	r1, r3
		SETTINGS_ADDRESS + i, *(data++));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	1c9a      	adds	r2, r3, #2
 8000262:	61fa      	str	r2, [r7, #28]
 8000264:	881b      	ldrh	r3, [r3, #0]
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000266:	001c      	movs	r4, r3
 8000268:	2300      	movs	r3, #0
 800026a:	001d      	movs	r5, r3
 800026c:	2317      	movs	r3, #23
 800026e:	18fe      	adds	r6, r7, r3
 8000270:	0022      	movs	r2, r4
 8000272:	002b      	movs	r3, r5
 8000274:	2001      	movs	r0, #1
 8000276:	f000 fc15 	bl	8000aa4 <HAL_FLASH_Program>
 800027a:	0003      	movs	r3, r0
 800027c:	7033      	strb	r3, [r6, #0]
		if (stat != HAL_OK)
 800027e:	2317      	movs	r3, #23
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d106      	bne.n	8000296 <WriteConfig+0x76>
	for (int i = 0; i < sizeof(lss); i += 2) { // Запись всех настроек
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3302      	adds	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	2b07      	cmp	r3, #7
 8000292:	d9df      	bls.n	8000254 <WriteConfig+0x34>
 8000294:	e000      	b.n	8000298 <WriteConfig+0x78>
			break; // Если что-то пошло не так - выскочить из цикла
 8000296:	46c0      	nop			; (mov r8, r8)
	}
	HAL_FLASH_Lock(); // Закрыть флешку от случайной записи
 8000298:	f000 fcc0 	bl	8000c1c <HAL_FLASH_Lock>
}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46bd      	mov	sp, r7
 80002a0:	b009      	add	sp, #36	; 0x24
 80002a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002a4:	200000b0 	.word	0x200000b0
 80002a8:	0800fc00 	.word	0x0800fc00

080002ac <FlashRead>:
uint32_t FlashRead(uint32_t address) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	return (*(__IO uint32_t*) address);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}

080002c0 <ReadConfig>:
// Пример чтения 4 байт настроек.
void ReadConfig() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
	// Структуру настроек превращаю в указатель на массив 8-ми битных значений
	uint8_t *setData = (uint8_t*) &lss;
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <ReadConfig+0x50>)
 80002c8:	607b      	str	r3, [r7, #4]
	uint32_t tempData = FlashRead(SETTINGS_ADDRESS); // Прочесть слово из флешки
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadConfig+0x54>)
 80002cc:	0018      	movs	r0, r3
 80002ce:	f7ff ffed 	bl	80002ac <FlashRead>
 80002d2:	0003      	movs	r3, r0
 80002d4:	603b      	str	r3, [r7, #0]
	if (tempData != 0xffffffff) { // Если флешка не пустая
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	3301      	adds	r3, #1
 80002da:	d015      	beq.n	8000308 <ReadConfig+0x48>
		setData[0] = (uint8_t) ((tempData & 0xff000000) >> 24); // �?звлечь первый байт из слова
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	0e1b      	lsrs	r3, r3, #24
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	701a      	strb	r2, [r3, #0]
		setData[1] = (uint8_t) ((tempData & 0x00ff0000) >> 16); // �?звлечь второй байт из слова
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	0c1a      	lsrs	r2, r3, #16
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3301      	adds	r3, #1
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	701a      	strb	r2, [r3, #0]
		setData[2] = (uint8_t) ((tempData & 0x0000ff00) >> 8); // �?злечь третий байт из слова
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	0a1a      	lsrs	r2, r3, #8
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3302      	adds	r3, #2
 80002fa:	b2d2      	uxtb	r2, r2
 80002fc:	701a      	strb	r2, [r3, #0]
		setData[3] = tempData & 0xff; // �?звлечь четвертый байт из слова
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3303      	adds	r3, #3
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	701a      	strb	r2, [r3, #0]
	}
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	200000b0 	.word	0x200000b0
 8000314:	0800fc00 	.word	0x0800fc00

08000318 <CheckLineState>:
//проверка, пора ли менять состояние линии
void CheckLineState(uint32_t now_time, uint32_t *check_time,
		uint16_t L_interval, uint16_t L_pin) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	0019      	movs	r1, r3
 8000324:	1dbb      	adds	r3, r7, #6
 8000326:	801a      	strh	r2, [r3, #0]
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	1c0a      	adds	r2, r1, #0
 800032c:	801a      	strh	r2, [r3, #0]
	if (now_time - *check_time >= L_interval) { //если пора
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	1ad2      	subs	r2, r2, r3
 8000336:	1dbb      	adds	r3, r7, #6
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d309      	bcc.n	8000352 <CheckLineState+0x3a>
		HAL_GPIO_TogglePin(GPIOB, L_pin); //сменили состояние
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	4a06      	ldr	r2, [pc, #24]	; (800035c <CheckLineState+0x44>)
 8000344:	0019      	movs	r1, r3
 8000346:	0010      	movs	r0, r2
 8000348:	f000 ff43 	bl	80011d2 <HAL_GPIO_TogglePin>
		*check_time = now_time; //запомнили время
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	601a      	str	r2, [r3, #0]
	}
}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b004      	add	sp, #16
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	48000400 	.word	0x48000400

08000360 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	ReadConfig();
 8000366:	f7ff ffab 	bl	80002c0 <ReadConfig>
	if (!lss.L0_interval || !lss.L1_interval) { //если хотя бы один из интервалов == 0, заменяем преднастройкой
 800036a:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <main+0x74>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d003      	beq.n	800037a <main+0x1a>
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <main+0x74>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d107      	bne.n	800038a <main+0x2a>
		lss.L0_interval = L0_interval_def;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <main+0x74>)
 800037c:	2264      	movs	r2, #100	; 0x64
 800037e:	601a      	str	r2, [r3, #0]
		lss.L1_interval = L1_interval_def;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <main+0x74>)
 8000382:	22c8      	movs	r2, #200	; 0xc8
 8000384:	605a      	str	r2, [r3, #4]
		WriteConfig(); //сохраняем
 8000386:	f7ff ff4b 	bl	8000220 <WriteConfig>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800038a:	f000 f9cb 	bl	8000724 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800038e:	f000 f823 	bl	80003d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000392:	f000 f8a9 	bl	80004e8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000396:	f000 f877 	bl	8000488 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	uint32_t i_tick = 0; //счетчик прохождения main while
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
	//счетчики для линий
	uint32_t i_L0 = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	60bb      	str	r3, [r7, #8]
	uint32_t i_L1 = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		i_tick++;
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3301      	adds	r3, #1
 80003aa:	60fb      	str	r3, [r7, #12]
		CheckLineState(i_tick, &i_L0, lss.L0_interval, L0_Pin);
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <main+0x74>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	b29a      	uxth	r2, r3
 80003b2:	2380      	movs	r3, #128	; 0x80
 80003b4:	019b      	lsls	r3, r3, #6
 80003b6:	2108      	movs	r1, #8
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	68f8      	ldr	r0, [r7, #12]
 80003bc:	f7ff ffac 	bl	8000318 <CheckLineState>
		CheckLineState(i_tick, &i_L1, lss.L1_interval, L1_Pin);
 80003c0:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <main+0x74>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	b29a      	uxth	r2, r3
 80003c6:	2380      	movs	r3, #128	; 0x80
 80003c8:	015b      	lsls	r3, r3, #5
 80003ca:	1d39      	adds	r1, r7, #4
 80003cc:	68f8      	ldr	r0, [r7, #12]
 80003ce:	f7ff ffa3 	bl	8000318 <CheckLineState>
		i_tick++;
 80003d2:	e7e8      	b.n	80003a6 <main+0x46>
 80003d4:	200000b0 	.word	0x200000b0

080003d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b099      	sub	sp, #100	; 0x64
 80003dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003de:	242c      	movs	r4, #44	; 0x2c
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	0018      	movs	r0, r3
 80003e4:	2334      	movs	r3, #52	; 0x34
 80003e6:	001a      	movs	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	f002 fc6b 	bl	8002cc4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003ee:	231c      	movs	r3, #28
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	0018      	movs	r0, r3
 80003f4:	2310      	movs	r3, #16
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f002 fc63 	bl	8002cc4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003fe:	003b      	movs	r3, r7
 8000400:	0018      	movs	r0, r3
 8000402:	231c      	movs	r3, #28
 8000404:	001a      	movs	r2, r3
 8000406:	2100      	movs	r1, #0
 8000408:	f002 fc5c 	bl	8002cc4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040c:	0021      	movs	r1, r4
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2202      	movs	r2, #2
 8000412:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2201      	movs	r2, #1
 8000418:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2210      	movs	r2, #16
 800041e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000426:	187b      	adds	r3, r7, r1
 8000428:	0018      	movs	r0, r3
 800042a:	f000 feed 	bl	8001208 <HAL_RCC_OscConfig>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x5e>
		Error_Handler();
 8000432:	f000 f8a3 	bl	800057c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000436:	211c      	movs	r1, #28
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2207      	movs	r2, #7
 800043c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2100      	movs	r1, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f001 fa5d 	bl	8001914 <HAL_RCC_ClockConfig>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x8a>
		Error_Handler();
 800045e:	f000 f88d 	bl	800057c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000462:	003b      	movs	r3, r7
 8000464:	2201      	movs	r2, #1
 8000466:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000468:	003b      	movs	r3, r7
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800046e:	003b      	movs	r3, r7
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fbc9 	bl	8001c08 <HAL_RCCEx_PeriphCLKConfig>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0xa6>
		Error_Handler();
 800047a:	f000 f87f 	bl	800057c <Error_Handler>
	}
}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b019      	add	sp, #100	; 0x64
 8000484:	bd90      	pop	{r4, r7, pc}
	...

08000488 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 800048e:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <MX_USART1_UART_Init+0x5c>)
 8000490:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 8000494:	2296      	movs	r2, #150	; 0x96
 8000496:	0212      	lsls	r2, r2, #8
 8000498:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 80004ae:	220c      	movs	r2, #12
 80004b0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <MX_USART1_UART_Init+0x58>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 fc99 	bl	8001e04 <HAL_UART_Init>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80004d6:	f000 f851 	bl	800057c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000002c 	.word	0x2000002c
 80004e4:	40013800 	.word	0x40013800

080004e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b089      	sub	sp, #36	; 0x24
 80004ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004ee:	240c      	movs	r4, #12
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2314      	movs	r3, #20
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f002 fbe3 	bl	8002cc4 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_GPIO_Init+0x8c>)
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_GPIO_Init+0x8c>)
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	02c9      	lsls	r1, r1, #11
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_GPIO_Init+0x8c>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	02db      	lsls	r3, r3, #11
 8000514:	4013      	ands	r3, r2
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_GPIO_Init+0x8c>)
 800051c:	695a      	ldr	r2, [r3, #20]
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_GPIO_Init+0x8c>)
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	0289      	lsls	r1, r1, #10
 8000524:	430a      	orrs	r2, r1
 8000526:	615a      	str	r2, [r3, #20]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_GPIO_Init+0x8c>)
 800052a:	695a      	ldr	r2, [r3, #20]
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	029b      	lsls	r3, r3, #10
 8000530:	4013      	ands	r3, r2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, L1_Pin | L0_Pin, GPIO_PIN_RESET);
 8000536:	23c0      	movs	r3, #192	; 0xc0
 8000538:	019b      	lsls	r3, r3, #6
 800053a:	480f      	ldr	r0, [pc, #60]	; (8000578 <MX_GPIO_Init+0x90>)
 800053c:	2200      	movs	r2, #0
 800053e:	0019      	movs	r1, r3
 8000540:	f000 fe2a 	bl	8001198 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : L1_Pin L0_Pin */
	GPIO_InitStruct.Pin = L1_Pin | L0_Pin;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	22c0      	movs	r2, #192	; 0xc0
 8000548:	0192      	lsls	r2, r2, #6
 800054a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2201      	movs	r2, #1
 8000550:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055e:	193b      	adds	r3, r7, r4
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <MX_GPIO_Init+0x90>)
 8000562:	0019      	movs	r1, r3
 8000564:	0010      	movs	r0, r2
 8000566:	f000 fc9f 	bl	8000ea8 <HAL_GPIO_Init>

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b009      	add	sp, #36	; 0x24
 8000570:	bd90      	pop	{r4, r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000
 8000578:	48000400 	.word	0x48000400

0800057c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_MspInit+0x44>)
 8000590:	699a      	ldr	r2, [r3, #24]
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_MspInit+0x44>)
 8000594:	2101      	movs	r1, #1
 8000596:	430a      	orrs	r2, r1
 8000598:	619a      	str	r2, [r3, #24]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_MspInit+0x44>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	2201      	movs	r2, #1
 80005a0:	4013      	ands	r3, r2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <HAL_MspInit+0x44>)
 80005a8:	69da      	ldr	r2, [r3, #28]
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_MspInit+0x44>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	0549      	lsls	r1, r1, #21
 80005b0:	430a      	orrs	r2, r1
 80005b2:	61da      	str	r2, [r3, #28]
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_MspInit+0x44>)
 80005b6:	69da      	ldr	r2, [r3, #28]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	055b      	lsls	r3, r3, #21
 80005bc:	4013      	ands	r3, r2
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	2414      	movs	r4, #20
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	0018      	movs	r0, r3
 80005de:	2314      	movs	r3, #20
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f002 fb6e 	bl	8002cc4 <memset>
  if(huart->Instance==USART1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <HAL_UART_MspInit+0xa4>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d13b      	bne.n	800066a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <HAL_UART_MspInit+0xa8>)
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <HAL_UART_MspInit+0xa8>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	01c9      	lsls	r1, r1, #7
 80005fc:	430a      	orrs	r2, r1
 80005fe:	619a      	str	r2, [r3, #24]
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <HAL_UART_MspInit+0xa8>)
 8000602:	699a      	ldr	r2, [r3, #24]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	01db      	lsls	r3, r3, #7
 8000608:	4013      	ands	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <HAL_UART_MspInit+0xa8>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <HAL_UART_MspInit+0xa8>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	0289      	lsls	r1, r1, #10
 8000618:	430a      	orrs	r2, r1
 800061a:	615a      	str	r2, [r3, #20]
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <HAL_UART_MspInit+0xa8>)
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	029b      	lsls	r3, r3, #10
 8000624:	4013      	ands	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	22c0      	movs	r2, #192	; 0xc0
 800062e:	00d2      	lsls	r2, r2, #3
 8000630:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	0021      	movs	r1, r4
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2202      	movs	r2, #2
 8000638:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2203      	movs	r2, #3
 8000644:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2201      	movs	r2, #1
 800064a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	187a      	adds	r2, r7, r1
 800064e:	2390      	movs	r3, #144	; 0x90
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fc27 	bl	8000ea8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	201b      	movs	r0, #27
 8000660:	f000 f970 	bl	8000944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000664:	201b      	movs	r0, #27
 8000666:	f000 f982 	bl	800096e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b00b      	add	sp, #44	; 0x2c
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40013800 	.word	0x40013800
 8000678:	40021000 	.word	0x40021000

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <NMI_Handler+0x4>

08000682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler+0x4>

08000688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 f888 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <USART1_IRQHandler+0x14>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fbfa 	bl	8001eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	2000002c 	.word	0x2000002c

080006c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006d6:	490e      	ldr	r1, [pc, #56]	; (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ec:	4c0b      	ldr	r4, [pc, #44]	; (800071c <LoopForever+0x16>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006fa:	f7ff ffe3 	bl	80006c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006fe:	f002 fabd 	bl	8002c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff fe2d 	bl	8000360 <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   r0, =_estack
 8000708:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000714:	08002d2c 	.word	0x08002d2c
  ldr r2, =_sbss
 8000718:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800071c:	200000e0 	.word	0x200000e0

08000720 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_COMP_IRQHandler>
	...

08000724 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <HAL_Init+0x24>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_Init+0x24>)
 800072e:	2110      	movs	r1, #16
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 f809 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073a:	f7ff ff25 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <HAL_InitTick+0x5c>)
 8000756:	681c      	ldr	r4, [r3, #0]
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_InitTick+0x60>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	0019      	movs	r1, r3
 800075e:	23fa      	movs	r3, #250	; 0xfa
 8000760:	0098      	lsls	r0, r3, #2
 8000762:	f7ff fcd1 	bl	8000108 <__udivsi3>
 8000766:	0003      	movs	r3, r0
 8000768:	0019      	movs	r1, r3
 800076a:	0020      	movs	r0, r4
 800076c:	f7ff fccc 	bl	8000108 <__udivsi3>
 8000770:	0003      	movs	r3, r0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 f90b 	bl	800098e <HAL_SYSTICK_Config>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	e00f      	b.n	80007a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d80b      	bhi.n	800079e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	2301      	movs	r3, #1
 800078a:	425b      	negs	r3, r3
 800078c:	2200      	movs	r2, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f8d8 	bl	8000944 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_InitTick+0x64>)
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	e000      	b.n	80007a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b003      	add	sp, #12
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000004 	.word	0x20000004

080007b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_IncTick+0x1c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_IncTick+0x20>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	18d2      	adds	r2, r2, r3
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <HAL_IncTick+0x20>)
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	20000008 	.word	0x20000008
 80007d4:	200000b8 	.word	0x200000b8

080007d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  return uwTick;
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <HAL_GetTick+0x10>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	200000b8 	.word	0x200000b8

080007ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	0002      	movs	r2, r0
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b7f      	cmp	r3, #127	; 0x7f
 80007fe:	d809      	bhi.n	8000814 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	001a      	movs	r2, r3
 8000806:	231f      	movs	r3, #31
 8000808:	401a      	ands	r2, r3
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <__NVIC_EnableIRQ+0x30>)
 800080c:	2101      	movs	r1, #1
 800080e:	4091      	lsls	r1, r2
 8000810:	000a      	movs	r2, r1
 8000812:	601a      	str	r2, [r3, #0]
  }
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}
 800081c:	e000e100 	.word	0xe000e100

08000820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	0002      	movs	r2, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b7f      	cmp	r3, #127	; 0x7f
 8000834:	d828      	bhi.n	8000888 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000836:	4a2f      	ldr	r2, [pc, #188]	; (80008f4 <__NVIC_SetPriority+0xd4>)
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b25b      	sxtb	r3, r3
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	33c0      	adds	r3, #192	; 0xc0
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	589b      	ldr	r3, [r3, r2]
 8000846:	1dfa      	adds	r2, r7, #7
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	0011      	movs	r1, r2
 800084c:	2203      	movs	r2, #3
 800084e:	400a      	ands	r2, r1
 8000850:	00d2      	lsls	r2, r2, #3
 8000852:	21ff      	movs	r1, #255	; 0xff
 8000854:	4091      	lsls	r1, r2
 8000856:	000a      	movs	r2, r1
 8000858:	43d2      	mvns	r2, r2
 800085a:	401a      	ands	r2, r3
 800085c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	019b      	lsls	r3, r3, #6
 8000862:	22ff      	movs	r2, #255	; 0xff
 8000864:	401a      	ands	r2, r3
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	0018      	movs	r0, r3
 800086c:	2303      	movs	r3, #3
 800086e:	4003      	ands	r3, r0
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000874:	481f      	ldr	r0, [pc, #124]	; (80008f4 <__NVIC_SetPriority+0xd4>)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b25b      	sxtb	r3, r3
 800087c:	089b      	lsrs	r3, r3, #2
 800087e:	430a      	orrs	r2, r1
 8000880:	33c0      	adds	r3, #192	; 0xc0
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000886:	e031      	b.n	80008ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <__NVIC_SetPriority+0xd8>)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	0019      	movs	r1, r3
 8000890:	230f      	movs	r3, #15
 8000892:	400b      	ands	r3, r1
 8000894:	3b08      	subs	r3, #8
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	3306      	adds	r3, #6
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	18d3      	adds	r3, r2, r3
 800089e:	3304      	adds	r3, #4
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1dfa      	adds	r2, r7, #7
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	0011      	movs	r1, r2
 80008a8:	2203      	movs	r2, #3
 80008aa:	400a      	ands	r2, r1
 80008ac:	00d2      	lsls	r2, r2, #3
 80008ae:	21ff      	movs	r1, #255	; 0xff
 80008b0:	4091      	lsls	r1, r2
 80008b2:	000a      	movs	r2, r1
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	401a      	ands	r2, r3
 80008b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	22ff      	movs	r2, #255	; 0xff
 80008c0:	401a      	ands	r2, r3
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	0018      	movs	r0, r3
 80008c8:	2303      	movs	r3, #3
 80008ca:	4003      	ands	r3, r0
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <__NVIC_SetPriority+0xd8>)
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	001c      	movs	r4, r3
 80008d8:	230f      	movs	r3, #15
 80008da:	4023      	ands	r3, r4
 80008dc:	3b08      	subs	r3, #8
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	430a      	orrs	r2, r1
 80008e2:	3306      	adds	r3, #6
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	18c3      	adds	r3, r0, r3
 80008e8:	3304      	adds	r3, #4
 80008ea:	601a      	str	r2, [r3, #0]
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b003      	add	sp, #12
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	045b      	lsls	r3, r3, #17
 800090c:	429a      	cmp	r2, r3
 800090e:	d301      	bcc.n	8000914 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000910:	2301      	movs	r3, #1
 8000912:	e010      	b.n	8000936 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <SysTick_Config+0x44>)
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	3a01      	subs	r2, #1
 800091a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091c:	2301      	movs	r3, #1
 800091e:	425b      	negs	r3, r3
 8000920:	2103      	movs	r1, #3
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff ff7c 	bl	8000820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SysTick_Config+0x44>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Config+0x44>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	0018      	movs	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	210f      	movs	r1, #15
 8000950:	187b      	adds	r3, r7, r1
 8000952:	1c02      	adds	r2, r0, #0
 8000954:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	187b      	adds	r3, r7, r1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b25b      	sxtb	r3, r3
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ff5d 	bl	8000820 <__NVIC_SetPriority>
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b004      	add	sp, #16
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	0002      	movs	r2, r0
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ff33 	bl	80007ec <__NVIC_EnableIRQ>
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ffaf 	bl	80008fc <SysTick_Config>
 800099e:	0003      	movs	r3, r0
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2221      	movs	r2, #33	; 0x21
 80009b4:	5c9b      	ldrb	r3, [r3, r2]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d008      	beq.n	80009ce <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2204      	movs	r2, #4
 80009c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2220      	movs	r2, #32
 80009c6:	2100      	movs	r1, #0
 80009c8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e020      	b.n	8000a10 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	210e      	movs	r1, #14
 80009da:	438a      	bics	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	438a      	bics	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f6:	2101      	movs	r1, #1
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2221      	movs	r2, #33	; 0x21
 8000a02:	2101      	movs	r1, #1
 8000a04:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2220      	movs	r2, #32
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a20:	210f      	movs	r1, #15
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2221      	movs	r2, #33	; 0x21
 8000a2c:	5c9b      	ldrb	r3, [r3, r2]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d006      	beq.n	8000a42 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2204      	movs	r2, #4
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	e028      	b.n	8000a94 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	210e      	movs	r1, #14
 8000a4e:	438a      	bics	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	438a      	bics	r2, r1
 8000a60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	000a      	movs	r2, r1
 8000a70:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2221      	movs	r2, #33	; 0x21
 8000a76:	2101      	movs	r1, #1
 8000a78:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	2100      	movs	r1, #0
 8000a80:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d004      	beq.n	8000a94 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	0010      	movs	r0, r2
 8000a92:	4798      	blx	r3
    } 
  }
  return status;
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	603a      	str	r2, [r7, #0]
 8000ab0:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ab2:	2317      	movs	r3, #23
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000aba:	2316      	movs	r3, #22
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000ac2:	2315      	movs	r3, #21
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000aca:	4b3e      	ldr	r3, [pc, #248]	; (8000bc4 <HAL_FLASH_Program+0x120>)
 8000acc:	7e1b      	ldrb	r3, [r3, #24]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d101      	bne.n	8000ad6 <HAL_FLASH_Program+0x32>
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	e072      	b.n	8000bbc <HAL_FLASH_Program+0x118>
 8000ad6:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <HAL_FLASH_Program+0x120>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000adc:	2317      	movs	r3, #23
 8000ade:	18fe      	adds	r6, r7, r3
 8000ae0:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <HAL_FLASH_Program+0x124>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f8c4 	bl	8000c70 <FLASH_WaitForLastOperation>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000aec:	2317      	movs	r3, #23
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d15c      	bne.n	8000bb0 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d104      	bne.n	8000b06 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000afc:	2315      	movs	r3, #21
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	e00b      	b.n	8000b1e <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d104      	bne.n	8000b16 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000b0c:	2315      	movs	r3, #21
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	2202      	movs	r2, #2
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	e003      	b.n	8000b1e <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000b16:	2315      	movs	r3, #21
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000b1e:	2316      	movs	r3, #22
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e039      	b.n	8000b9c <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b28:	2116      	movs	r1, #22
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	005a      	lsls	r2, r3, #1
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	18d0      	adds	r0, r2, r3
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	3a20      	subs	r2, #32
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	db03      	blt.n	8000b4a <HAL_FLASH_Program+0xa6>
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	40d1      	lsrs	r1, r2
 8000b46:	000c      	movs	r4, r1
 8000b48:	e008      	b.n	8000b5c <HAL_FLASH_Program+0xb8>
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	1ad2      	subs	r2, r2, r3
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	4091      	lsls	r1, r2
 8000b52:	000a      	movs	r2, r1
 8000b54:	6839      	ldr	r1, [r7, #0]
 8000b56:	40d9      	lsrs	r1, r3
 8000b58:	000c      	movs	r4, r1
 8000b5a:	4314      	orrs	r4, r2
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	40da      	lsrs	r2, r3
 8000b60:	0015      	movs	r5, r2
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	0019      	movs	r1, r3
 8000b66:	f000 f867 	bl	8000c38 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b6a:	2317      	movs	r3, #23
 8000b6c:	18fe      	adds	r6, r7, r3
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_FLASH_Program+0x124>)
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 f87d 	bl	8000c70 <FLASH_WaitForLastOperation>
 8000b76:	0003      	movs	r3, r0
 8000b78:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_FLASH_Program+0x128>)
 8000b7c:	691a      	ldr	r2, [r3, #16]
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_FLASH_Program+0x128>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	438a      	bics	r2, r1
 8000b84:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000b86:	2317      	movs	r3, #23
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10e      	bne.n	8000bae <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000b90:	2116      	movs	r1, #22
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	3201      	adds	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	2316      	movs	r3, #22
 8000b9e:	18fa      	adds	r2, r7, r3
 8000ba0:	2315      	movs	r3, #21
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d3bd      	bcc.n	8000b28 <HAL_FLASH_Program+0x84>
 8000bac:	e000      	b.n	8000bb0 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000bae:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HAL_FLASH_Program+0x120>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	761a      	strb	r2, [r3, #24]

  return status;
 8000bb6:	2317      	movs	r3, #23
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	781b      	ldrb	r3, [r3, #0]
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b007      	add	sp, #28
 8000bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc4:	200000c0 	.word	0x200000c0
 8000bc8:	0000c350 	.word	0x0000c350
 8000bcc:	40022000 	.word	0x40022000

08000bd0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_FLASH_Unlock+0x40>)
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	4013      	ands	r3, r2
 8000be4:	d00d      	beq.n	8000c02 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_FLASH_Unlock+0x40>)
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_FLASH_Unlock+0x44>)
 8000bea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_FLASH_Unlock+0x40>)
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_FLASH_Unlock+0x48>)
 8000bf0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <HAL_FLASH_Unlock+0x40>)
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	d002      	beq.n	8000c02 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
}
 8000c06:	0018      	movs	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	40022000 	.word	0x40022000
 8000c14:	45670123 	.word	0x45670123
 8000c18:	cdef89ab 	.word	0xcdef89ab

08000c1c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <HAL_FLASH_Lock+0x18>)
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_FLASH_Lock+0x18>)
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40022000 	.word	0x40022000

08000c38 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	000a      	movs	r2, r1
 8000c42:	1cbb      	adds	r3, r7, #2
 8000c44:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <FLASH_Program_HalfWord+0x30>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <FLASH_Program_HalfWord+0x34>)
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <FLASH_Program_HalfWord+0x34>)
 8000c52:	2101      	movs	r1, #1
 8000c54:	430a      	orrs	r2, r1
 8000c56:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	1cba      	adds	r2, r7, #2
 8000c5c:	8812      	ldrh	r2, [r2, #0]
 8000c5e:	801a      	strh	r2, [r3, #0]
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000c0 	.word	0x200000c0
 8000c6c:	40022000 	.word	0x40022000

08000c70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff fdae 	bl	80007d8 <HAL_GetTick>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c80:	e00f      	b.n	8000ca2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	d00c      	beq.n	8000ca2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <FLASH_WaitForLastOperation+0x2e>
 8000c8e:	f7ff fda3 	bl	80007d8 <HAL_GetTick>
 8000c92:	0002      	movs	r2, r0
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d201      	bcs.n	8000ca2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e01f      	b.n	8000ce2 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <FLASH_WaitForLastOperation+0x7c>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4013      	ands	r3, r2
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d0e9      	beq.n	8000c82 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <FLASH_WaitForLastOperation+0x7c>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	2b20      	cmp	r3, #32
 8000cb8:	d102      	bne.n	8000cc0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <FLASH_WaitForLastOperation+0x7c>)
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <FLASH_WaitForLastOperation+0x7c>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	2210      	movs	r2, #16
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b10      	cmp	r3, #16
 8000cca:	d005      	beq.n	8000cd8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <FLASH_WaitForLastOperation+0x7c>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d103      	bne.n	8000ce0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000cd8:	f000 f80a 	bl	8000cf0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40022000 	.word	0x40022000

08000cf0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <FLASH_SetErrorCode+0x58>)
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2210      	movs	r2, #16
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b10      	cmp	r3, #16
 8000d04:	d109      	bne.n	8000d1a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <FLASH_SetErrorCode+0x5c>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <FLASH_SetErrorCode+0x5c>)
 8000d10:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2210      	movs	r2, #16
 8000d16:	4313      	orrs	r3, r2
 8000d18:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <FLASH_SetErrorCode+0x58>)
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	2204      	movs	r2, #4
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	d109      	bne.n	8000d3a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <FLASH_SetErrorCode+0x5c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <FLASH_SetErrorCode+0x5c>)
 8000d30:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2204      	movs	r2, #4
 8000d36:	4313      	orrs	r3, r2
 8000d38:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d3a:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <FLASH_SetErrorCode+0x58>)
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	60da      	str	r2, [r3, #12]
}  
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40022000 	.word	0x40022000
 8000d4c:	200000c0 	.word	0x200000c0

08000d50 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d66:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <HAL_FLASHEx_Erase+0xe0>)
 8000d68:	7e1b      	ldrb	r3, [r3, #24]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d101      	bne.n	8000d72 <HAL_FLASHEx_Erase+0x22>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e05a      	b.n	8000e28 <HAL_FLASHEx_Erase+0xd8>
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <HAL_FLASHEx_Erase+0xe0>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d116      	bne.n	8000dae <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000d80:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <HAL_FLASHEx_Erase+0xe4>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f7ff ff74 	bl	8000c70 <FLASH_WaitForLastOperation>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d147      	bne.n	8000e1c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000d8c:	f000 f856 	bl	8000e3c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d90:	230f      	movs	r3, #15
 8000d92:	18fc      	adds	r4, r7, r3
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <HAL_FLASHEx_Erase+0xe4>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff ff6a 	bl	8000c70 <FLASH_WaitForLastOperation>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <HAL_FLASHEx_Erase+0xe8>)
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_FLASHEx_Erase+0xe8>)
 8000da6:	2104      	movs	r1, #4
 8000da8:	438a      	bics	r2, r1
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	e036      	b.n	8000e1c <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_FLASHEx_Erase+0xe4>)
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <FLASH_WaitForLastOperation>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d130      	bne.n	8000e1c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4252      	negs	r2, r2
 8000dc0:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	e01f      	b.n	8000e0a <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f000 f84d 	bl	8000e6c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dd2:	250f      	movs	r5, #15
 8000dd4:	197c      	adds	r4, r7, r5
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_FLASHEx_Erase+0xe4>)
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff ff49 	bl	8000c70 <FLASH_WaitForLastOperation>
 8000dde:	0003      	movs	r3, r0
 8000de0:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_FLASHEx_Erase+0xe8>)
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_FLASHEx_Erase+0xe8>)
 8000de8:	2102      	movs	r1, #2
 8000dea:	438a      	bics	r2, r1
 8000dec:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000dee:	197b      	adds	r3, r7, r5
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	601a      	str	r2, [r3, #0]
            break;
 8000dfc:	e00e      	b.n	8000e1c <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	4694      	mov	ip, r2
 8000e06:	4463      	add	r3, ip
 8000e08:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	02da      	lsls	r2, r3, #11
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3d6      	bcc.n	8000dca <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HAL_FLASHEx_Erase+0xe0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	761a      	strb	r2, [r3, #24]

  return status;
 8000e22:	230f      	movs	r3, #15
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	781b      	ldrb	r3, [r3, #0]
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b004      	add	sp, #16
 8000e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e30:	200000c0 	.word	0x200000c0
 8000e34:	0000c350 	.word	0x0000c350
 8000e38:	40022000 	.word	0x40022000

08000e3c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <FLASH_MassErase+0x28>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <FLASH_MassErase+0x2c>)
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <FLASH_MassErase+0x2c>)
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <FLASH_MassErase+0x2c>)
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <FLASH_MassErase+0x2c>)
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	611a      	str	r2, [r3, #16]
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000c0 	.word	0x200000c0
 8000e68:	40022000 	.word	0x40022000

08000e6c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <FLASH_PageErase+0x34>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <FLASH_PageErase+0x38>)
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <FLASH_PageErase+0x38>)
 8000e80:	2102      	movs	r1, #2
 8000e82:	430a      	orrs	r2, r1
 8000e84:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <FLASH_PageErase+0x38>)
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <FLASH_PageErase+0x38>)
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <FLASH_PageErase+0x38>)
 8000e92:	2140      	movs	r1, #64	; 0x40
 8000e94:	430a      	orrs	r2, r1
 8000e96:	611a      	str	r2, [r3, #16]
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000c0 	.word	0x200000c0
 8000ea4:	40022000 	.word	0x40022000

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e155      	b.n	8001164 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d100      	bne.n	8000ed0 <HAL_GPIO_Init+0x28>
 8000ece:	e146      	b.n	800115e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	2201      	movs	r2, #1
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	58d3      	ldr	r3, [r2, r3]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	6939      	ldr	r1, [r7, #16]
 8000fd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	23c0      	movs	r3, #192	; 0xc0
 8001014:	029b      	lsls	r3, r3, #10
 8001016:	4013      	ands	r3, r2
 8001018:	d100      	bne.n	800101c <HAL_GPIO_Init+0x174>
 800101a:	e0a0      	b.n	800115e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b57      	ldr	r3, [pc, #348]	; (800117c <HAL_GPIO_Init+0x2d4>)
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	4b56      	ldr	r3, [pc, #344]	; (800117c <HAL_GPIO_Init+0x2d4>)
 8001022:	2101      	movs	r1, #1
 8001024:	430a      	orrs	r2, r1
 8001026:	619a      	str	r2, [r3, #24]
 8001028:	4b54      	ldr	r3, [pc, #336]	; (800117c <HAL_GPIO_Init+0x2d4>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2201      	movs	r2, #1
 800102e:	4013      	ands	r3, r2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x2d8>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	589b      	ldr	r3, [r3, r2]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2203      	movs	r2, #3
 8001046:	4013      	ands	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	409a      	lsls	r2, r3
 800104e:	0013      	movs	r3, r2
 8001050:	43da      	mvns	r2, r3
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	2390      	movs	r3, #144	; 0x90
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	429a      	cmp	r2, r3
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x1ee>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a47      	ldr	r2, [pc, #284]	; (8001184 <HAL_GPIO_Init+0x2dc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x1ea>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a46      	ldr	r2, [pc, #280]	; (8001188 <HAL_GPIO_Init+0x2e0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x1e6>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a45      	ldr	r2, [pc, #276]	; (800118c <HAL_GPIO_Init+0x2e4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x1e2>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a44      	ldr	r2, [pc, #272]	; (8001190 <HAL_GPIO_Init+0x2e8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x1de>
 8001082:	2304      	movs	r3, #4
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x1f0>
 8001086:	2305      	movs	r3, #5
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x1f0>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x1f0>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x1f0>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x1f0>
 8001096:	2300      	movs	r3, #0
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	2103      	movs	r1, #3
 800109c:	400a      	ands	r2, r1
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x2d8>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b6:	4b37      	ldr	r3, [pc, #220]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	4013      	ands	r3, r2
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43da      	mvns	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	029b      	lsls	r3, r3, #10
 80010f8:	4013      	ands	r3, r2
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	035b      	lsls	r3, r3, #13
 8001122:	4013      	ands	r3, r2
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43da      	mvns	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	039b      	lsls	r3, r3, #14
 800114c:	4013      	ands	r3, r2
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e13      	subs	r3, r2, #0
 800116e:	d000      	beq.n	8001172 <HAL_GPIO_Init+0x2ca>
 8001170:	e6a2      	b.n	8000eb8 <HAL_GPIO_Init+0x10>
  } 
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	b006      	add	sp, #24
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	48000400 	.word	0x48000400
 8001188:	48000800 	.word	0x48000800
 800118c:	48000c00 	.word	0x48000c00
 8001190:	48001000 	.word	0x48001000
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	0008      	movs	r0, r1
 80011a2:	0011      	movs	r1, r2
 80011a4:	1cbb      	adds	r3, r7, #2
 80011a6:	1c02      	adds	r2, r0, #0
 80011a8:	801a      	strh	r2, [r3, #0]
 80011aa:	1c7b      	adds	r3, r7, #1
 80011ac:	1c0a      	adds	r2, r1, #0
 80011ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b0:	1c7b      	adds	r3, r7, #1
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b8:	1cbb      	adds	r3, r7, #2
 80011ba:	881a      	ldrh	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c2:	1cbb      	adds	r3, r7, #2
 80011c4:	881a      	ldrh	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	000a      	movs	r2, r1
 80011dc:	1cbb      	adds	r3, r7, #2
 80011de:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e6:	1cbb      	adds	r3, r7, #2
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	041a      	lsls	r2, r3, #16
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	1cb9      	adds	r1, r7, #2
 80011f6:	8809      	ldrh	r1, [r1, #0]
 80011f8:	400b      	ands	r3, r1
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b004      	add	sp, #16
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	f000 fb76 	bl	8001908 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	4013      	ands	r3, r2
 8001224:	d100      	bne.n	8001228 <HAL_RCC_OscConfig+0x20>
 8001226:	e08e      	b.n	8001346 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001228:	4bc5      	ldr	r3, [pc, #788]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	220c      	movs	r2, #12
 800122e:	4013      	ands	r3, r2
 8001230:	2b04      	cmp	r3, #4
 8001232:	d00e      	beq.n	8001252 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001234:	4bc2      	ldr	r3, [pc, #776]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	220c      	movs	r2, #12
 800123a:	4013      	ands	r3, r2
 800123c:	2b08      	cmp	r3, #8
 800123e:	d117      	bne.n	8001270 <HAL_RCC_OscConfig+0x68>
 8001240:	4bbf      	ldr	r3, [pc, #764]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	23c0      	movs	r3, #192	; 0xc0
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	401a      	ands	r2, r3
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	025b      	lsls	r3, r3, #9
 800124e:	429a      	cmp	r2, r3
 8001250:	d10e      	bne.n	8001270 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001252:	4bbb      	ldr	r3, [pc, #748]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	029b      	lsls	r3, r3, #10
 800125a:	4013      	ands	r3, r2
 800125c:	d100      	bne.n	8001260 <HAL_RCC_OscConfig+0x58>
 800125e:	e071      	b.n	8001344 <HAL_RCC_OscConfig+0x13c>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d000      	beq.n	800126a <HAL_RCC_OscConfig+0x62>
 8001268:	e06c      	b.n	8001344 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	f000 fb4c 	bl	8001908 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <HAL_RCC_OscConfig+0x80>
 8001278:	4bb1      	ldr	r3, [pc, #708]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4bb0      	ldr	r3, [pc, #704]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	0249      	lsls	r1, r1, #9
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e02f      	b.n	80012e8 <HAL_RCC_OscConfig+0xe0>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10c      	bne.n	80012aa <HAL_RCC_OscConfig+0xa2>
 8001290:	4bab      	ldr	r3, [pc, #684]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4baa      	ldr	r3, [pc, #680]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001296:	49ab      	ldr	r1, [pc, #684]	; (8001544 <HAL_RCC_OscConfig+0x33c>)
 8001298:	400a      	ands	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	4ba8      	ldr	r3, [pc, #672]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4ba7      	ldr	r3, [pc, #668]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80012a2:	49a9      	ldr	r1, [pc, #676]	; (8001548 <HAL_RCC_OscConfig+0x340>)
 80012a4:	400a      	ands	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e01e      	b.n	80012e8 <HAL_RCC_OscConfig+0xe0>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d10e      	bne.n	80012d0 <HAL_RCC_OscConfig+0xc8>
 80012b2:	4ba3      	ldr	r3, [pc, #652]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4ba2      	ldr	r3, [pc, #648]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	02c9      	lsls	r1, r1, #11
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	4b9f      	ldr	r3, [pc, #636]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b9e      	ldr	r3, [pc, #632]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80012c6:	2180      	movs	r1, #128	; 0x80
 80012c8:	0249      	lsls	r1, r1, #9
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xe0>
 80012d0:	4b9b      	ldr	r3, [pc, #620]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b9a      	ldr	r3, [pc, #616]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80012d6:	499b      	ldr	r1, [pc, #620]	; (8001544 <HAL_RCC_OscConfig+0x33c>)
 80012d8:	400a      	ands	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	4b98      	ldr	r3, [pc, #608]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b97      	ldr	r3, [pc, #604]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80012e2:	4999      	ldr	r1, [pc, #612]	; (8001548 <HAL_RCC_OscConfig+0x340>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d014      	beq.n	800131a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fa72 	bl	80007d8 <HAL_GetTick>
 80012f4:	0003      	movs	r3, r0
 80012f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fa:	f7ff fa6d 	bl	80007d8 <HAL_GetTick>
 80012fe:	0002      	movs	r2, r0
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b64      	cmp	r3, #100	; 0x64
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e2fd      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130c:	4b8c      	ldr	r3, [pc, #560]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	029b      	lsls	r3, r3, #10
 8001314:	4013      	ands	r3, r2
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0xf2>
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fa5d 	bl	80007d8 <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fa58 	bl	80007d8 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e2e8      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	4b82      	ldr	r3, [pc, #520]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	029b      	lsls	r3, r3, #10
 800133e:	4013      	ands	r3, r2
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x11c>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d100      	bne.n	8001352 <HAL_RCC_OscConfig+0x14a>
 8001350:	e06c      	b.n	800142c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001352:	4b7b      	ldr	r3, [pc, #492]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	220c      	movs	r2, #12
 8001358:	4013      	ands	r3, r2
 800135a:	d00e      	beq.n	800137a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800135c:	4b78      	ldr	r3, [pc, #480]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	220c      	movs	r2, #12
 8001362:	4013      	ands	r3, r2
 8001364:	2b08      	cmp	r3, #8
 8001366:	d11f      	bne.n	80013a8 <HAL_RCC_OscConfig+0x1a0>
 8001368:	4b75      	ldr	r3, [pc, #468]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	23c0      	movs	r3, #192	; 0xc0
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	401a      	ands	r2, r3
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	429a      	cmp	r2, r3
 8001378:	d116      	bne.n	80013a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	4b71      	ldr	r3, [pc, #452]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2202      	movs	r2, #2
 8001380:	4013      	ands	r3, r2
 8001382:	d005      	beq.n	8001390 <HAL_RCC_OscConfig+0x188>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d001      	beq.n	8001390 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e2bb      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b6b      	ldr	r3, [pc, #428]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	22f8      	movs	r2, #248	; 0xf8
 8001396:	4393      	bics	r3, r2
 8001398:	0019      	movs	r1, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00da      	lsls	r2, r3, #3
 80013a0:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	e041      	b.n	800142c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d024      	beq.n	80013fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b0:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b62      	ldr	r3, [pc, #392]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fa0c 	bl	80007d8 <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fa07 	bl	80007d8 <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e297      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2202      	movs	r2, #2
 80013de:	4013      	ands	r3, r2
 80013e0:	d0f1      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b57      	ldr	r3, [pc, #348]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	22f8      	movs	r2, #248	; 0xf8
 80013e8:	4393      	bics	r3, r2
 80013ea:	0019      	movs	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	00da      	lsls	r2, r3, #3
 80013f2:	4b53      	ldr	r3, [pc, #332]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e018      	b.n	800142c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b51      	ldr	r3, [pc, #324]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b50      	ldr	r3, [pc, #320]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001400:	2101      	movs	r1, #1
 8001402:	438a      	bics	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff f9e7 	bl	80007d8 <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff f9e2 	bl	80007d8 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e272      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2202      	movs	r2, #2
 8001428:	4013      	ands	r3, r2
 800142a:	d1f1      	bne.n	8001410 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2208      	movs	r2, #8
 8001432:	4013      	ands	r3, r2
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d019      	beq.n	8001472 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b40      	ldr	r3, [pc, #256]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001444:	2101      	movs	r1, #1
 8001446:	430a      	orrs	r2, r1
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff f9c5 	bl	80007d8 <HAL_GetTick>
 800144e:	0003      	movs	r3, r0
 8001450:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff f9c0 	bl	80007d8 <HAL_GetTick>
 8001458:	0002      	movs	r2, r0
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e250      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d0f1      	beq.n	8001454 <HAL_RCC_OscConfig+0x24c>
 8001470:	e018      	b.n	80014a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001476:	4b32      	ldr	r3, [pc, #200]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001478:	2101      	movs	r1, #1
 800147a:	438a      	bics	r2, r1
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147e:	f7ff f9ab 	bl	80007d8 <HAL_GetTick>
 8001482:	0003      	movs	r3, r0
 8001484:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff f9a6 	bl	80007d8 <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e236      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d1f1      	bne.n	8001488 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2204      	movs	r2, #4
 80014aa:	4013      	ands	r3, r2
 80014ac:	d100      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2a8>
 80014ae:	e0b5      	b.n	800161c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b0:	201f      	movs	r0, #31
 80014b2:	183b      	adds	r3, r7, r0
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	055b      	lsls	r3, r3, #21
 80014c0:	4013      	ands	r3, r2
 80014c2:	d110      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0549      	lsls	r1, r1, #21
 80014ce:	430a      	orrs	r2, r1
 80014d0:	61da      	str	r2, [r3, #28]
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 80014d4:	69da      	ldr	r2, [r3, #28]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	055b      	lsls	r3, r3, #21
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014e0:	183b      	adds	r3, r7, r0
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_OscConfig+0x344>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4013      	ands	r3, r2
 80014f0:	d11a      	bne.n	8001528 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_RCC_OscConfig+0x344>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_RCC_OscConfig+0x344>)
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	0049      	lsls	r1, r1, #1
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001500:	f7ff f96a 	bl	80007d8 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150a:	f7ff f965 	bl	80007d8 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e1f5      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_OscConfig+0x344>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10f      	bne.n	8001550 <HAL_RCC_OscConfig+0x348>
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <HAL_RCC_OscConfig+0x338>)
 8001536:	2101      	movs	r1, #1
 8001538:	430a      	orrs	r2, r1
 800153a:	621a      	str	r2, [r3, #32]
 800153c:	e036      	b.n	80015ac <HAL_RCC_OscConfig+0x3a4>
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	40021000 	.word	0x40021000
 8001544:	fffeffff 	.word	0xfffeffff
 8001548:	fffbffff 	.word	0xfffbffff
 800154c:	40007000 	.word	0x40007000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10c      	bne.n	8001572 <HAL_RCC_OscConfig+0x36a>
 8001558:	4bca      	ldr	r3, [pc, #808]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800155a:	6a1a      	ldr	r2, [r3, #32]
 800155c:	4bc9      	ldr	r3, [pc, #804]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800155e:	2101      	movs	r1, #1
 8001560:	438a      	bics	r2, r1
 8001562:	621a      	str	r2, [r3, #32]
 8001564:	4bc7      	ldr	r3, [pc, #796]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001566:	6a1a      	ldr	r2, [r3, #32]
 8001568:	4bc6      	ldr	r3, [pc, #792]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800156a:	2104      	movs	r1, #4
 800156c:	438a      	bics	r2, r1
 800156e:	621a      	str	r2, [r3, #32]
 8001570:	e01c      	b.n	80015ac <HAL_RCC_OscConfig+0x3a4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x38c>
 800157a:	4bc2      	ldr	r3, [pc, #776]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800157c:	6a1a      	ldr	r2, [r3, #32]
 800157e:	4bc1      	ldr	r3, [pc, #772]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001580:	2104      	movs	r1, #4
 8001582:	430a      	orrs	r2, r1
 8001584:	621a      	str	r2, [r3, #32]
 8001586:	4bbf      	ldr	r3, [pc, #764]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001588:	6a1a      	ldr	r2, [r3, #32]
 800158a:	4bbe      	ldr	r3, [pc, #760]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800158c:	2101      	movs	r1, #1
 800158e:	430a      	orrs	r2, r1
 8001590:	621a      	str	r2, [r3, #32]
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0x3a4>
 8001594:	4bbb      	ldr	r3, [pc, #748]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001596:	6a1a      	ldr	r2, [r3, #32]
 8001598:	4bba      	ldr	r3, [pc, #744]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800159a:	2101      	movs	r1, #1
 800159c:	438a      	bics	r2, r1
 800159e:	621a      	str	r2, [r3, #32]
 80015a0:	4bb8      	ldr	r3, [pc, #736]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80015a2:	6a1a      	ldr	r2, [r3, #32]
 80015a4:	4bb7      	ldr	r3, [pc, #732]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80015a6:	2104      	movs	r1, #4
 80015a8:	438a      	bics	r2, r1
 80015aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d014      	beq.n	80015de <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff f910 	bl	80007d8 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	e009      	b.n	80015d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff f90b 	bl	80007d8 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	4aaf      	ldr	r2, [pc, #700]	; (8001888 <HAL_RCC_OscConfig+0x680>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e19a      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	4bac      	ldr	r3, [pc, #688]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	2202      	movs	r2, #2
 80015d8:	4013      	ands	r3, r2
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x3b6>
 80015dc:	e013      	b.n	8001606 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff f8fb 	bl	80007d8 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	e009      	b.n	80015fc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff f8f6 	bl	80007d8 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	4aa5      	ldr	r2, [pc, #660]	; (8001888 <HAL_RCC_OscConfig+0x680>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e185      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	4ba1      	ldr	r3, [pc, #644]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	2202      	movs	r2, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001606:	231f      	movs	r3, #31
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4b9c      	ldr	r3, [pc, #624]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	4b9b      	ldr	r3, [pc, #620]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001616:	499d      	ldr	r1, [pc, #628]	; (800188c <HAL_RCC_OscConfig+0x684>)
 8001618:	400a      	ands	r2, r1
 800161a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2210      	movs	r2, #16
 8001622:	4013      	ands	r3, r2
 8001624:	d063      	beq.n	80016ee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d12a      	bne.n	8001684 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800162e:	4b95      	ldr	r3, [pc, #596]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001632:	4b94      	ldr	r3, [pc, #592]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001634:	2104      	movs	r1, #4
 8001636:	430a      	orrs	r2, r1
 8001638:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800163a:	4b92      	ldr	r3, [pc, #584]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800163c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163e:	4b91      	ldr	r3, [pc, #580]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001640:	2101      	movs	r1, #1
 8001642:	430a      	orrs	r2, r1
 8001644:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff f8c7 	bl	80007d8 <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001650:	f7ff f8c2 	bl	80007d8 <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e152      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001662:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d0f1      	beq.n	8001650 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800166c:	4b85      	ldr	r3, [pc, #532]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	22f8      	movs	r2, #248	; 0xf8
 8001672:	4393      	bics	r3, r2
 8001674:	0019      	movs	r1, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	00da      	lsls	r2, r3, #3
 800167c:	4b81      	ldr	r3, [pc, #516]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800167e:	430a      	orrs	r2, r1
 8001680:	635a      	str	r2, [r3, #52]	; 0x34
 8001682:	e034      	b.n	80016ee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	3305      	adds	r3, #5
 800168a:	d111      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800168c:	4b7d      	ldr	r3, [pc, #500]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800168e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001690:	4b7c      	ldr	r3, [pc, #496]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001692:	2104      	movs	r1, #4
 8001694:	438a      	bics	r2, r1
 8001696:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001698:	4b7a      	ldr	r3, [pc, #488]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800169a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169c:	22f8      	movs	r2, #248	; 0xf8
 800169e:	4393      	bics	r3, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	00da      	lsls	r2, r3, #3
 80016a8:	4b76      	ldr	r3, [pc, #472]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80016aa:	430a      	orrs	r2, r1
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
 80016ae:	e01e      	b.n	80016ee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016b0:	4b74      	ldr	r3, [pc, #464]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80016b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b4:	4b73      	ldr	r3, [pc, #460]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80016b6:	2104      	movs	r1, #4
 80016b8:	430a      	orrs	r2, r1
 80016ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016bc:	4b71      	ldr	r3, [pc, #452]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80016be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c0:	4b70      	ldr	r3, [pc, #448]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	438a      	bics	r2, r1
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff f886 	bl	80007d8 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016d2:	f7ff f881 	bl	80007d8 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e111      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016e4:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80016e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e8:	2202      	movs	r2, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d1f1      	bne.n	80016d2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2220      	movs	r2, #32
 80016f4:	4013      	ands	r3, r2
 80016f6:	d05c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016f8:	4b62      	ldr	r3, [pc, #392]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	220c      	movs	r2, #12
 80016fe:	4013      	ands	r3, r2
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d00e      	beq.n	8001722 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001704:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	220c      	movs	r2, #12
 800170a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800170c:	2b08      	cmp	r3, #8
 800170e:	d114      	bne.n	800173a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001710:	4b5c      	ldr	r3, [pc, #368]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	23c0      	movs	r3, #192	; 0xc0
 8001716:	025b      	lsls	r3, r3, #9
 8001718:	401a      	ands	r2, r3
 800171a:	23c0      	movs	r3, #192	; 0xc0
 800171c:	025b      	lsls	r3, r3, #9
 800171e:	429a      	cmp	r2, r3
 8001720:	d10b      	bne.n	800173a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001722:	4b58      	ldr	r3, [pc, #352]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	4013      	ands	r3, r2
 800172c:	d040      	beq.n	80017b0 <HAL_RCC_OscConfig+0x5a8>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d03c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0e6      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d01b      	beq.n	800177a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001742:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	4b4f      	ldr	r3, [pc, #316]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	0249      	lsls	r1, r1, #9
 800174c:	430a      	orrs	r2, r1
 800174e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff f842 	bl	80007d8 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175a:	f7ff f83d 	bl	80007d8 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0cd      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800176c:	4b45      	ldr	r3, [pc, #276]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800176e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	4013      	ands	r3, r2
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x552>
 8001778:	e01b      	b.n	80017b2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800177a:	4b42      	ldr	r3, [pc, #264]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800177c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001780:	4943      	ldr	r1, [pc, #268]	; (8001890 <HAL_RCC_OscConfig+0x688>)
 8001782:	400a      	ands	r2, r1
 8001784:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff f827 	bl	80007d8 <HAL_GetTick>
 800178a:	0003      	movs	r3, r0
 800178c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001790:	f7ff f822 	bl	80007d8 <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e0b2      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80017a2:	4b38      	ldr	r3, [pc, #224]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80017a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4013      	ands	r3, r2
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x588>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017b0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d100      	bne.n	80017bc <HAL_RCC_OscConfig+0x5b4>
 80017ba:	e0a4      	b.n	8001906 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017bc:	4b31      	ldr	r3, [pc, #196]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	220c      	movs	r2, #12
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d100      	bne.n	80017ca <HAL_RCC_OscConfig+0x5c2>
 80017c8:	e078      	b.n	80018bc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d14c      	bne.n	800186c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80017d8:	492e      	ldr	r1, [pc, #184]	; (8001894 <HAL_RCC_OscConfig+0x68c>)
 80017da:	400a      	ands	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7fe fffb 	bl	80007d8 <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7fe fff6 	bl	80007d8 <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e086      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	049b      	lsls	r3, r3, #18
 8001802:	4013      	ands	r3, r2
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	220f      	movs	r2, #15
 800180c:	4393      	bics	r3, r2
 800180e:	0019      	movs	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001816:	430a      	orrs	r2, r1
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <HAL_RCC_OscConfig+0x690>)
 8001820:	4013      	ands	r3, r2
 8001822:	0019      	movs	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	431a      	orrs	r2, r3
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	0449      	lsls	r1, r1, #17
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7fe ffc9 	bl	80007d8 <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7fe ffc4 	bl	80007d8 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e054      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	049b      	lsls	r3, r3, #18
 8001866:	4013      	ands	r3, r2
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x644>
 800186a:	e04c      	b.n	8001906 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_RCC_OscConfig+0x67c>)
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <HAL_RCC_OscConfig+0x68c>)
 8001874:	400a      	ands	r2, r1
 8001876:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7fe ffae 	bl	80007d8 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001880:	e015      	b.n	80018ae <HAL_RCC_OscConfig+0x6a6>
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	40021000 	.word	0x40021000
 8001888:	00001388 	.word	0x00001388
 800188c:	efffffff 	.word	0xefffffff
 8001890:	fffeffff 	.word	0xfffeffff
 8001894:	feffffff 	.word	0xfeffffff
 8001898:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7fe ff9c 	bl	80007d8 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e02c      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_RCC_OscConfig+0x708>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	049b      	lsls	r3, r3, #18
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x694>
 80018ba:	e024      	b.n	8001906 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e01f      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_RCC_OscConfig+0x708>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_RCC_OscConfig+0x708>)
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	23c0      	movs	r3, #192	; 0xc0
 80018d8:	025b      	lsls	r3, r3, #9
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d10e      	bne.n	8001902 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	220f      	movs	r2, #15
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	23f0      	movs	r3, #240	; 0xf0
 80018f6:	039b      	lsls	r3, r3, #14
 80018f8:	401a      	ands	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b008      	add	sp, #32
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0bf      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <HAL_RCC_ClockConfig+0x19c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	4013      	ands	r3, r2
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d911      	bls.n	800195a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <HAL_RCC_ClockConfig+0x19c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2201      	movs	r2, #1
 800193c:	4393      	bics	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <HAL_RCC_ClockConfig+0x19c>)
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_ClockConfig+0x19c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2201      	movs	r2, #1
 800194e:	4013      	ands	r3, r2
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d001      	beq.n	800195a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0a6      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	d015      	beq.n	8001990 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2204      	movs	r2, #4
 800196a:	4013      	ands	r3, r2
 800196c:	d006      	beq.n	800197c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800196e:	4b51      	ldr	r3, [pc, #324]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8001974:	21e0      	movs	r1, #224	; 0xe0
 8001976:	00c9      	lsls	r1, r1, #3
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	22f0      	movs	r2, #240	; 0xf0
 8001982:	4393      	bics	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 800198c:	430a      	orrs	r2, r1
 800198e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	d04c      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	029b      	lsls	r3, r3, #10
 80019aa:	4013      	ands	r3, r2
 80019ac:	d120      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07a      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	049b      	lsls	r3, r3, #18
 80019c2:	4013      	ands	r3, r2
 80019c4:	d114      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e06e      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019d2:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 80019d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	4013      	ands	r3, r2
 80019dc:	d108      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e062      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2202      	movs	r2, #2
 80019e8:	4013      	ands	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e05b      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f0:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2203      	movs	r2, #3
 80019f6:	4393      	bics	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7fe fee8 	bl	80007d8 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0c:	e009      	b.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0e:	f7fe fee3 	bl	80007d8 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <HAL_RCC_ClockConfig+0x1a4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e042      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	220c      	movs	r2, #12
 8001a28:	401a      	ands	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1ec      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_RCC_ClockConfig+0x19c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d211      	bcs.n	8001a66 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_RCC_ClockConfig+0x19c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4393      	bics	r3, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_RCC_ClockConfig+0x19c>)
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_RCC_ClockConfig+0x19c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e020      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d009      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a11      	ldr	r2, [pc, #68]	; (8001abc <HAL_RCC_ClockConfig+0x1a8>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a84:	f000 f820 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a88:	0001      	movs	r1, r0
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	220f      	movs	r2, #15
 8001a92:	4013      	ands	r3, r2
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_RCC_ClockConfig+0x1ac>)
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	000a      	movs	r2, r1
 8001a9a:	40da      	lsrs	r2, r3
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f7fe fe53 	bl	800074c <HAL_InitTick>
  
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b004      	add	sp, #16
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40022000 	.word	0x40022000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	00001388 	.word	0x00001388
 8001abc:	fffff8ff 	.word	0xfffff8ff
 8001ac0:	08002d0c 	.word	0x08002d0c
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b08f      	sub	sp, #60	; 0x3c
 8001acc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ace:	2314      	movs	r3, #20
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xec>)
 8001ad4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ad6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4a36      	ldr	r2, [pc, #216]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ae0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ae2:	c313      	stmia	r3!, {r0, r1, r4}
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af0:	2300      	movs	r3, #0
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	220c      	movs	r2, #12
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d047      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0xd4>
 8001b0c:	d849      	bhi.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xda>
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x50>
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x56>
 8001b16:	e044      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b1c:	e044      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	220f      	movs	r2, #15
 8001b24:	4013      	ands	r3, r2
 8001b26:	2214      	movs	r2, #20
 8001b28:	18ba      	adds	r2, r7, r2
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b2e:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	220f      	movs	r2, #15
 8001b34:	4013      	ands	r3, r2
 8001b36:	1d3a      	adds	r2, r7, #4
 8001b38:	5cd3      	ldrb	r3, [r2, r3]
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3e:	23c0      	movs	r3, #192	; 0xc0
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	401a      	ands	r2, r3
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	025b      	lsls	r3, r3, #9
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d109      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4e:	481c      	ldr	r0, [pc, #112]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b50:	f7fe fada 	bl	8000108 <__udivsi3>
 8001b54:	0003      	movs	r3, r0
 8001b56:	001a      	movs	r2, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	4353      	muls	r3, r2
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5e:	e01a      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b62:	23c0      	movs	r3, #192	; 0xc0
 8001b64:	025b      	lsls	r3, r3, #9
 8001b66:	401a      	ands	r2, r3
 8001b68:	23c0      	movs	r3, #192	; 0xc0
 8001b6a:	025b      	lsls	r3, r3, #9
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d109      	bne.n	8001b84 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b72:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b74:	f7fe fac8 	bl	8000108 <__udivsi3>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	4353      	muls	r3, r2
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b86:	480e      	ldr	r0, [pc, #56]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b88:	f7fe fabe 	bl	8000108 <__udivsi3>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	001a      	movs	r2, r3
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	4353      	muls	r3, r2
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9a:	e005      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ba0:	e002      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ba6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001baa:	0018      	movs	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b00f      	add	sp, #60	; 0x3c
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	08002cec 	.word	0x08002cec
 8001bb8:	08002cfc 	.word	0x08002cfc
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	007a1200 	.word	0x007a1200
 8001bc4:	02dc6c00 	.word	0x02dc6c00

08001bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	20000000 	.word	0x20000000

08001bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001be0:	f7ff fff2 	bl	8001bc8 <HAL_RCC_GetHCLKFreq>
 8001be4:	0001      	movs	r1, r0
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	2207      	movs	r2, #7
 8001bee:	4013      	ands	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	40d9      	lsrs	r1, r3
 8001bf6:	000b      	movs	r3, r1
}    
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08002d1c 	.word	0x08002d1c

08001c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	025b      	lsls	r3, r3, #9
 8001c20:	4013      	ands	r3, r2
 8001c22:	d100      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c24:	e08e      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2017      	movs	r0, #23
 8001c28:	183b      	adds	r3, r7, r0
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b6e      	ldr	r3, [pc, #440]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	055b      	lsls	r3, r3, #21
 8001c36:	4013      	ands	r3, r2
 8001c38:	d110      	bne.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b6b      	ldr	r3, [pc, #428]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	0549      	lsls	r1, r1, #21
 8001c44:	430a      	orrs	r2, r1
 8001c46:	61da      	str	r2, [r3, #28]
 8001c48:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	055b      	lsls	r3, r3, #21
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	183b      	adds	r3, r7, r0
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d11a      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c68:	4b60      	ldr	r3, [pc, #384]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	0049      	lsls	r1, r1, #1
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c76:	f7fe fdaf 	bl	80007d8 <HAL_GetTick>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	e008      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c80:	f7fe fdaa 	bl	80007d8 <HAL_GetTick>
 8001c84:	0002      	movs	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0a6      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b56      	ldr	r3, [pc, #344]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c9e:	4b52      	ldr	r3, [pc, #328]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ca0:	6a1a      	ldr	r2, [r3, #32]
 8001ca2:	23c0      	movs	r3, #192	; 0xc0
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d034      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	23c0      	movs	r3, #192	; 0xc0
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d02c      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a4a      	ldr	r2, [pc, #296]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cca:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ccc:	6a1a      	ldr	r2, [r3, #32]
 8001cce:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	0249      	lsls	r1, r1, #9
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd8:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cda:	6a1a      	ldr	r2, [r3, #32]
 8001cdc:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cde:	4945      	ldr	r1, [pc, #276]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ce0:	400a      	ands	r2, r1
 8001ce2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fd71 	bl	80007d8 <HAL_GetTick>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfa:	e009      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7fe fd6c 	bl	80007d8 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	4a3c      	ldr	r2, [pc, #240]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e067      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	2202      	movs	r2, #2
 8001d16:	4013      	ands	r3, r2
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a34      	ldr	r2, [pc, #208]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d2e:	2317      	movs	r3, #23
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d3e:	492f      	ldr	r1, [pc, #188]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	2203      	movs	r2, #3
 8001d54:	4393      	bics	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2220      	movs	r2, #32
 8001d86:	4013      	ands	r3, r2
 8001d88:	d009      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	2210      	movs	r2, #16
 8001d90:	4393      	bics	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	029b      	lsls	r3, r3, #10
 8001da6:	4013      	ands	r3, r2
 8001da8:	d009      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	4393      	bics	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d009      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b006      	add	sp, #24
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40007000 	.word	0x40007000
 8001df0:	fffffcff 	.word	0xfffffcff
 8001df4:	fffeffff 	.word	0xfffeffff
 8001df8:	00001388 	.word	0x00001388
 8001dfc:	efffffff 	.word	0xefffffff
 8001e00:	fffcffff 	.word	0xfffcffff

08001e04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e044      	b.n	8001ea0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d107      	bne.n	8001e2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2274      	movs	r2, #116	; 0x74
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7fe fbd1 	bl	80005d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2224      	movs	r2, #36	; 0x24
 8001e32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2101      	movs	r1, #1
 8001e40:	438a      	bics	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 fb24 	bl	8002494 <UART_SetConfig>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e024      	b.n	8001ea0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f000 fc9f 	bl	80027a4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <HAL_UART_Init+0xa4>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	212a      	movs	r1, #42	; 0x2a
 8001e82:	438a      	bics	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f000 fd37 	bl	800290c <UART_CheckIdleState>
 8001e9e:	0003      	movs	r3, r0
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	ffffb7ff 	.word	0xffffb7ff

08001eac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b0ab      	sub	sp, #172	; 0xac
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	22a4      	movs	r2, #164	; 0xa4
 8001ebc:	18b9      	adds	r1, r7, r2
 8001ebe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	20a0      	movs	r0, #160	; 0xa0
 8001ec8:	1839      	adds	r1, r7, r0
 8001eca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	219c      	movs	r1, #156	; 0x9c
 8001ed4:	1879      	adds	r1, r7, r1
 8001ed6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001ed8:	0011      	movs	r1, r2
 8001eda:	18bb      	adds	r3, r7, r2
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a99      	ldr	r2, [pc, #612]	; (8002144 <HAL_UART_IRQHandler+0x298>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2298      	movs	r2, #152	; 0x98
 8001ee4:	18bc      	adds	r4, r7, r2
 8001ee6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001ee8:	18bb      	adds	r3, r7, r2
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d114      	bne.n	8001f1a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d00f      	beq.n	8001f1a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001efa:	183b      	adds	r3, r7, r0
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2220      	movs	r2, #32
 8001f00:	4013      	ands	r3, r2
 8001f02:	d00a      	beq.n	8001f1a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d100      	bne.n	8001f0e <HAL_UART_IRQHandler+0x62>
 8001f0c:	e296      	b.n	800243c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	0010      	movs	r0, r2
 8001f16:	4798      	blx	r3
      }
      return;
 8001f18:	e290      	b.n	800243c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001f1a:	2398      	movs	r3, #152	; 0x98
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d100      	bne.n	8001f26 <HAL_UART_IRQHandler+0x7a>
 8001f24:	e114      	b.n	8002150 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001f26:	239c      	movs	r3, #156	; 0x9c
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d106      	bne.n	8001f40 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001f32:	23a0      	movs	r3, #160	; 0xa0
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a83      	ldr	r2, [pc, #524]	; (8002148 <HAL_UART_IRQHandler+0x29c>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d100      	bne.n	8001f40 <HAL_UART_IRQHandler+0x94>
 8001f3e:	e107      	b.n	8002150 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001f40:	23a4      	movs	r3, #164	; 0xa4
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d012      	beq.n	8001f72 <HAL_UART_IRQHandler+0xc6>
 8001f4c:	23a0      	movs	r3, #160	; 0xa0
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	d00b      	beq.n	8001f72 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	589b      	ldr	r3, [r3, r2]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f72:	23a4      	movs	r3, #164	; 0xa4
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d011      	beq.n	8001fa2 <HAL_UART_IRQHandler+0xf6>
 8001f7e:	239c      	movs	r3, #156	; 0x9c
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2201      	movs	r2, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	d00b      	beq.n	8001fa2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	589b      	ldr	r3, [r3, r2]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001fa2:	23a4      	movs	r3, #164	; 0xa4
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	4013      	ands	r3, r2
 8001fac:	d011      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x126>
 8001fae:	239c      	movs	r3, #156	; 0x9c
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2280      	movs	r2, #128	; 0x80
 8001fc6:	589b      	ldr	r3, [r3, r2]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001fd2:	23a4      	movs	r3, #164	; 0xa4
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d017      	beq.n	800200e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001fde:	23a0      	movs	r3, #160	; 0xa0
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d105      	bne.n	8001ff6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001fea:	239c      	movs	r3, #156	; 0x9c
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001ff4:	d00b      	beq.n	800200e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	589b      	ldr	r3, [r3, r2]
 8002004:	2208      	movs	r2, #8
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800200e:	23a4      	movs	r3, #164	; 0xa4
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4013      	ands	r3, r2
 800201a:	d013      	beq.n	8002044 <HAL_UART_IRQHandler+0x198>
 800201c:	23a0      	movs	r3, #160	; 0xa0
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	04db      	lsls	r3, r3, #19
 8002026:	4013      	ands	r3, r2
 8002028:	d00c      	beq.n	8002044 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	589b      	ldr	r3, [r3, r2]
 800203a:	2220      	movs	r2, #32
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	589b      	ldr	r3, [r3, r2]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d100      	bne.n	8002050 <HAL_UART_IRQHandler+0x1a4>
 800204e:	e1f7      	b.n	8002440 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002050:	23a4      	movs	r3, #164	; 0xa4
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2220      	movs	r2, #32
 8002058:	4013      	ands	r3, r2
 800205a:	d00e      	beq.n	800207a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800205c:	23a0      	movs	r3, #160	; 0xa0
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2220      	movs	r2, #32
 8002064:	4013      	ands	r3, r2
 8002066:	d008      	beq.n	800207a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	0010      	movs	r0, r2
 8002078:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	589b      	ldr	r3, [r3, r2]
 8002080:	2194      	movs	r1, #148	; 0x94
 8002082:	187a      	adds	r2, r7, r1
 8002084:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2240      	movs	r2, #64	; 0x40
 800208e:	4013      	ands	r3, r2
 8002090:	2b40      	cmp	r3, #64	; 0x40
 8002092:	d004      	beq.n	800209e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002094:	187b      	adds	r3, r7, r1
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2228      	movs	r2, #40	; 0x28
 800209a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800209c:	d047      	beq.n	800212e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f000 fd3f 	bl	8002b24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2240      	movs	r2, #64	; 0x40
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d137      	bne.n	8002124 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020b4:	f3ef 8310 	mrs	r3, PRIMASK
 80020b8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80020ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020bc:	2090      	movs	r0, #144	; 0x90
 80020be:	183a      	adds	r2, r7, r0
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	2301      	movs	r3, #1
 80020c4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020c8:	f383 8810 	msr	PRIMASK, r3
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2140      	movs	r1, #64	; 0x40
 80020da:	438a      	bics	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020e6:	f383 8810 	msr	PRIMASK, r3
}
 80020ea:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <HAL_UART_IRQHandler+0x2a0>)
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	0018      	movs	r0, r3
 8002102:	f7fe fc89 	bl	8000a18 <HAL_DMA_Abort_IT>
 8002106:	1e03      	subs	r3, r0, #0
 8002108:	d01a      	beq.n	8002140 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	0018      	movs	r0, r3
 8002116:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002118:	e012      	b.n	8002140 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f000 f9a5 	bl	800246c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002122:	e00d      	b.n	8002140 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	0018      	movs	r0, r3
 8002128:	f000 f9a0 	bl	800246c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800212c:	e008      	b.n	8002140 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f000 f99b 	bl	800246c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	2100      	movs	r1, #0
 800213c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800213e:	e17f      	b.n	8002440 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002140:	46c0      	nop			; (mov r8, r8)
    return;
 8002142:	e17d      	b.n	8002440 <HAL_UART_IRQHandler+0x594>
 8002144:	0000080f 	.word	0x0000080f
 8002148:	04000120 	.word	0x04000120
 800214c:	08002be9 	.word	0x08002be9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002154:	2b01      	cmp	r3, #1
 8002156:	d000      	beq.n	800215a <HAL_UART_IRQHandler+0x2ae>
 8002158:	e131      	b.n	80023be <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800215a:	23a4      	movs	r3, #164	; 0xa4
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2210      	movs	r2, #16
 8002162:	4013      	ands	r3, r2
 8002164:	d100      	bne.n	8002168 <HAL_UART_IRQHandler+0x2bc>
 8002166:	e12a      	b.n	80023be <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002168:	23a0      	movs	r3, #160	; 0xa0
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2210      	movs	r2, #16
 8002170:	4013      	ands	r3, r2
 8002172:	d100      	bne.n	8002176 <HAL_UART_IRQHandler+0x2ca>
 8002174:	e123      	b.n	80023be <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2210      	movs	r2, #16
 800217c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2240      	movs	r2, #64	; 0x40
 8002186:	4013      	ands	r3, r2
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d000      	beq.n	800218e <HAL_UART_IRQHandler+0x2e2>
 800218c:	e09b      	b.n	80022c6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	217e      	movs	r1, #126	; 0x7e
 8002198:	187b      	adds	r3, r7, r1
 800219a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800219c:	187b      	adds	r3, r7, r1
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d100      	bne.n	80021a6 <HAL_UART_IRQHandler+0x2fa>
 80021a4:	e14e      	b.n	8002444 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2258      	movs	r2, #88	; 0x58
 80021aa:	5a9b      	ldrh	r3, [r3, r2]
 80021ac:	187a      	adds	r2, r7, r1
 80021ae:	8812      	ldrh	r2, [r2, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d300      	bcc.n	80021b6 <HAL_UART_IRQHandler+0x30a>
 80021b4:	e146      	b.n	8002444 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	187a      	adds	r2, r7, r1
 80021ba:	215a      	movs	r1, #90	; 0x5a
 80021bc:	8812      	ldrh	r2, [r2, #0]
 80021be:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d06e      	beq.n	80022a8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ca:	f3ef 8310 	mrs	r3, PRIMASK
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80021d4:	2301      	movs	r3, #1
 80021d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021da:	f383 8810 	msr	PRIMASK, r3
}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	499a      	ldr	r1, [pc, #616]	; (8002454 <HAL_UART_IRQHandler+0x5a8>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f6:	f383 8810 	msr	PRIMASK, r3
}
 80021fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002204:	677b      	str	r3, [r7, #116]	; 0x74
 8002206:	2301      	movs	r3, #1
 8002208:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800220a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800220c:	f383 8810 	msr	PRIMASK, r3
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	438a      	bics	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002224:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002228:	f383 8810 	msr	PRIMASK, r3
}
 800222c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800222e:	f3ef 8310 	mrs	r3, PRIMASK
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002234:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002236:	673b      	str	r3, [r7, #112]	; 0x70
 8002238:	2301      	movs	r3, #1
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223e:	f383 8810 	msr	PRIMASK, r3
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	438a      	bics	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002256:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800225a:	f383 8810 	msr	PRIMASK, r3
}
 800225e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800226c:	f3ef 8310 	mrs	r3, PRIMASK
 8002270:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002272:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002274:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002276:	2301      	movs	r3, #1
 8002278:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800227a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800227c:	f383 8810 	msr	PRIMASK, r3
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2110      	movs	r1, #16
 800228e:	438a      	bics	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002294:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002298:	f383 8810 	msr	PRIMASK, r3
}
 800229c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7fe fb80 	bl	80009a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2258      	movs	r2, #88	; 0x58
 80022ac:	5a9a      	ldrh	r2, [r3, r2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	215a      	movs	r1, #90	; 0x5a
 80022b2:	5a5b      	ldrh	r3, [r3, r1]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	0011      	movs	r1, r2
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 f8dc 	bl	800247c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80022c4:	e0be      	b.n	8002444 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2258      	movs	r2, #88	; 0x58
 80022ca:	5a99      	ldrh	r1, [r3, r2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	225a      	movs	r2, #90	; 0x5a
 80022d0:	5a9b      	ldrh	r3, [r3, r2]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	208e      	movs	r0, #142	; 0x8e
 80022d6:	183b      	adds	r3, r7, r0
 80022d8:	1a8a      	subs	r2, r1, r2
 80022da:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	225a      	movs	r2, #90	; 0x5a
 80022e0:	5a9b      	ldrh	r3, [r3, r2]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d100      	bne.n	80022ea <HAL_UART_IRQHandler+0x43e>
 80022e8:	e0ae      	b.n	8002448 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80022ea:	183b      	adds	r3, r7, r0
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d100      	bne.n	80022f4 <HAL_UART_IRQHandler+0x448>
 80022f2:	e0a9      	b.n	8002448 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f4:	f3ef 8310 	mrs	r3, PRIMASK
 80022f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80022fa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022fc:	2488      	movs	r4, #136	; 0x88
 80022fe:	193a      	adds	r2, r7, r4
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	2301      	movs	r3, #1
 8002304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f383 8810 	msr	PRIMASK, r3
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	494f      	ldr	r1, [pc, #316]	; (8002458 <HAL_UART_IRQHandler+0x5ac>)
 800231a:	400a      	ands	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	193b      	adds	r3, r7, r4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f383 8810 	msr	PRIMASK, r3
}
 800232a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800232c:	f3ef 8310 	mrs	r3, PRIMASK
 8002330:	61bb      	str	r3, [r7, #24]
  return(result);
 8002332:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002334:	2484      	movs	r4, #132	; 0x84
 8002336:	193a      	adds	r2, r7, r4
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	2301      	movs	r3, #1
 800233c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f383 8810 	msr	PRIMASK, r3
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	438a      	bics	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	193b      	adds	r3, r7, r4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f383 8810 	msr	PRIMASK, r3
}
 8002362:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002376:	f3ef 8310 	mrs	r3, PRIMASK
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800237e:	2480      	movs	r4, #128	; 0x80
 8002380:	193a      	adds	r2, r7, r4
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	2301      	movs	r3, #1
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	f383 8810 	msr	PRIMASK, r3
}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2110      	movs	r1, #16
 800239c:	438a      	bics	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	f383 8810 	msr	PRIMASK, r3
}
 80023ac:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023ae:	183b      	adds	r3, r7, r0
 80023b0:	881a      	ldrh	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	0011      	movs	r1, r2
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 f860 	bl	800247c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80023bc:	e044      	b.n	8002448 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80023be:	23a4      	movs	r3, #164	; 0xa4
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	035b      	lsls	r3, r3, #13
 80023c8:	4013      	ands	r3, r2
 80023ca:	d010      	beq.n	80023ee <HAL_UART_IRQHandler+0x542>
 80023cc:	239c      	movs	r3, #156	; 0x9c
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	03db      	lsls	r3, r3, #15
 80023d6:	4013      	ands	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	0352      	lsls	r2, r2, #13
 80023e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fc40 	bl	8002c6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80023ec:	e02f      	b.n	800244e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80023ee:	23a4      	movs	r3, #164	; 0xa4
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	4013      	ands	r3, r2
 80023f8:	d00f      	beq.n	800241a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80023fa:	23a0      	movs	r3, #160	; 0xa0
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	4013      	ands	r3, r2
 8002404:	d009      	beq.n	800241a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01e      	beq.n	800244c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	0010      	movs	r0, r2
 8002416:	4798      	blx	r3
    }
    return;
 8002418:	e018      	b.n	800244c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800241a:	23a4      	movs	r3, #164	; 0xa4
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2240      	movs	r2, #64	; 0x40
 8002422:	4013      	ands	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_UART_IRQHandler+0x5a2>
 8002426:	23a0      	movs	r3, #160	; 0xa0
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2240      	movs	r2, #64	; 0x40
 800242e:	4013      	ands	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f000 fbee 	bl	8002c16 <UART_EndTransmit_IT>
    return;
 800243a:	e008      	b.n	800244e <HAL_UART_IRQHandler+0x5a2>
      return;
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	e006      	b.n	800244e <HAL_UART_IRQHandler+0x5a2>
    return;
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	e004      	b.n	800244e <HAL_UART_IRQHandler+0x5a2>
      return;
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	e002      	b.n	800244e <HAL_UART_IRQHandler+0x5a2>
      return;
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	e000      	b.n	800244e <HAL_UART_IRQHandler+0x5a2>
    return;
 800244c:	46c0      	nop			; (mov r8, r8)
  }

}
 800244e:	46bd      	mov	sp, r7
 8002450:	b02b      	add	sp, #172	; 0xac
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	fffffeff 	.word	0xfffffeff
 8002458:	fffffedf 	.word	0xfffffedf

0800245c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b002      	add	sp, #8
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	000a      	movs	r2, r1
 8002486:	1cbb      	adds	r3, r7, #2
 8002488:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800249c:	231e      	movs	r3, #30
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4aaf      	ldr	r2, [pc, #700]	; (8002780 <UART_SetConfig+0x2ec>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4aaa      	ldr	r2, [pc, #680]	; (8002784 <UART_SetConfig+0x2f0>)
 80024da:	4013      	ands	r3, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4aa1      	ldr	r2, [pc, #644]	; (8002788 <UART_SetConfig+0x2f4>)
 8002502:	4013      	ands	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	430a      	orrs	r2, r1
 800250e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a9d      	ldr	r2, [pc, #628]	; (800278c <UART_SetConfig+0x2f8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d127      	bne.n	800256a <UART_SetConfig+0xd6>
 800251a:	4b9d      	ldr	r3, [pc, #628]	; (8002790 <UART_SetConfig+0x2fc>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	2203      	movs	r2, #3
 8002520:	4013      	ands	r3, r2
 8002522:	2b03      	cmp	r3, #3
 8002524:	d00d      	beq.n	8002542 <UART_SetConfig+0xae>
 8002526:	d81b      	bhi.n	8002560 <UART_SetConfig+0xcc>
 8002528:	2b02      	cmp	r3, #2
 800252a:	d014      	beq.n	8002556 <UART_SetConfig+0xc2>
 800252c:	d818      	bhi.n	8002560 <UART_SetConfig+0xcc>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <UART_SetConfig+0xa4>
 8002532:	2b01      	cmp	r3, #1
 8002534:	d00a      	beq.n	800254c <UART_SetConfig+0xb8>
 8002536:	e013      	b.n	8002560 <UART_SetConfig+0xcc>
 8002538:	231f      	movs	r3, #31
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e065      	b.n	800260e <UART_SetConfig+0x17a>
 8002542:	231f      	movs	r3, #31
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2202      	movs	r2, #2
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e060      	b.n	800260e <UART_SetConfig+0x17a>
 800254c:	231f      	movs	r3, #31
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	2204      	movs	r2, #4
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e05b      	b.n	800260e <UART_SetConfig+0x17a>
 8002556:	231f      	movs	r3, #31
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2208      	movs	r2, #8
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e056      	b.n	800260e <UART_SetConfig+0x17a>
 8002560:	231f      	movs	r3, #31
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2210      	movs	r2, #16
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	e051      	b.n	800260e <UART_SetConfig+0x17a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a89      	ldr	r2, [pc, #548]	; (8002794 <UART_SetConfig+0x300>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d134      	bne.n	80025de <UART_SetConfig+0x14a>
 8002574:	4b86      	ldr	r3, [pc, #536]	; (8002790 <UART_SetConfig+0x2fc>)
 8002576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002578:	23c0      	movs	r3, #192	; 0xc0
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	4013      	ands	r3, r2
 800257e:	22c0      	movs	r2, #192	; 0xc0
 8002580:	0292      	lsls	r2, r2, #10
 8002582:	4293      	cmp	r3, r2
 8002584:	d017      	beq.n	80025b6 <UART_SetConfig+0x122>
 8002586:	22c0      	movs	r2, #192	; 0xc0
 8002588:	0292      	lsls	r2, r2, #10
 800258a:	4293      	cmp	r3, r2
 800258c:	d822      	bhi.n	80025d4 <UART_SetConfig+0x140>
 800258e:	2280      	movs	r2, #128	; 0x80
 8002590:	0292      	lsls	r2, r2, #10
 8002592:	4293      	cmp	r3, r2
 8002594:	d019      	beq.n	80025ca <UART_SetConfig+0x136>
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	0292      	lsls	r2, r2, #10
 800259a:	4293      	cmp	r3, r2
 800259c:	d81a      	bhi.n	80025d4 <UART_SetConfig+0x140>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <UART_SetConfig+0x118>
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	0252      	lsls	r2, r2, #9
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00a      	beq.n	80025c0 <UART_SetConfig+0x12c>
 80025aa:	e013      	b.n	80025d4 <UART_SetConfig+0x140>
 80025ac:	231f      	movs	r3, #31
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	e02b      	b.n	800260e <UART_SetConfig+0x17a>
 80025b6:	231f      	movs	r3, #31
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	2202      	movs	r2, #2
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	e026      	b.n	800260e <UART_SetConfig+0x17a>
 80025c0:	231f      	movs	r3, #31
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	2204      	movs	r2, #4
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e021      	b.n	800260e <UART_SetConfig+0x17a>
 80025ca:	231f      	movs	r3, #31
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	2208      	movs	r2, #8
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	e01c      	b.n	800260e <UART_SetConfig+0x17a>
 80025d4:	231f      	movs	r3, #31
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	2210      	movs	r2, #16
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e017      	b.n	800260e <UART_SetConfig+0x17a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6d      	ldr	r2, [pc, #436]	; (8002798 <UART_SetConfig+0x304>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d104      	bne.n	80025f2 <UART_SetConfig+0x15e>
 80025e8:	231f      	movs	r3, #31
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e00d      	b.n	800260e <UART_SetConfig+0x17a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a69      	ldr	r2, [pc, #420]	; (800279c <UART_SetConfig+0x308>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d104      	bne.n	8002606 <UART_SetConfig+0x172>
 80025fc:	231f      	movs	r3, #31
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e003      	b.n	800260e <UART_SetConfig+0x17a>
 8002606:	231f      	movs	r3, #31
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2210      	movs	r2, #16
 800260c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	429a      	cmp	r2, r3
 8002618:	d15d      	bne.n	80026d6 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800261a:	231f      	movs	r3, #31
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d015      	beq.n	8002650 <UART_SetConfig+0x1bc>
 8002624:	dc18      	bgt.n	8002658 <UART_SetConfig+0x1c4>
 8002626:	2b04      	cmp	r3, #4
 8002628:	d00d      	beq.n	8002646 <UART_SetConfig+0x1b2>
 800262a:	dc15      	bgt.n	8002658 <UART_SetConfig+0x1c4>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <UART_SetConfig+0x1a2>
 8002630:	2b02      	cmp	r3, #2
 8002632:	d005      	beq.n	8002640 <UART_SetConfig+0x1ac>
 8002634:	e010      	b.n	8002658 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002636:	f7ff fad1 	bl	8001bdc <HAL_RCC_GetPCLK1Freq>
 800263a:	0003      	movs	r3, r0
 800263c:	61bb      	str	r3, [r7, #24]
        break;
 800263e:	e012      	b.n	8002666 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002640:	4b57      	ldr	r3, [pc, #348]	; (80027a0 <UART_SetConfig+0x30c>)
 8002642:	61bb      	str	r3, [r7, #24]
        break;
 8002644:	e00f      	b.n	8002666 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002646:	f7ff fa3f 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 800264a:	0003      	movs	r3, r0
 800264c:	61bb      	str	r3, [r7, #24]
        break;
 800264e:	e00a      	b.n	8002666 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	61bb      	str	r3, [r7, #24]
        break;
 8002656:	e006      	b.n	8002666 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800265c:	231e      	movs	r3, #30
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
        break;
 8002664:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d100      	bne.n	800266e <UART_SetConfig+0x1da>
 800266c:	e07b      	b.n	8002766 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	005a      	lsls	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	18d2      	adds	r2, r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0019      	movs	r1, r3
 8002680:	0010      	movs	r0, r2
 8002682:	f7fd fd41 	bl	8000108 <__udivsi3>
 8002686:	0003      	movs	r3, r0
 8002688:	b29b      	uxth	r3, r3
 800268a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	d91c      	bls.n	80026cc <UART_SetConfig+0x238>
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	025b      	lsls	r3, r3, #9
 8002698:	429a      	cmp	r2, r3
 800269a:	d217      	bcs.n	80026cc <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	200e      	movs	r0, #14
 80026a2:	183b      	adds	r3, r7, r0
 80026a4:	210f      	movs	r1, #15
 80026a6:	438a      	bics	r2, r1
 80026a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	085b      	lsrs	r3, r3, #1
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2207      	movs	r2, #7
 80026b2:	4013      	ands	r3, r2
 80026b4:	b299      	uxth	r1, r3
 80026b6:	183b      	adds	r3, r7, r0
 80026b8:	183a      	adds	r2, r7, r0
 80026ba:	8812      	ldrh	r2, [r2, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	183a      	adds	r2, r7, r0
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	e04c      	b.n	8002766 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80026cc:	231e      	movs	r3, #30
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e047      	b.n	8002766 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026d6:	231f      	movs	r3, #31
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d015      	beq.n	800270c <UART_SetConfig+0x278>
 80026e0:	dc18      	bgt.n	8002714 <UART_SetConfig+0x280>
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d00d      	beq.n	8002702 <UART_SetConfig+0x26e>
 80026e6:	dc15      	bgt.n	8002714 <UART_SetConfig+0x280>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <UART_SetConfig+0x25e>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d005      	beq.n	80026fc <UART_SetConfig+0x268>
 80026f0:	e010      	b.n	8002714 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026f2:	f7ff fa73 	bl	8001bdc <HAL_RCC_GetPCLK1Freq>
 80026f6:	0003      	movs	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]
        break;
 80026fa:	e012      	b.n	8002722 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <UART_SetConfig+0x30c>)
 80026fe:	61bb      	str	r3, [r7, #24]
        break;
 8002700:	e00f      	b.n	8002722 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002702:	f7ff f9e1 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8002706:	0003      	movs	r3, r0
 8002708:	61bb      	str	r3, [r7, #24]
        break;
 800270a:	e00a      	b.n	8002722 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	61bb      	str	r3, [r7, #24]
        break;
 8002712:	e006      	b.n	8002722 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002718:	231e      	movs	r3, #30
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
        break;
 8002720:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01e      	beq.n	8002766 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	085a      	lsrs	r2, r3, #1
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	18d2      	adds	r2, r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	0019      	movs	r1, r3
 8002738:	0010      	movs	r0, r2
 800273a:	f7fd fce5 	bl	8000108 <__udivsi3>
 800273e:	0003      	movs	r3, r0
 8002740:	b29b      	uxth	r3, r3
 8002742:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b0f      	cmp	r3, #15
 8002748:	d909      	bls.n	800275e <UART_SetConfig+0x2ca>
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	025b      	lsls	r3, r3, #9
 8002750:	429a      	cmp	r2, r3
 8002752:	d204      	bcs.n	800275e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	e003      	b.n	8002766 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800275e:	231e      	movs	r3, #30
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002772:	231e      	movs	r3, #30
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	781b      	ldrb	r3, [r3, #0]
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b008      	add	sp, #32
 800277e:	bd80      	pop	{r7, pc}
 8002780:	efff69f3 	.word	0xefff69f3
 8002784:	ffffcfff 	.word	0xffffcfff
 8002788:	fffff4ff 	.word	0xfffff4ff
 800278c:	40013800 	.word	0x40013800
 8002790:	40021000 	.word	0x40021000
 8002794:	40004400 	.word	0x40004400
 8002798:	40004800 	.word	0x40004800
 800279c:	40004c00 	.word	0x40004c00
 80027a0:	007a1200 	.word	0x007a1200

080027a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2201      	movs	r2, #1
 80027b2:	4013      	ands	r3, r2
 80027b4:	d00b      	beq.n	80027ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a4a      	ldr	r2, [pc, #296]	; (80028e8 <UART_AdvFeatureConfig+0x144>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2202      	movs	r2, #2
 80027d4:	4013      	ands	r3, r2
 80027d6:	d00b      	beq.n	80027f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a43      	ldr	r2, [pc, #268]	; (80028ec <UART_AdvFeatureConfig+0x148>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2204      	movs	r2, #4
 80027f6:	4013      	ands	r3, r2
 80027f8:	d00b      	beq.n	8002812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a3b      	ldr	r2, [pc, #236]	; (80028f0 <UART_AdvFeatureConfig+0x14c>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	2208      	movs	r2, #8
 8002818:	4013      	ands	r3, r2
 800281a:	d00b      	beq.n	8002834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a34      	ldr	r2, [pc, #208]	; (80028f4 <UART_AdvFeatureConfig+0x150>)
 8002824:	4013      	ands	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2210      	movs	r2, #16
 800283a:	4013      	ands	r3, r2
 800283c:	d00b      	beq.n	8002856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <UART_AdvFeatureConfig+0x154>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	2220      	movs	r2, #32
 800285c:	4013      	ands	r3, r2
 800285e:	d00b      	beq.n	8002878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4a25      	ldr	r2, [pc, #148]	; (80028fc <UART_AdvFeatureConfig+0x158>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2240      	movs	r2, #64	; 0x40
 800287e:	4013      	ands	r3, r2
 8002880:	d01d      	beq.n	80028be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <UART_AdvFeatureConfig+0x15c>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	035b      	lsls	r3, r3, #13
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10b      	bne.n	80028be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <UART_AdvFeatureConfig+0x160>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	4013      	ands	r3, r2
 80028c6:	d00b      	beq.n	80028e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a0e      	ldr	r2, [pc, #56]	; (8002908 <UART_AdvFeatureConfig+0x164>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]
  }
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	fffdffff 	.word	0xfffdffff
 80028ec:	fffeffff 	.word	0xfffeffff
 80028f0:	fffbffff 	.word	0xfffbffff
 80028f4:	ffff7fff 	.word	0xffff7fff
 80028f8:	ffffefff 	.word	0xffffefff
 80028fc:	ffffdfff 	.word	0xffffdfff
 8002900:	ffefffff 	.word	0xffefffff
 8002904:	ff9fffff 	.word	0xff9fffff
 8002908:	fff7ffff 	.word	0xfff7ffff

0800290c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af02      	add	r7, sp, #8
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	2100      	movs	r1, #0
 800291a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800291c:	f7fd ff5c 	bl	80007d8 <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2208      	movs	r2, #8
 800292c:	4013      	ands	r3, r2
 800292e:	2b08      	cmp	r3, #8
 8002930:	d10c      	bne.n	800294c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	0391      	lsls	r1, r2, #14
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <UART_CheckIdleState+0x8c>)
 800293c:	9200      	str	r2, [sp, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	f000 f82c 	bl	800299c <UART_WaitOnFlagUntilTimeout>
 8002944:	1e03      	subs	r3, r0, #0
 8002946:	d001      	beq.n	800294c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e021      	b.n	8002990 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2204      	movs	r2, #4
 8002954:	4013      	ands	r3, r2
 8002956:	2b04      	cmp	r3, #4
 8002958:	d10c      	bne.n	8002974 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	03d1      	lsls	r1, r2, #15
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <UART_CheckIdleState+0x8c>)
 8002964:	9200      	str	r2, [sp, #0]
 8002966:	2200      	movs	r2, #0
 8002968:	f000 f818 	bl	800299c <UART_WaitOnFlagUntilTimeout>
 800296c:	1e03      	subs	r3, r0, #0
 800296e:	d001      	beq.n	8002974 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e00d      	b.n	8002990 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2274      	movs	r2, #116	; 0x74
 800298a:	2100      	movs	r1, #0
 800298c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	b004      	add	sp, #16
 8002996:	bd80      	pop	{r7, pc}
 8002998:	01ffffff 	.word	0x01ffffff

0800299c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b094      	sub	sp, #80	; 0x50
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	1dfb      	adds	r3, r7, #7
 80029aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ac:	e0a3      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b0:	3301      	adds	r3, #1
 80029b2:	d100      	bne.n	80029b6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80029b4:	e09f      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b6:	f7fd ff0f 	bl	80007d8 <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <UART_WaitOnFlagUntilTimeout+0x30>
 80029c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d13d      	bne.n	8002a48 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029cc:	f3ef 8310 	mrs	r3, PRIMASK
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029d4:	647b      	str	r3, [r7, #68]	; 0x44
 80029d6:	2301      	movs	r3, #1
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	f383 8810 	msr	PRIMASK, r3
}
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	494c      	ldr	r1, [pc, #304]	; (8002b20 <UART_WaitOnFlagUntilTimeout+0x184>)
 80029ee:	400a      	ands	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	f383 8810 	msr	PRIMASK, r3
}
 80029fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a06:	643b      	str	r3, [r7, #64]	; 0x40
 8002a08:	2301      	movs	r3, #1
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	f383 8810 	msr	PRIMASK, r3
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2101      	movs	r1, #1
 8002a20:	438a      	bics	r2, r1
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	f383 8810 	msr	PRIMASK, r3
}
 8002a2e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2274      	movs	r2, #116	; 0x74
 8002a40:	2100      	movs	r1, #0
 8002a42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e067      	b.n	8002b18 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	4013      	ands	r3, r2
 8002a52:	d050      	beq.n	8002af6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	401a      	ands	r2, r3
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d146      	bne.n	8002af6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a72:	f3ef 8310 	mrs	r3, PRIMASK
 8002a76:	613b      	str	r3, [r7, #16]
  return(result);
 8002a78:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f383 8810 	msr	PRIMASK, r3
}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4923      	ldr	r1, [pc, #140]	; (8002b20 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f383 8810 	msr	PRIMASK, r3
}
 8002aa2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002aaa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aac:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aae:	2301      	movs	r3, #1
 8002ab0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	f383 8810 	msr	PRIMASK, r3
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	f383 8810 	msr	PRIMASK, r3
}
 8002ad4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	2120      	movs	r1, #32
 8002ae8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2274      	movs	r2, #116	; 0x74
 8002aee:	2100      	movs	r1, #0
 8002af0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e010      	b.n	8002b18 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4013      	ands	r3, r2
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	425a      	negs	r2, r3
 8002b06:	4153      	adcs	r3, r2
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	001a      	movs	r2, r3
 8002b0c:	1dfb      	adds	r3, r7, #7
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d100      	bne.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002b14:	e74b      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b014      	add	sp, #80	; 0x50
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	fffffe5f 	.word	0xfffffe5f

08002b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b30:	617b      	str	r3, [r7, #20]
  return(result);
 8002b32:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	2301      	movs	r3, #1
 8002b38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f383 8810 	msr	PRIMASK, r3
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4925      	ldr	r1, [pc, #148]	; (8002be4 <UART_EndRxTransfer+0xc0>)
 8002b4e:	400a      	ands	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f383 8810 	msr	PRIMASK, r3
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b62:	623b      	str	r3, [r7, #32]
  return(result);
 8002b64:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
 8002b68:	2301      	movs	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	f383 8810 	msr	PRIMASK, r3
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	438a      	bics	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	f383 8810 	msr	PRIMASK, r3
}
 8002b8e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d118      	bne.n	8002bca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b98:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f383 8810 	msr	PRIMASK, r3
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2110      	movs	r1, #16
 8002bba:	438a      	bics	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f383 8810 	msr	PRIMASK, r3
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b00e      	add	sp, #56	; 0x38
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	fffffedf 	.word	0xfffffedf

08002be8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	225a      	movs	r2, #90	; 0x5a
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2252      	movs	r2, #82	; 0x52
 8002c02:	2100      	movs	r1, #0
 8002c04:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7ff fc2f 	bl	800246c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b004      	add	sp, #16
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c22:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c24:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	2301      	movs	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f383 8810 	msr	PRIMASK, r3
}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2140      	movs	r1, #64	; 0x40
 8002c40:	438a      	bics	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f383 8810 	msr	PRIMASK, r3
}
 8002c4e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff fbfc 	bl	800245c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b006      	add	sp, #24
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <__libc_init_array>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	2600      	movs	r6, #0
 8002c80:	4d0c      	ldr	r5, [pc, #48]	; (8002cb4 <__libc_init_array+0x38>)
 8002c82:	4c0d      	ldr	r4, [pc, #52]	; (8002cb8 <__libc_init_array+0x3c>)
 8002c84:	1b64      	subs	r4, r4, r5
 8002c86:	10a4      	asrs	r4, r4, #2
 8002c88:	42a6      	cmp	r6, r4
 8002c8a:	d109      	bne.n	8002ca0 <__libc_init_array+0x24>
 8002c8c:	2600      	movs	r6, #0
 8002c8e:	f000 f821 	bl	8002cd4 <_init>
 8002c92:	4d0a      	ldr	r5, [pc, #40]	; (8002cbc <__libc_init_array+0x40>)
 8002c94:	4c0a      	ldr	r4, [pc, #40]	; (8002cc0 <__libc_init_array+0x44>)
 8002c96:	1b64      	subs	r4, r4, r5
 8002c98:	10a4      	asrs	r4, r4, #2
 8002c9a:	42a6      	cmp	r6, r4
 8002c9c:	d105      	bne.n	8002caa <__libc_init_array+0x2e>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	00b3      	lsls	r3, r6, #2
 8002ca2:	58eb      	ldr	r3, [r5, r3]
 8002ca4:	4798      	blx	r3
 8002ca6:	3601      	adds	r6, #1
 8002ca8:	e7ee      	b.n	8002c88 <__libc_init_array+0xc>
 8002caa:	00b3      	lsls	r3, r6, #2
 8002cac:	58eb      	ldr	r3, [r5, r3]
 8002cae:	4798      	blx	r3
 8002cb0:	3601      	adds	r6, #1
 8002cb2:	e7f2      	b.n	8002c9a <__libc_init_array+0x1e>
 8002cb4:	08002d24 	.word	0x08002d24
 8002cb8:	08002d24 	.word	0x08002d24
 8002cbc:	08002d24 	.word	0x08002d24
 8002cc0:	08002d28 	.word	0x08002d28

08002cc4 <memset>:
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	1882      	adds	r2, r0, r2
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	7019      	strb	r1, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <_init>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cda:	bc08      	pop	{r3}
 8002cdc:	469e      	mov	lr, r3
 8002cde:	4770      	bx	lr

08002ce0 <_fini>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr
