
Test_prj_qb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000236c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002464  08002464  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002464  08002464  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002464  08002464  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002464  08002464  00012464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002468  08002468  00012468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800246c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  08002478  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002478  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008737  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001784  00000000  00000000  0002876b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00029ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  0002a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018499  00000000  00000000  0002ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096a4  00000000  00000000  00043181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca72  00000000  00000000  0004c825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9297  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001890  00000000  00000000  000d92e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002414 	.word	0x08002414

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002414 	.word	0x08002414

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <WriteConfig>:
struct lines_settings {
	uint16_t L0_interval;
	uint16_t L1_interval;
};
struct lines_settings lss;
void WriteConfig() {
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock(); // Открыть доступ к FLASH (она закрыта от случайной записи)
 8000226:	f000 fc13 	bl	8000a50 <HAL_FLASH_Unlock>
	// В структуре settings хранятся настройки, преобразую ее в 16-битный массив для удобства доступа
	uint16_t *data = (uint16_t*) &lss;
 800022a:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <WriteConfig+0x84>)
 800022c:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef ef; // Объявляю структуру, необходимую для функции стирания страницы
	HAL_StatusTypeDef stat;
	ef.TypeErase = FLASH_TYPEERASE_PAGES; // Стирать постранично
 800022e:	2108      	movs	r1, #8
 8000230:	187b      	adds	r3, r7, r1
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
	ef.PageAddress = SETTINGS_ADDRESS; // Адрес страницы для стирания
 8000236:	187b      	adds	r3, r7, r1
 8000238:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <WriteConfig+0x88>)
 800023a:	605a      	str	r2, [r3, #4]
	ef.NbPages = 1; //Число страниц = 1
 800023c:	187b      	adds	r3, r7, r1
 800023e:	2201      	movs	r2, #1
 8000240:	609a      	str	r2, [r3, #8]
	uint32_t temp; // Временная переменная для результата стирания (не использую)
	HAL_FLASHEx_Erase(&ef, &temp); // Вызов функции стирания
 8000242:	1d3a      	adds	r2, r7, #4
 8000244:	187b      	adds	r3, r7, r1
 8000246:	0011      	movs	r1, r2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fcc1 	bl	8000bd0 <HAL_FLASHEx_Erase>
	// Будьте уверены, что размер структуры настроек кратен 2 байтам
	for (int i = 0; i < sizeof(lss); i += 2) { // Запись всех настроек
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
 8000252:	e01c      	b.n	800028e <WriteConfig+0x6e>
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
		SETTINGS_ADDRESS + i, *(data++));
 8000254:	69bb      	ldr	r3, [r7, #24]
 8000256:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <WriteConfig+0x88>)
 8000258:	4694      	mov	ip, r2
 800025a:	4463      	add	r3, ip
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800025c:	0019      	movs	r1, r3
		SETTINGS_ADDRESS + i, *(data++));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	1c9a      	adds	r2, r3, #2
 8000262:	61fa      	str	r2, [r7, #28]
 8000264:	881b      	ldrh	r3, [r3, #0]
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000266:	001c      	movs	r4, r3
 8000268:	2300      	movs	r3, #0
 800026a:	001d      	movs	r5, r3
 800026c:	2317      	movs	r3, #23
 800026e:	18fe      	adds	r6, r7, r3
 8000270:	0022      	movs	r2, r4
 8000272:	002b      	movs	r3, r5
 8000274:	2001      	movs	r0, #1
 8000276:	f000 fb55 	bl	8000924 <HAL_FLASH_Program>
 800027a:	0003      	movs	r3, r0
 800027c:	7033      	strb	r3, [r6, #0]
		if (stat != HAL_OK)
 800027e:	2317      	movs	r3, #23
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d106      	bne.n	8000296 <WriteConfig+0x76>
	for (int i = 0; i < sizeof(lss); i += 2) { // Запись всех настроек
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3302      	adds	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	2b03      	cmp	r3, #3
 8000292:	d9df      	bls.n	8000254 <WriteConfig+0x34>
 8000294:	e000      	b.n	8000298 <WriteConfig+0x78>
			break; // Если что-то пошло не так - выскочить из цикла
 8000296:	46c0      	nop			; (mov r8, r8)
	}
	HAL_FLASH_Lock(); // Закрыть флешку от случайной записи
 8000298:	f000 fc00 	bl	8000a9c <HAL_FLASH_Lock>
}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46bd      	mov	sp, r7
 80002a0:	b009      	add	sp, #36	; 0x24
 80002a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002a4:	200000b0 	.word	0x200000b0
 80002a8:	0800fc00 	.word	0x0800fc00

080002ac <FlashRead>:
uint32_t FlashRead(uint32_t address) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	return (*(__IO uint32_t*) address);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}

080002c0 <ReadConfig>:
// Пример чтения 4 байт настроек.
void ReadConfig() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
	// Структуру настроек превращаю в указатель на массив 8-ми битных значений
	uint8_t *setData = (uint8_t*) &lss;
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <ReadConfig+0x50>)
 80002c8:	607b      	str	r3, [r7, #4]
	uint32_t tempData = FlashRead(SETTINGS_ADDRESS); // Прочесть слово из флешки
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadConfig+0x54>)
 80002cc:	0018      	movs	r0, r3
 80002ce:	f7ff ffed 	bl	80002ac <FlashRead>
 80002d2:	0003      	movs	r3, r0
 80002d4:	603b      	str	r3, [r7, #0]
	if (tempData != 0xffffffff) { // Если флешка не пустая
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	3301      	adds	r3, #1
 80002da:	d015      	beq.n	8000308 <ReadConfig+0x48>
		setData[0] = (uint8_t) ((tempData & 0xff000000) >> 24); // Извлечь первый байт из слова
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	0e1b      	lsrs	r3, r3, #24
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	701a      	strb	r2, [r3, #0]
		setData[1] = (uint8_t) ((tempData & 0x00ff0000) >> 16); // Извлечь второй байт из слова
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	0c1a      	lsrs	r2, r3, #16
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3301      	adds	r3, #1
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	701a      	strb	r2, [r3, #0]
		setData[2] = (uint8_t) ((tempData & 0x0000ff00) >> 8); // Излечь третий байт из слова
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	0a1a      	lsrs	r2, r3, #8
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3302      	adds	r3, #2
 80002fa:	b2d2      	uxtb	r2, r2
 80002fc:	701a      	strb	r2, [r3, #0]
		setData[3] = tempData & 0xff; // Извлечь четвертый байт из слова
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3303      	adds	r3, #3
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	701a      	strb	r2, [r3, #0]
	}
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	200000b0 	.word	0x200000b0
 8000314:	0800fc00 	.word	0x0800fc00

08000318 <CheckLineState>:
//проверка, пора ли менять состояние линии
void CheckLineState(uint32_t now_time, uint32_t *check_time,
		uint16_t L_interval, uint16_t L_pin) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	0019      	movs	r1, r3
 8000324:	1dbb      	adds	r3, r7, #6
 8000326:	801a      	strh	r2, [r3, #0]
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	1c0a      	adds	r2, r1, #0
 800032c:	801a      	strh	r2, [r3, #0]
	if (now_time - *check_time >= L_interval) { //если пора
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	1ad2      	subs	r2, r2, r3
 8000336:	1dbb      	adds	r3, r7, #6
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d309      	bcc.n	8000352 <CheckLineState+0x3a>
		HAL_GPIO_TogglePin(GPIOB, L_pin); //сменили состояние
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	4a06      	ldr	r2, [pc, #24]	; (800035c <CheckLineState+0x44>)
 8000344:	0019      	movs	r1, r3
 8000346:	0010      	movs	r0, r2
 8000348:	f000 fe83 	bl	8001052 <HAL_GPIO_TogglePin>
		*check_time = now_time; //запомнили время
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	601a      	str	r2, [r3, #0]
	}
}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b004      	add	sp, #16
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	48000400 	.word	0x48000400

08000360 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	ReadConfig();
 8000366:	f7ff ffab 	bl	80002c0 <ReadConfig>
	if (!lss.L0_interval || !lss.L1_interval) { //если один из интервалов == 0, заменяем преднастройкой
 800036a:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <main+0x70>)
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d003      	beq.n	800037a <main+0x1a>
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <main+0x70>)
 8000374:	885b      	ldrh	r3, [r3, #2]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d107      	bne.n	800038a <main+0x2a>
		lss.L0_interval = L0_interval_def;
 800037a:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <main+0x70>)
 800037c:	2264      	movs	r2, #100	; 0x64
 800037e:	801a      	strh	r2, [r3, #0]
		lss.L1_interval = L1_interval_def;
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <main+0x70>)
 8000382:	22c8      	movs	r2, #200	; 0xc8
 8000384:	805a      	strh	r2, [r3, #2]
		WriteConfig(); //сохраняем
 8000386:	f7ff ff4b 	bl	8000220 <WriteConfig>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800038a:	f000 f9b3 	bl	80006f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800038e:	f000 f821 	bl	80003d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000392:	f000 f8a7 	bl	80004e4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000396:	f000 f875 	bl	8000484 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	uint32_t i_tick = 0; //счетчик прохождения main while
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
	//счетчики для линий
	uint32_t i_L0 = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	60bb      	str	r3, [r7, #8]
	uint32_t i_L1 = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		i_tick++;
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3301      	adds	r3, #1
 80003aa:	60fb      	str	r3, [r7, #12]
		CheckLineState(i_tick, &i_L0, lss.L0_interval, L0_Pin);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <main+0x70>)
 80003ae:	881a      	ldrh	r2, [r3, #0]
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	019b      	lsls	r3, r3, #6
 80003b4:	2108      	movs	r1, #8
 80003b6:	1879      	adds	r1, r7, r1
 80003b8:	68f8      	ldr	r0, [r7, #12]
 80003ba:	f7ff ffad 	bl	8000318 <CheckLineState>
		CheckLineState(i_tick, &i_L1, lss.L1_interval, L1_Pin);
 80003be:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <main+0x70>)
 80003c0:	885a      	ldrh	r2, [r3, #2]
 80003c2:	2380      	movs	r3, #128	; 0x80
 80003c4:	015b      	lsls	r3, r3, #5
 80003c6:	1d39      	adds	r1, r7, #4
 80003c8:	68f8      	ldr	r0, [r7, #12]
 80003ca:	f7ff ffa5 	bl	8000318 <CheckLineState>
		i_tick++;
 80003ce:	e7ea      	b.n	80003a6 <main+0x46>
 80003d0:	200000b0 	.word	0x200000b0

080003d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003d4:	b590      	push	{r4, r7, lr}
 80003d6:	b099      	sub	sp, #100	; 0x64
 80003d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003da:	242c      	movs	r4, #44	; 0x2c
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	0018      	movs	r0, r3
 80003e0:	2334      	movs	r3, #52	; 0x34
 80003e2:	001a      	movs	r2, r3
 80003e4:	2100      	movs	r1, #0
 80003e6:	f002 f80d 	bl	8002404 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003ea:	231c      	movs	r3, #28
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	0018      	movs	r0, r3
 80003f0:	2310      	movs	r3, #16
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f002 f805 	bl	8002404 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003fa:	003b      	movs	r3, r7
 80003fc:	0018      	movs	r0, r3
 80003fe:	231c      	movs	r3, #28
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f001 fffe 	bl	8002404 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000408:	0021      	movs	r1, r4
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2202      	movs	r2, #2
 800040e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2201      	movs	r2, #1
 8000414:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2210      	movs	r2, #16
 800041a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2200      	movs	r2, #0
 8000420:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000422:	187b      	adds	r3, r7, r1
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fe2f 	bl	8001088 <HAL_RCC_OscConfig>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x5e>
		Error_Handler();
 800042e:	f000 f8a3 	bl	8000578 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000432:	211c      	movs	r1, #28
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2207      	movs	r2, #7
 8000438:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2200      	movs	r2, #0
 800043e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2100      	movs	r1, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f001 f99f 	bl	8001794 <HAL_RCC_ClockConfig>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x8a>
		Error_Handler();
 800045a:	f000 f88d 	bl	8000578 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800045e:	003b      	movs	r3, r7
 8000460:	2201      	movs	r2, #1
 8000462:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000464:	003b      	movs	r3, r7
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800046a:	003b      	movs	r3, r7
 800046c:	0018      	movs	r0, r3
 800046e:	f001 fb0b 	bl	8001a88 <HAL_RCCEx_PeriphCLKConfig>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0xa6>
		Error_Handler();
 8000476:	f000 f87f 	bl	8000578 <Error_Handler>
	}
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b019      	add	sp, #100	; 0x64
 8000480:	bd90      	pop	{r4, r7, pc}
	...

08000484 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_USART1_UART_Init+0x58>)
 800048a:	4a15      	ldr	r2, [pc, #84]	; (80004e0 <MX_USART1_UART_Init+0x5c>)
 800048c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <MX_USART1_UART_Init+0x58>)
 8000490:	2296      	movs	r2, #150	; 0x96
 8000492:	0212      	lsls	r2, r2, #8
 8000494:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_USART1_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_USART1_UART_Init+0x58>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 fbdb 	bl	8001c84 <HAL_UART_Init>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80004d2:	f000 f851 	bl	8000578 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	2000002c 	.word	0x2000002c
 80004e0:	40013800 	.word	0x40013800

080004e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b089      	sub	sp, #36	; 0x24
 80004e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004ea:	240c      	movs	r4, #12
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f001 ff85 	bl	8002404 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_GPIO_Init+0x8c>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <MX_GPIO_Init+0x8c>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	02c9      	lsls	r1, r1, #11
 8000504:	430a      	orrs	r2, r1
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	4b19      	ldr	r3, [pc, #100]	; (8000570 <MX_GPIO_Init+0x8c>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	02db      	lsls	r3, r3, #11
 8000510:	4013      	ands	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_GPIO_Init+0x8c>)
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_GPIO_Init+0x8c>)
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	0289      	lsls	r1, r1, #10
 8000520:	430a      	orrs	r2, r1
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_GPIO_Init+0x8c>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	029b      	lsls	r3, r3, #10
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, L1_Pin | L0_Pin, GPIO_PIN_RESET);
 8000532:	23c0      	movs	r3, #192	; 0xc0
 8000534:	019b      	lsls	r3, r3, #6
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <MX_GPIO_Init+0x90>)
 8000538:	2200      	movs	r2, #0
 800053a:	0019      	movs	r1, r3
 800053c:	f000 fd6c 	bl	8001018 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : L1_Pin L0_Pin */
	GPIO_InitStruct.Pin = L1_Pin | L0_Pin;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	22c0      	movs	r2, #192	; 0xc0
 8000544:	0192      	lsls	r2, r2, #6
 8000546:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2201      	movs	r2, #1
 800054c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055a:	193b      	adds	r3, r7, r4
 800055c:	4a05      	ldr	r2, [pc, #20]	; (8000574 <MX_GPIO_Init+0x90>)
 800055e:	0019      	movs	r1, r3
 8000560:	0010      	movs	r0, r2
 8000562:	f000 fbe1 	bl	8000d28 <HAL_GPIO_Init>

}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b009      	add	sp, #36	; 0x24
 800056c:	bd90      	pop	{r4, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40021000 	.word	0x40021000
 8000574:	48000400 	.word	0x48000400

08000578 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000580:	e7fe      	b.n	8000580 <Error_Handler+0x8>
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_MspInit+0x44>)
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <HAL_MspInit+0x44>)
 8000590:	2101      	movs	r1, #1
 8000592:	430a      	orrs	r2, r1
 8000594:	619a      	str	r2, [r3, #24]
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_MspInit+0x44>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	2201      	movs	r2, #1
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_MspInit+0x44>)
 80005a4:	69da      	ldr	r2, [r3, #28]
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_MspInit+0x44>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0549      	lsls	r1, r1, #21
 80005ac:	430a      	orrs	r2, r1
 80005ae:	61da      	str	r2, [r3, #28]
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_MspInit+0x44>)
 80005b2:	69da      	ldr	r2, [r3, #28]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	055b      	lsls	r3, r3, #21
 80005b8:	4013      	ands	r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b08b      	sub	sp, #44	; 0x2c
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	2414      	movs	r4, #20
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	0018      	movs	r0, r3
 80005da:	2314      	movs	r3, #20
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f001 ff10 	bl	8002404 <memset>
  if(huart->Instance==USART1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <HAL_UART_MspInit+0x94>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d133      	bne.n	8000656 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <HAL_UART_MspInit+0x98>)
 80005f0:	699a      	ldr	r2, [r3, #24]
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <HAL_UART_MspInit+0x98>)
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	01c9      	lsls	r1, r1, #7
 80005f8:	430a      	orrs	r2, r1
 80005fa:	619a      	str	r2, [r3, #24]
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <HAL_UART_MspInit+0x98>)
 80005fe:	699a      	ldr	r2, [r3, #24]
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	01db      	lsls	r3, r3, #7
 8000604:	4013      	ands	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <HAL_UART_MspInit+0x98>)
 800060c:	695a      	ldr	r2, [r3, #20]
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_UART_MspInit+0x98>)
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	0289      	lsls	r1, r1, #10
 8000614:	430a      	orrs	r2, r1
 8000616:	615a      	str	r2, [r3, #20]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_UART_MspInit+0x98>)
 800061a:	695a      	ldr	r2, [r3, #20]
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	029b      	lsls	r3, r3, #10
 8000620:	4013      	ands	r3, r2
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	22c0      	movs	r2, #192	; 0xc0
 800062a:	00d2      	lsls	r2, r2, #3
 800062c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	0021      	movs	r1, r4
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2202      	movs	r2, #2
 8000634:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2203      	movs	r2, #3
 8000640:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	187a      	adds	r2, r7, r1
 800064a:	2390      	movs	r3, #144	; 0x90
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fb69 	bl	8000d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b00b      	add	sp, #44	; 0x2c
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40013800 	.word	0x40013800
 8000664:	40021000 	.word	0x40021000

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler+0x4>

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068c:	f000 f87a 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490e      	ldr	r1, [pc, #56]	; (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0b      	ldr	r4, [pc, #44]	; (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006ca:	f7ff ffe4 	bl	8000696 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006ce:	f001 fe75 	bl	80023bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fe45 	bl	8000360 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   r0, =_estack
 80006d8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e4:	0800246c 	.word	0x0800246c
  ldr r2, =_sbss
 80006e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006ec:	200000d8 	.word	0x200000d8

080006f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_COMP_IRQHandler>
	...

080006f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <HAL_Init+0x24>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_Init+0x24>)
 80006fe:	2110      	movs	r1, #16
 8000700:	430a      	orrs	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 f809 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070a:	f7ff ff3b 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_InitTick+0x5c>)
 8000726:	681c      	ldr	r4, [r3, #0]
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_InitTick+0x60>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	0019      	movs	r1, r3
 800072e:	23fa      	movs	r3, #250	; 0xfa
 8000730:	0098      	lsls	r0, r3, #2
 8000732:	f7ff fce9 	bl	8000108 <__udivsi3>
 8000736:	0003      	movs	r3, r0
 8000738:	0019      	movs	r1, r3
 800073a:	0020      	movs	r0, r4
 800073c:	f7ff fce4 	bl	8000108 <__udivsi3>
 8000740:	0003      	movs	r3, r0
 8000742:	0018      	movs	r0, r3
 8000744:	f000 f8e1 	bl	800090a <HAL_SYSTICK_Config>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800074c:	2301      	movs	r3, #1
 800074e:	e00f      	b.n	8000770 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d80b      	bhi.n	800076e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	2301      	movs	r3, #1
 800075a:	425b      	negs	r3, r3
 800075c:	2200      	movs	r2, #0
 800075e:	0018      	movs	r0, r3
 8000760:	f000 f8be 	bl	80008e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_InitTick+0x64>)
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b003      	add	sp, #12
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	20000000 	.word	0x20000000
 800077c:	20000008 	.word	0x20000008
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x1c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	001a      	movs	r2, r3
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x20>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	18d2      	adds	r2, r2, r3
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_IncTick+0x20>)
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000008 	.word	0x20000008
 80007a4:	200000b4 	.word	0x200000b4

080007a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <HAL_GetTick+0x10>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	200000b4 	.word	0x200000b4

080007bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	0002      	movs	r2, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b7f      	cmp	r3, #127	; 0x7f
 80007d0:	d828      	bhi.n	8000824 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d2:	4a2f      	ldr	r2, [pc, #188]	; (8000890 <__NVIC_SetPriority+0xd4>)
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	089b      	lsrs	r3, r3, #2
 80007dc:	33c0      	adds	r3, #192	; 0xc0
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	589b      	ldr	r3, [r3, r2]
 80007e2:	1dfa      	adds	r2, r7, #7
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	0011      	movs	r1, r2
 80007e8:	2203      	movs	r2, #3
 80007ea:	400a      	ands	r2, r1
 80007ec:	00d2      	lsls	r2, r2, #3
 80007ee:	21ff      	movs	r1, #255	; 0xff
 80007f0:	4091      	lsls	r1, r2
 80007f2:	000a      	movs	r2, r1
 80007f4:	43d2      	mvns	r2, r2
 80007f6:	401a      	ands	r2, r3
 80007f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	019b      	lsls	r3, r3, #6
 80007fe:	22ff      	movs	r2, #255	; 0xff
 8000800:	401a      	ands	r2, r3
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	0018      	movs	r0, r3
 8000808:	2303      	movs	r3, #3
 800080a:	4003      	ands	r3, r0
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000810:	481f      	ldr	r0, [pc, #124]	; (8000890 <__NVIC_SetPriority+0xd4>)
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b25b      	sxtb	r3, r3
 8000818:	089b      	lsrs	r3, r3, #2
 800081a:	430a      	orrs	r2, r1
 800081c:	33c0      	adds	r3, #192	; 0xc0
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000822:	e031      	b.n	8000888 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <__NVIC_SetPriority+0xd8>)
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	0019      	movs	r1, r3
 800082c:	230f      	movs	r3, #15
 800082e:	400b      	ands	r3, r1
 8000830:	3b08      	subs	r3, #8
 8000832:	089b      	lsrs	r3, r3, #2
 8000834:	3306      	adds	r3, #6
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	18d3      	adds	r3, r2, r3
 800083a:	3304      	adds	r3, #4
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	1dfa      	adds	r2, r7, #7
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	0011      	movs	r1, r2
 8000844:	2203      	movs	r2, #3
 8000846:	400a      	ands	r2, r1
 8000848:	00d2      	lsls	r2, r2, #3
 800084a:	21ff      	movs	r1, #255	; 0xff
 800084c:	4091      	lsls	r1, r2
 800084e:	000a      	movs	r2, r1
 8000850:	43d2      	mvns	r2, r2
 8000852:	401a      	ands	r2, r3
 8000854:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	019b      	lsls	r3, r3, #6
 800085a:	22ff      	movs	r2, #255	; 0xff
 800085c:	401a      	ands	r2, r3
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	0018      	movs	r0, r3
 8000864:	2303      	movs	r3, #3
 8000866:	4003      	ands	r3, r0
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <__NVIC_SetPriority+0xd8>)
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	001c      	movs	r4, r3
 8000874:	230f      	movs	r3, #15
 8000876:	4023      	ands	r3, r4
 8000878:	3b08      	subs	r3, #8
 800087a:	089b      	lsrs	r3, r3, #2
 800087c:	430a      	orrs	r2, r1
 800087e:	3306      	adds	r3, #6
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	18c3      	adds	r3, r0, r3
 8000884:	3304      	adds	r3, #4
 8000886:	601a      	str	r2, [r3, #0]
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b003      	add	sp, #12
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	045b      	lsls	r3, r3, #17
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d301      	bcc.n	80008b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ac:	2301      	movs	r3, #1
 80008ae:	e010      	b.n	80008d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <SysTick_Config+0x44>)
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	3a01      	subs	r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b8:	2301      	movs	r3, #1
 80008ba:	425b      	negs	r3, r3
 80008bc:	2103      	movs	r1, #3
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff ff7c 	bl	80007bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <SysTick_Config+0x44>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <SysTick_Config+0x44>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	0018      	movs	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	e000e010 	.word	0xe000e010

080008e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
 80008ea:	210f      	movs	r1, #15
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	1c02      	adds	r2, r0, #0
 80008f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b25b      	sxtb	r3, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff ff5d 	bl	80007bc <__NVIC_SetPriority>
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	0018      	movs	r0, r3
 8000916:	f7ff ffbf 	bl	8000898 <SysTick_Config>
 800091a:	0003      	movs	r3, r0
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}

08000924 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	603a      	str	r2, [r7, #0]
 8000930:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000932:	2317      	movs	r3, #23
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800093a:	2316      	movs	r3, #22
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000942:	2315      	movs	r3, #21
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800094a:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <HAL_FLASH_Program+0x120>)
 800094c:	7e1b      	ldrb	r3, [r3, #24]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d101      	bne.n	8000956 <HAL_FLASH_Program+0x32>
 8000952:	2302      	movs	r3, #2
 8000954:	e072      	b.n	8000a3c <HAL_FLASH_Program+0x118>
 8000956:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <HAL_FLASH_Program+0x120>)
 8000958:	2201      	movs	r2, #1
 800095a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800095c:	2317      	movs	r3, #23
 800095e:	18fe      	adds	r6, r7, r3
 8000960:	4b39      	ldr	r3, [pc, #228]	; (8000a48 <HAL_FLASH_Program+0x124>)
 8000962:	0018      	movs	r0, r3
 8000964:	f000 f8c4 	bl	8000af0 <FLASH_WaitForLastOperation>
 8000968:	0003      	movs	r3, r0
 800096a:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 800096c:	2317      	movs	r3, #23
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d15c      	bne.n	8000a30 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d104      	bne.n	8000986 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800097c:	2315      	movs	r3, #21
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	e00b      	b.n	800099e <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d104      	bne.n	8000996 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800098c:	2315      	movs	r3, #21
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	2202      	movs	r2, #2
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	e003      	b.n	800099e <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000996:	2315      	movs	r3, #21
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	2204      	movs	r2, #4
 800099c:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 800099e:	2316      	movs	r3, #22
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e039      	b.n	8000a1c <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80009a8:	2116      	movs	r1, #22
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	005a      	lsls	r2, r3, #1
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	18d0      	adds	r0, r2, r3
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	011b      	lsls	r3, r3, #4
 80009ba:	001a      	movs	r2, r3
 80009bc:	3a20      	subs	r2, #32
 80009be:	2a00      	cmp	r2, #0
 80009c0:	db03      	blt.n	80009ca <HAL_FLASH_Program+0xa6>
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	40d1      	lsrs	r1, r2
 80009c6:	000c      	movs	r4, r1
 80009c8:	e008      	b.n	80009dc <HAL_FLASH_Program+0xb8>
 80009ca:	2220      	movs	r2, #32
 80009cc:	1ad2      	subs	r2, r2, r3
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	4091      	lsls	r1, r2
 80009d2:	000a      	movs	r2, r1
 80009d4:	6839      	ldr	r1, [r7, #0]
 80009d6:	40d9      	lsrs	r1, r3
 80009d8:	000c      	movs	r4, r1
 80009da:	4314      	orrs	r4, r2
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	40da      	lsrs	r2, r3
 80009e0:	0015      	movs	r5, r2
 80009e2:	b2a3      	uxth	r3, r4
 80009e4:	0019      	movs	r1, r3
 80009e6:	f000 f867 	bl	8000ab8 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80009ea:	2317      	movs	r3, #23
 80009ec:	18fe      	adds	r6, r7, r3
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <HAL_FLASH_Program+0x124>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 f87d 	bl	8000af0 <FLASH_WaitForLastOperation>
 80009f6:	0003      	movs	r3, r0
 80009f8:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_FLASH_Program+0x128>)
 80009fc:	691a      	ldr	r2, [r3, #16]
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_FLASH_Program+0x128>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	438a      	bics	r2, r1
 8000a04:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000a06:	2317      	movs	r3, #23
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10e      	bne.n	8000a2e <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000a10:	2116      	movs	r1, #22
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	3201      	adds	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
 8000a1c:	2316      	movs	r3, #22
 8000a1e:	18fa      	adds	r2, r7, r3
 8000a20:	2315      	movs	r3, #21
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d3bd      	bcc.n	80009a8 <HAL_FLASH_Program+0x84>
 8000a2c:	e000      	b.n	8000a30 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000a2e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_FLASH_Program+0x120>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	761a      	strb	r2, [r3, #24]

  return status;
 8000a36:	2317      	movs	r3, #23
 8000a38:	18fb      	adds	r3, r7, r3
 8000a3a:	781b      	ldrb	r3, [r3, #0]
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b007      	add	sp, #28
 8000a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a44:	200000b8 	.word	0x200000b8
 8000a48:	0000c350 	.word	0x0000c350
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_FLASH_Unlock+0x40>)
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	4013      	ands	r3, r2
 8000a64:	d00d      	beq.n	8000a82 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_FLASH_Unlock+0x40>)
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_FLASH_Unlock+0x44>)
 8000a6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_FLASH_Unlock+0x40>)
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_FLASH_Unlock+0x48>)
 8000a70:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <HAL_FLASH_Unlock+0x40>)
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	4013      	ands	r3, r2
 8000a7a:	d002      	beq.n	8000a82 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
}
 8000a86:	0018      	movs	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40022000 	.word	0x40022000
 8000a94:	45670123 	.word	0x45670123
 8000a98:	cdef89ab 	.word	0xcdef89ab

08000a9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_FLASH_Lock+0x18>)
 8000aa2:	691a      	ldr	r2, [r3, #16]
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_FLASH_Lock+0x18>)
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	0018      	movs	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	1cbb      	adds	r3, r7, #2
 8000ac4:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <FLASH_Program_HalfWord+0x30>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <FLASH_Program_HalfWord+0x34>)
 8000ace:	691a      	ldr	r2, [r3, #16]
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <FLASH_Program_HalfWord+0x34>)
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1cba      	adds	r2, r7, #2
 8000adc:	8812      	ldrh	r2, [r2, #0]
 8000ade:	801a      	strh	r2, [r3, #0]
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000b8 	.word	0x200000b8
 8000aec:	40022000 	.word	0x40022000

08000af0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff fe56 	bl	80007a8 <HAL_GetTick>
 8000afc:	0003      	movs	r3, r0
 8000afe:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b00:	e00f      	b.n	8000b22 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3301      	adds	r3, #1
 8000b06:	d00c      	beq.n	8000b22 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d007      	beq.n	8000b1e <FLASH_WaitForLastOperation+0x2e>
 8000b0e:	f7ff fe4b 	bl	80007a8 <HAL_GetTick>
 8000b12:	0002      	movs	r2, r0
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d201      	bcs.n	8000b22 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	e01f      	b.n	8000b62 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <FLASH_WaitForLastOperation+0x7c>)
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	2201      	movs	r2, #1
 8000b28:	4013      	ands	r3, r2
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d0e9      	beq.n	8000b02 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <FLASH_WaitForLastOperation+0x7c>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	2220      	movs	r2, #32
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b20      	cmp	r3, #32
 8000b38:	d102      	bne.n	8000b40 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <FLASH_WaitForLastOperation+0x7c>)
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <FLASH_WaitForLastOperation+0x7c>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	2210      	movs	r2, #16
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b10      	cmp	r3, #16
 8000b4a:	d005      	beq.n	8000b58 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <FLASH_WaitForLastOperation+0x7c>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	2204      	movs	r2, #4
 8000b52:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d103      	bne.n	8000b60 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000b58:	f000 f80a 	bl	8000b70 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	0018      	movs	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b004      	add	sp, #16
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	40022000 	.word	0x40022000

08000b70 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <FLASH_SetErrorCode+0x58>)
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	2210      	movs	r2, #16
 8000b80:	4013      	ands	r3, r2
 8000b82:	2b10      	cmp	r3, #16
 8000b84:	d109      	bne.n	8000b9a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <FLASH_SetErrorCode+0x5c>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <FLASH_SetErrorCode+0x5c>)
 8000b90:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2210      	movs	r2, #16
 8000b96:	4313      	orrs	r3, r2
 8000b98:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <FLASH_SetErrorCode+0x58>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d109      	bne.n	8000bba <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <FLASH_SetErrorCode+0x5c>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	2201      	movs	r2, #1
 8000bac:	431a      	orrs	r2, r3
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <FLASH_SetErrorCode+0x5c>)
 8000bb0:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000bba:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <FLASH_SetErrorCode+0x58>)
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	60da      	str	r2, [r3, #12]
}  
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40022000 	.word	0x40022000
 8000bcc:	200000b8 	.word	0x200000b8

08000bd0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bda:	230f      	movs	r3, #15
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000be6:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <HAL_FLASHEx_Erase+0xe0>)
 8000be8:	7e1b      	ldrb	r3, [r3, #24]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d101      	bne.n	8000bf2 <HAL_FLASHEx_Erase+0x22>
 8000bee:	2302      	movs	r3, #2
 8000bf0:	e05a      	b.n	8000ca8 <HAL_FLASHEx_Erase+0xd8>
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <HAL_FLASHEx_Erase+0xe0>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d116      	bne.n	8000c2e <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c00:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <HAL_FLASHEx_Erase+0xe4>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff ff74 	bl	8000af0 <FLASH_WaitForLastOperation>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d147      	bne.n	8000c9c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000c0c:	f000 f856 	bl	8000cbc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fc      	adds	r4, r7, r3
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <HAL_FLASHEx_Erase+0xe4>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff ff6a 	bl	8000af0 <FLASH_WaitForLastOperation>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <HAL_FLASHEx_Erase+0xe8>)
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <HAL_FLASHEx_Erase+0xe8>)
 8000c26:	2104      	movs	r1, #4
 8000c28:	438a      	bics	r2, r1
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	e036      	b.n	8000c9c <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <HAL_FLASHEx_Erase+0xe4>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <FLASH_WaitForLastOperation>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d130      	bne.n	8000c9c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4252      	negs	r2, r2
 8000c40:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	e01f      	b.n	8000c8a <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f000 f84d 	bl	8000cec <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c52:	250f      	movs	r5, #15
 8000c54:	197c      	adds	r4, r7, r5
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_FLASHEx_Erase+0xe4>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ff49 	bl	8000af0 <FLASH_WaitForLastOperation>
 8000c5e:	0003      	movs	r3, r0
 8000c60:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_FLASHEx_Erase+0xe8>)
 8000c64:	691a      	ldr	r2, [r3, #16]
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_FLASHEx_Erase+0xe8>)
 8000c68:	2102      	movs	r1, #2
 8000c6a:	438a      	bics	r2, r1
 8000c6c:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000c6e:	197b      	adds	r3, r7, r5
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	601a      	str	r2, [r3, #0]
            break;
 8000c7c:	e00e      	b.n	8000c9c <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	4694      	mov	ip, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	02da      	lsls	r2, r3, #11
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d3d6      	bcc.n	8000c4a <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <HAL_FLASHEx_Erase+0xe0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	761a      	strb	r2, [r3, #24]

  return status;
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	781b      	ldrb	r3, [r3, #0]
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b004      	add	sp, #16
 8000cae:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb0:	200000b8 	.word	0x200000b8
 8000cb4:	0000c350 	.word	0x0000c350
 8000cb8:	40022000 	.word	0x40022000

08000cbc <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <FLASH_MassErase+0x28>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <FLASH_MassErase+0x2c>)
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <FLASH_MassErase+0x2c>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <FLASH_MassErase+0x2c>)
 8000cd4:	691a      	ldr	r2, [r3, #16]
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <FLASH_MassErase+0x2c>)
 8000cd8:	2140      	movs	r1, #64	; 0x40
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	611a      	str	r2, [r3, #16]
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200000b8 	.word	0x200000b8
 8000ce8:	40022000 	.word	0x40022000

08000cec <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <FLASH_PageErase+0x34>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <FLASH_PageErase+0x38>)
 8000cfc:	691a      	ldr	r2, [r3, #16]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <FLASH_PageErase+0x38>)
 8000d00:	2102      	movs	r1, #2
 8000d02:	430a      	orrs	r2, r1
 8000d04:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <FLASH_PageErase+0x38>)
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <FLASH_PageErase+0x38>)
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <FLASH_PageErase+0x38>)
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	430a      	orrs	r2, r1
 8000d16:	611a      	str	r2, [r3, #16]
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000b8 	.word	0x200000b8
 8000d24:	40022000 	.word	0x40022000

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	e155      	b.n	8000fe4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	4091      	lsls	r1, r2
 8000d42:	000a      	movs	r2, r1
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <HAL_GPIO_Init+0x28>
 8000d4e:	e146      	b.n	8000fde <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2203      	movs	r2, #3
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d005      	beq.n	8000d68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2203      	movs	r2, #3
 8000d62:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d130      	bne.n	8000dca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	2203      	movs	r2, #3
 8000d74:	409a      	lsls	r2, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	43da      	mvns	r2, r3
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d9e:	2201      	movs	r2, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	43da      	mvns	r2, r3
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	2201      	movs	r2, #1
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2203      	movs	r2, #3
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d017      	beq.n	8000e06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	43da      	mvns	r2, r3
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d123      	bne.n	8000e5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3208      	adds	r2, #8
 8000e1a:	0092      	lsls	r2, r2, #2
 8000e1c:	58d3      	ldr	r3, [r2, r3]
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2207      	movs	r2, #7
 8000e24:	4013      	ands	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	691a      	ldr	r2, [r3, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2107      	movs	r1, #7
 8000e3e:	400b      	ands	r3, r1
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	0092      	lsls	r2, r2, #2
 8000e56:	6939      	ldr	r1, [r7, #16]
 8000e58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2203      	movs	r2, #3
 8000e78:	401a      	ands	r2, r3
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	23c0      	movs	r3, #192	; 0xc0
 8000e94:	029b      	lsls	r3, r3, #10
 8000e96:	4013      	ands	r3, r2
 8000e98:	d100      	bne.n	8000e9c <HAL_GPIO_Init+0x174>
 8000e9a:	e0a0      	b.n	8000fde <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9c:	4b57      	ldr	r3, [pc, #348]	; (8000ffc <HAL_GPIO_Init+0x2d4>)
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	4b56      	ldr	r3, [pc, #344]	; (8000ffc <HAL_GPIO_Init+0x2d4>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	619a      	str	r2, [r3, #24]
 8000ea8:	4b54      	ldr	r3, [pc, #336]	; (8000ffc <HAL_GPIO_Init+0x2d4>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	2201      	movs	r2, #1
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb4:	4a52      	ldr	r2, [pc, #328]	; (8001000 <HAL_GPIO_Init+0x2d8>)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	589b      	ldr	r3, [r3, r2]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	0013      	movs	r3, r2
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	2390      	movs	r3, #144	; 0x90
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d019      	beq.n	8000f16 <HAL_GPIO_Init+0x1ee>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a47      	ldr	r2, [pc, #284]	; (8001004 <HAL_GPIO_Init+0x2dc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0x1ea>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a46      	ldr	r2, [pc, #280]	; (8001008 <HAL_GPIO_Init+0x2e0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_GPIO_Init+0x1e6>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a45      	ldr	r2, [pc, #276]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x1e2>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a44      	ldr	r2, [pc, #272]	; (8001010 <HAL_GPIO_Init+0x2e8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x1de>
 8000f02:	2304      	movs	r3, #4
 8000f04:	e008      	b.n	8000f18 <HAL_GPIO_Init+0x1f0>
 8000f06:	2305      	movs	r3, #5
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x1f0>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <HAL_GPIO_Init+0x1f0>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_Init+0x1f0>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x1f0>
 8000f16:	2300      	movs	r3, #0
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4093      	lsls	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f28:	4935      	ldr	r1, [pc, #212]	; (8001000 <HAL_GPIO_Init+0x2d8>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f36:	4b37      	ldr	r3, [pc, #220]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	025b      	lsls	r3, r3, #9
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f60:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	029b      	lsls	r3, r3, #10
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	035b      	lsls	r3, r3, #13
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	039b      	lsls	r3, r3, #14
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	40da      	lsrs	r2, r3
 8000fec:	1e13      	subs	r3, r2, #0
 8000fee:	d000      	beq.n	8000ff2 <HAL_GPIO_Init+0x2ca>
 8000ff0:	e6a2      	b.n	8000d38 <HAL_GPIO_Init+0x10>
  } 
}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b006      	add	sp, #24
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010000 	.word	0x40010000
 8001004:	48000400 	.word	0x48000400
 8001008:	48000800 	.word	0x48000800
 800100c:	48000c00 	.word	0x48000c00
 8001010:	48001000 	.word	0x48001000
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	0008      	movs	r0, r1
 8001022:	0011      	movs	r1, r2
 8001024:	1cbb      	adds	r3, r7, #2
 8001026:	1c02      	adds	r2, r0, #0
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	1c7b      	adds	r3, r7, #1
 800102c:	1c0a      	adds	r2, r1, #0
 800102e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001030:	1c7b      	adds	r3, r7, #1
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001038:	1cbb      	adds	r3, r7, #2
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001042:	1cbb      	adds	r3, r7, #2
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	000a      	movs	r2, r1
 800105c:	1cbb      	adds	r3, r7, #2
 800105e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001066:	1cbb      	adds	r3, r7, #2
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	041a      	lsls	r2, r3, #16
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	1cb9      	adds	r1, r7, #2
 8001076:	8809      	ldrh	r1, [r1, #0]
 8001078:	400b      	ands	r3, r1
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b004      	add	sp, #16
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	f000 fb76 	bl	8001788 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2201      	movs	r2, #1
 80010a2:	4013      	ands	r3, r2
 80010a4:	d100      	bne.n	80010a8 <HAL_RCC_OscConfig+0x20>
 80010a6:	e08e      	b.n	80011c6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010a8:	4bc5      	ldr	r3, [pc, #788]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	220c      	movs	r2, #12
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d00e      	beq.n	80010d2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b4:	4bc2      	ldr	r3, [pc, #776]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	220c      	movs	r2, #12
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d117      	bne.n	80010f0 <HAL_RCC_OscConfig+0x68>
 80010c0:	4bbf      	ldr	r3, [pc, #764]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	23c0      	movs	r3, #192	; 0xc0
 80010c6:	025b      	lsls	r3, r3, #9
 80010c8:	401a      	ands	r2, r3
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d10e      	bne.n	80010f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d2:	4bbb      	ldr	r3, [pc, #748]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	029b      	lsls	r3, r3, #10
 80010da:	4013      	ands	r3, r2
 80010dc:	d100      	bne.n	80010e0 <HAL_RCC_OscConfig+0x58>
 80010de:	e071      	b.n	80011c4 <HAL_RCC_OscConfig+0x13c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <HAL_RCC_OscConfig+0x62>
 80010e8:	e06c      	b.n	80011c4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f000 fb4c 	bl	8001788 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d107      	bne.n	8001108 <HAL_RCC_OscConfig+0x80>
 80010f8:	4bb1      	ldr	r3, [pc, #708]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4bb0      	ldr	r3, [pc, #704]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	0249      	lsls	r1, r1, #9
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e02f      	b.n	8001168 <HAL_RCC_OscConfig+0xe0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10c      	bne.n	800112a <HAL_RCC_OscConfig+0xa2>
 8001110:	4bab      	ldr	r3, [pc, #684]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4baa      	ldr	r3, [pc, #680]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001116:	49ab      	ldr	r1, [pc, #684]	; (80013c4 <HAL_RCC_OscConfig+0x33c>)
 8001118:	400a      	ands	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	4ba8      	ldr	r3, [pc, #672]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4ba7      	ldr	r3, [pc, #668]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001122:	49a9      	ldr	r1, [pc, #676]	; (80013c8 <HAL_RCC_OscConfig+0x340>)
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e01e      	b.n	8001168 <HAL_RCC_OscConfig+0xe0>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b05      	cmp	r3, #5
 8001130:	d10e      	bne.n	8001150 <HAL_RCC_OscConfig+0xc8>
 8001132:	4ba3      	ldr	r3, [pc, #652]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4ba2      	ldr	r3, [pc, #648]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	02c9      	lsls	r1, r1, #11
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	4b9f      	ldr	r3, [pc, #636]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b9e      	ldr	r3, [pc, #632]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0249      	lsls	r1, r1, #9
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e00b      	b.n	8001168 <HAL_RCC_OscConfig+0xe0>
 8001150:	4b9b      	ldr	r3, [pc, #620]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b9a      	ldr	r3, [pc, #616]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001156:	499b      	ldr	r1, [pc, #620]	; (80013c4 <HAL_RCC_OscConfig+0x33c>)
 8001158:	400a      	ands	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	4b98      	ldr	r3, [pc, #608]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b97      	ldr	r3, [pc, #604]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001162:	4999      	ldr	r1, [pc, #612]	; (80013c8 <HAL_RCC_OscConfig+0x340>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d014      	beq.n	800119a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fb1a 	bl	80007a8 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117a:	f7ff fb15 	bl	80007a8 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b64      	cmp	r3, #100	; 0x64
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e2fd      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118c:	4b8c      	ldr	r3, [pc, #560]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	029b      	lsls	r3, r3, #10
 8001194:	4013      	ands	r3, r2
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0xf2>
 8001198:	e015      	b.n	80011c6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fb05 	bl	80007a8 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fb00 	bl	80007a8 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e2e8      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	4b82      	ldr	r3, [pc, #520]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	029b      	lsls	r3, r3, #10
 80011be:	4013      	ands	r3, r2
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x11c>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2202      	movs	r2, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d100      	bne.n	80011d2 <HAL_RCC_OscConfig+0x14a>
 80011d0:	e06c      	b.n	80012ac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011d2:	4b7b      	ldr	r3, [pc, #492]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	220c      	movs	r2, #12
 80011d8:	4013      	ands	r3, r2
 80011da:	d00e      	beq.n	80011fa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011dc:	4b78      	ldr	r3, [pc, #480]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	220c      	movs	r2, #12
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d11f      	bne.n	8001228 <HAL_RCC_OscConfig+0x1a0>
 80011e8:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	23c0      	movs	r3, #192	; 0xc0
 80011ee:	025b      	lsls	r3, r3, #9
 80011f0:	401a      	ands	r2, r3
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d116      	bne.n	8001228 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2202      	movs	r2, #2
 8001200:	4013      	ands	r3, r2
 8001202:	d005      	beq.n	8001210 <HAL_RCC_OscConfig+0x188>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d001      	beq.n	8001210 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e2bb      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	22f8      	movs	r2, #248	; 0xf8
 8001216:	4393      	bics	r3, r2
 8001218:	0019      	movs	r1, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00da      	lsls	r2, r3, #3
 8001220:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e041      	b.n	80012ac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d024      	beq.n	800127a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fab4 	bl	80007a8 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff faaf 	bl	80007a8 <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e297      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	d0f1      	beq.n	8001246 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b57      	ldr	r3, [pc, #348]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	22f8      	movs	r2, #248	; 0xf8
 8001268:	4393      	bics	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	00da      	lsls	r2, r3, #3
 8001272:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001274:	430a      	orrs	r2, r1
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e018      	b.n	80012ac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001280:	2101      	movs	r1, #1
 8001282:	438a      	bics	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fa8f 	bl	80007a8 <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fa8a 	bl	80007a8 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e272      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d1f1      	bne.n	8001290 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2208      	movs	r2, #8
 80012b2:	4013      	ands	r3, r2
 80012b4:	d036      	beq.n	8001324 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012be:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	430a      	orrs	r2, r1
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fa6d 	bl	80007a8 <HAL_GetTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fa68 	bl	80007a8 <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e250      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	2202      	movs	r2, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	d0f1      	beq.n	80012d4 <HAL_RCC_OscConfig+0x24c>
 80012f0:	e018      	b.n	8001324 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80012f8:	2101      	movs	r1, #1
 80012fa:	438a      	bics	r2, r1
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fa53 	bl	80007a8 <HAL_GetTick>
 8001302:	0003      	movs	r3, r0
 8001304:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fa4e 	bl	80007a8 <HAL_GetTick>
 800130c:	0002      	movs	r2, r0
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e236      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d1f1      	bne.n	8001308 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2204      	movs	r2, #4
 800132a:	4013      	ands	r3, r2
 800132c:	d100      	bne.n	8001330 <HAL_RCC_OscConfig+0x2a8>
 800132e:	e0b5      	b.n	800149c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001330:	201f      	movs	r0, #31
 8001332:	183b      	adds	r3, r7, r0
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800133a:	69da      	ldr	r2, [r3, #28]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	055b      	lsls	r3, r3, #21
 8001340:	4013      	ands	r3, r2
 8001342:	d110      	bne.n	8001366 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	0549      	lsls	r1, r1, #21
 800134e:	430a      	orrs	r2, r1
 8001350:	61da      	str	r2, [r3, #28]
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	055b      	lsls	r3, r3, #21
 800135a:	4013      	ands	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001360:	183b      	adds	r3, r7, r0
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_RCC_OscConfig+0x344>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4013      	ands	r3, r2
 8001370:	d11a      	bne.n	80013a8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_RCC_OscConfig+0x344>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_RCC_OscConfig+0x344>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0049      	lsls	r1, r1, #1
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001380:	f7ff fa12 	bl	80007a8 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138a:	f7ff fa0d 	bl	80007a8 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b64      	cmp	r3, #100	; 0x64
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1f5      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_OscConfig+0x344>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d10f      	bne.n	80013d0 <HAL_RCC_OscConfig+0x348>
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80013b2:	6a1a      	ldr	r2, [r3, #32]
 80013b4:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	621a      	str	r2, [r3, #32]
 80013bc:	e036      	b.n	800142c <HAL_RCC_OscConfig+0x3a4>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40021000 	.word	0x40021000
 80013c4:	fffeffff 	.word	0xfffeffff
 80013c8:	fffbffff 	.word	0xfffbffff
 80013cc:	40007000 	.word	0x40007000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10c      	bne.n	80013f2 <HAL_RCC_OscConfig+0x36a>
 80013d8:	4bca      	ldr	r3, [pc, #808]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80013da:	6a1a      	ldr	r2, [r3, #32]
 80013dc:	4bc9      	ldr	r3, [pc, #804]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80013de:	2101      	movs	r1, #1
 80013e0:	438a      	bics	r2, r1
 80013e2:	621a      	str	r2, [r3, #32]
 80013e4:	4bc7      	ldr	r3, [pc, #796]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80013e6:	6a1a      	ldr	r2, [r3, #32]
 80013e8:	4bc6      	ldr	r3, [pc, #792]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80013ea:	2104      	movs	r1, #4
 80013ec:	438a      	bics	r2, r1
 80013ee:	621a      	str	r2, [r3, #32]
 80013f0:	e01c      	b.n	800142c <HAL_RCC_OscConfig+0x3a4>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x38c>
 80013fa:	4bc2      	ldr	r3, [pc, #776]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	4bc1      	ldr	r3, [pc, #772]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001400:	2104      	movs	r1, #4
 8001402:	430a      	orrs	r2, r1
 8001404:	621a      	str	r2, [r3, #32]
 8001406:	4bbf      	ldr	r3, [pc, #764]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001408:	6a1a      	ldr	r2, [r3, #32]
 800140a:	4bbe      	ldr	r3, [pc, #760]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800140c:	2101      	movs	r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	621a      	str	r2, [r3, #32]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0x3a4>
 8001414:	4bbb      	ldr	r3, [pc, #748]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	4bba      	ldr	r3, [pc, #744]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800141a:	2101      	movs	r1, #1
 800141c:	438a      	bics	r2, r1
 800141e:	621a      	str	r2, [r3, #32]
 8001420:	4bb8      	ldr	r3, [pc, #736]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001422:	6a1a      	ldr	r2, [r3, #32]
 8001424:	4bb7      	ldr	r3, [pc, #732]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001426:	2104      	movs	r1, #4
 8001428:	438a      	bics	r2, r1
 800142a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d014      	beq.n	800145e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff f9b8 	bl	80007a8 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	e009      	b.n	8001452 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143e:	f7ff f9b3 	bl	80007a8 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	4aaf      	ldr	r2, [pc, #700]	; (8001708 <HAL_RCC_OscConfig+0x680>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e19a      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001452:	4bac      	ldr	r3, [pc, #688]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x3b6>
 800145c:	e013      	b.n	8001486 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff f9a3 	bl	80007a8 <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	e009      	b.n	800147c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001468:	f7ff f99e 	bl	80007a8 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	4aa5      	ldr	r2, [pc, #660]	; (8001708 <HAL_RCC_OscConfig+0x680>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e185      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147c:	4ba1      	ldr	r3, [pc, #644]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	2202      	movs	r2, #2
 8001482:	4013      	ands	r3, r2
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001486:	231f      	movs	r3, #31
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001490:	4b9c      	ldr	r3, [pc, #624]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001492:	69da      	ldr	r2, [r3, #28]
 8001494:	4b9b      	ldr	r3, [pc, #620]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001496:	499d      	ldr	r1, [pc, #628]	; (800170c <HAL_RCC_OscConfig+0x684>)
 8001498:	400a      	ands	r2, r1
 800149a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2210      	movs	r2, #16
 80014a2:	4013      	ands	r3, r2
 80014a4:	d063      	beq.n	800156e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d12a      	bne.n	8001504 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ae:	4b95      	ldr	r3, [pc, #596]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b2:	4b94      	ldr	r3, [pc, #592]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014b4:	2104      	movs	r1, #4
 80014b6:	430a      	orrs	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014ba:	4b92      	ldr	r3, [pc, #584]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014be:	4b91      	ldr	r3, [pc, #580]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	430a      	orrs	r2, r1
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff f96f 	bl	80007a8 <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014d0:	f7ff f96a 	bl	80007a8 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e152      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014e2:	4b88      	ldr	r3, [pc, #544]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d0f1      	beq.n	80014d0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014ec:	4b85      	ldr	r3, [pc, #532]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f0:	22f8      	movs	r2, #248	; 0xf8
 80014f2:	4393      	bics	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	00da      	lsls	r2, r3, #3
 80014fc:	4b81      	ldr	r3, [pc, #516]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
 8001502:	e034      	b.n	800156e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	3305      	adds	r3, #5
 800150a:	d111      	bne.n	8001530 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800150c:	4b7d      	ldr	r3, [pc, #500]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800150e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001510:	4b7c      	ldr	r3, [pc, #496]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001512:	2104      	movs	r1, #4
 8001514:	438a      	bics	r2, r1
 8001516:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001518:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151c:	22f8      	movs	r2, #248	; 0xf8
 800151e:	4393      	bics	r3, r2
 8001520:	0019      	movs	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	00da      	lsls	r2, r3, #3
 8001528:	4b76      	ldr	r3, [pc, #472]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800152a:	430a      	orrs	r2, r1
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
 800152e:	e01e      	b.n	800156e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001530:	4b74      	ldr	r3, [pc, #464]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001534:	4b73      	ldr	r3, [pc, #460]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001536:	2104      	movs	r1, #4
 8001538:	430a      	orrs	r2, r1
 800153a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800153c:	4b71      	ldr	r3, [pc, #452]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800153e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001540:	4b70      	ldr	r3, [pc, #448]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001542:	2101      	movs	r1, #1
 8001544:	438a      	bics	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff f92e 	bl	80007a8 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001552:	f7ff f929 	bl	80007a8 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e111      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001564:	4b67      	ldr	r3, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d1f1      	bne.n	8001552 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2220      	movs	r2, #32
 8001574:	4013      	ands	r3, r2
 8001576:	d05c      	beq.n	8001632 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001578:	4b62      	ldr	r3, [pc, #392]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	220c      	movs	r2, #12
 800157e:	4013      	ands	r3, r2
 8001580:	2b0c      	cmp	r3, #12
 8001582:	d00e      	beq.n	80015a2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001584:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	220c      	movs	r2, #12
 800158a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800158c:	2b08      	cmp	r3, #8
 800158e:	d114      	bne.n	80015ba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001590:	4b5c      	ldr	r3, [pc, #368]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	23c0      	movs	r3, #192	; 0xc0
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	401a      	ands	r2, r3
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	025b      	lsls	r3, r3, #9
 800159e:	429a      	cmp	r2, r3
 80015a0:	d10b      	bne.n	80015ba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015a2:	4b58      	ldr	r3, [pc, #352]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80015a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	4013      	ands	r3, r2
 80015ac:	d040      	beq.n	8001630 <HAL_RCC_OscConfig+0x5a8>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d03c      	beq.n	8001630 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0e6      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01b      	beq.n	80015fa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015c2:	4b50      	ldr	r3, [pc, #320]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80015c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c6:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0249      	lsls	r1, r1, #9
 80015cc:	430a      	orrs	r2, r1
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff f8ea 	bl	80007a8 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015da:	f7ff f8e5 	bl	80007a8 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e0cd      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	025b      	lsls	r3, r3, #9
 80015f4:	4013      	ands	r3, r2
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x552>
 80015f8:	e01b      	b.n	8001632 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80015fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001600:	4943      	ldr	r1, [pc, #268]	; (8001710 <HAL_RCC_OscConfig+0x688>)
 8001602:	400a      	ands	r2, r1
 8001604:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff f8cf 	bl	80007a8 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001610:	f7ff f8ca 	bl	80007a8 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0b2      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001622:	4b38      	ldr	r3, [pc, #224]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	025b      	lsls	r3, r3, #9
 800162a:	4013      	ands	r3, r2
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x588>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001630:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	2b00      	cmp	r3, #0
 8001638:	d100      	bne.n	800163c <HAL_RCC_OscConfig+0x5b4>
 800163a:	e0a4      	b.n	8001786 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	220c      	movs	r2, #12
 8001642:	4013      	ands	r3, r2
 8001644:	2b08      	cmp	r3, #8
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x5c2>
 8001648:	e078      	b.n	800173c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b02      	cmp	r3, #2
 8001650:	d14c      	bne.n	80016ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001658:	492e      	ldr	r1, [pc, #184]	; (8001714 <HAL_RCC_OscConfig+0x68c>)
 800165a:	400a      	ands	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff f8a3 	bl	80007a8 <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff f89e 	bl	80007a8 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e086      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	049b      	lsls	r3, r3, #18
 8001682:	4013      	ands	r3, r2
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	220f      	movs	r2, #15
 800168c:	4393      	bics	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 8001696:	430a      	orrs	r2, r1
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <HAL_RCC_OscConfig+0x690>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	0019      	movs	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	431a      	orrs	r2, r3
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	0449      	lsls	r1, r1, #17
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff f871 	bl	80007a8 <HAL_GetTick>
 80016c6:	0003      	movs	r3, r0
 80016c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff f86c 	bl	80007a8 <HAL_GetTick>
 80016d0:	0002      	movs	r2, r0
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e054      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	049b      	lsls	r3, r3, #18
 80016e6:	4013      	ands	r3, r2
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x644>
 80016ea:	e04c      	b.n	8001786 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <HAL_RCC_OscConfig+0x67c>)
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <HAL_RCC_OscConfig+0x68c>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff f856 	bl	80007a8 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x6a6>
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	40021000 	.word	0x40021000
 8001708:	00001388 	.word	0x00001388
 800170c:	efffffff 	.word	0xefffffff
 8001710:	fffeffff 	.word	0xfffeffff
 8001714:	feffffff 	.word	0xfeffffff
 8001718:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff f844 	bl	80007a8 <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e02c      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_RCC_OscConfig+0x708>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	049b      	lsls	r3, r3, #18
 8001736:	4013      	ands	r3, r2
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x694>
 800173a:	e024      	b.n	8001786 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e01f      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_RCC_OscConfig+0x708>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_RCC_OscConfig+0x708>)
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	23c0      	movs	r3, #192	; 0xc0
 8001758:	025b      	lsls	r3, r3, #9
 800175a:	401a      	ands	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	429a      	cmp	r2, r3
 8001762:	d10e      	bne.n	8001782 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	220f      	movs	r2, #15
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d107      	bne.n	8001782 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	23f0      	movs	r3, #240	; 0xf0
 8001776:	039b      	lsls	r3, r3, #14
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b008      	add	sp, #32
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0bf      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b61      	ldr	r3, [pc, #388]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2201      	movs	r2, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d911      	bls.n	80017da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b5e      	ldr	r3, [pc, #376]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4393      	bics	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4013      	ands	r3, r2
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d001      	beq.n	80017da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0a6      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d015      	beq.n	8001810 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2204      	movs	r2, #4
 80017ea:	4013      	ands	r3, r2
 80017ec:	d006      	beq.n	80017fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017ee:	4b51      	ldr	r3, [pc, #324]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 80017f4:	21e0      	movs	r1, #224	; 0xe0
 80017f6:	00c9      	lsls	r1, r1, #3
 80017f8:	430a      	orrs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fc:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	22f0      	movs	r2, #240	; 0xf0
 8001802:	4393      	bics	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 800180c:	430a      	orrs	r2, r1
 800180e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	4013      	ands	r3, r2
 8001818:	d04c      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	4b44      	ldr	r3, [pc, #272]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	4013      	ands	r3, r2
 800182c:	d120      	bne.n	8001870 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07a      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	049b      	lsls	r3, r3, #18
 8001842:	4013      	ands	r3, r2
 8001844:	d114      	bne.n	8001870 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06e      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	025b      	lsls	r3, r3, #9
 800185a:	4013      	ands	r3, r2
 800185c:	d108      	bne.n	8001870 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e062      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2202      	movs	r2, #2
 8001868:	4013      	ands	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e05b      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	4393      	bics	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7fe ff90 	bl	80007a8 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188c:	e009      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188e:	f7fe ff8b 	bl	80007a8 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4a27      	ldr	r2, [pc, #156]	; (8001938 <HAL_RCC_ClockConfig+0x1a4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e042      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	220c      	movs	r2, #12
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1ec      	bne.n	800188e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d211      	bcs.n	80018e6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4393      	bics	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d4:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x19c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e020      	b.n	8001928 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2204      	movs	r2, #4
 80018ec:	4013      	ands	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_RCC_ClockConfig+0x1a8>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001904:	f000 f820 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001908:	0001      	movs	r1, r0
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1a0>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	220f      	movs	r2, #15
 8001912:	4013      	ands	r3, r2
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1ac>)
 8001916:	5cd3      	ldrb	r3, [r2, r3]
 8001918:	000a      	movs	r2, r1
 800191a:	40da      	lsrs	r2, r3
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1b0>)
 800191e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001920:	2003      	movs	r0, #3
 8001922:	f7fe fefb 	bl	800071c <HAL_InitTick>
  
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	0018      	movs	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	b004      	add	sp, #16
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40022000 	.word	0x40022000
 8001934:	40021000 	.word	0x40021000
 8001938:	00001388 	.word	0x00001388
 800193c:	fffff8ff 	.word	0xfffff8ff
 8001940:	0800244c 	.word	0x0800244c
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b08f      	sub	sp, #60	; 0x3c
 800194c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800194e:	2314      	movs	r3, #20
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	4a38      	ldr	r2, [pc, #224]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xec>)
 8001954:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001956:	c313      	stmia	r3!, {r0, r1, r4}
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4a36      	ldr	r2, [pc, #216]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001960:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001962:	c313      	stmia	r3!, {r0, r1, r4}
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	220c      	movs	r2, #12
 8001986:	4013      	ands	r3, r2
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d047      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0xd4>
 800198c:	d849      	bhi.n	8001a22 <HAL_RCC_GetSysClockFreq+0xda>
 800198e:	2b04      	cmp	r3, #4
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x50>
 8001992:	2b08      	cmp	r3, #8
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x56>
 8001996:	e044      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800199c:	e044      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	0c9b      	lsrs	r3, r3, #18
 80019a2:	220f      	movs	r2, #15
 80019a4:	4013      	ands	r3, r2
 80019a6:	2214      	movs	r2, #20
 80019a8:	18ba      	adds	r2, r7, r2
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xf4>)
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	220f      	movs	r2, #15
 80019b4:	4013      	ands	r3, r2
 80019b6:	1d3a      	adds	r2, r7, #4
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019be:	23c0      	movs	r3, #192	; 0xc0
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	401a      	ands	r2, r3
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d109      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ce:	481c      	ldr	r0, [pc, #112]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d0:	f7fe fb9a 	bl	8000108 <__udivsi3>
 80019d4:	0003      	movs	r3, r0
 80019d6:	001a      	movs	r2, r3
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	4353      	muls	r3, r2
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
 80019de:	e01a      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80019e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e2:	23c0      	movs	r3, #192	; 0xc0
 80019e4:	025b      	lsls	r3, r3, #9
 80019e6:	401a      	ands	r2, r3
 80019e8:	23c0      	movs	r3, #192	; 0xc0
 80019ea:	025b      	lsls	r3, r3, #9
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019f2:	4814      	ldr	r0, [pc, #80]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019f4:	f7fe fb88 	bl	8000108 <__udivsi3>
 80019f8:	0003      	movs	r3, r0
 80019fa:	001a      	movs	r2, r3
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	4353      	muls	r3, r2
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a08:	f7fe fb7e 	bl	8000108 <__udivsi3>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	001a      	movs	r2, r3
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	4353      	muls	r3, r2
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a1a:	e005      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a20:	e002      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a26:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b00f      	add	sp, #60	; 0x3c
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	0800242c 	.word	0x0800242c
 8001a38:	0800243c 	.word	0x0800243c
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	02dc6c00 	.word	0x02dc6c00

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	20000000 	.word	0x20000000

08001a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a60:	f7ff fff2 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a64:	0001      	movs	r1, r0
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	4013      	ands	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a72:	5cd3      	ldrb	r3, [r2, r3]
 8001a74:	40d9      	lsrs	r1, r3
 8001a76:	000b      	movs	r3, r1
}    
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	40021000 	.word	0x40021000
 8001a84:	0800245c 	.word	0x0800245c

08001a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	025b      	lsls	r3, r3, #9
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d100      	bne.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001aa4:	e08e      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2017      	movs	r0, #23
 8001aa8:	183b      	adds	r3, r7, r0
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aae:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab0:	69da      	ldr	r2, [r3, #28]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	055b      	lsls	r3, r3, #21
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d110      	bne.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001abc:	69da      	ldr	r2, [r3, #28]
 8001abe:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	0549      	lsls	r1, r1, #21
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	61da      	str	r2, [r3, #28]
 8001ac8:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aca:	69da      	ldr	r2, [r3, #28]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	055b      	lsls	r3, r3, #21
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad6:	183b      	adds	r3, r7, r0
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b63      	ldr	r3, [pc, #396]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d11a      	bne.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae8:	4b60      	ldr	r3, [pc, #384]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b5f      	ldr	r3, [pc, #380]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	0049      	lsls	r1, r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7fe fe57 	bl	80007a8 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	e008      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7fe fe52 	bl	80007a8 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0a6      	b.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b1e:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b20:	6a1a      	ldr	r2, [r3, #32]
 8001b22:	23c0      	movs	r3, #192	; 0xc0
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4013      	ands	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d034      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	23c0      	movs	r3, #192	; 0xc0
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d02c      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b40:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a4a      	ldr	r2, [pc, #296]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4c:	6a1a      	ldr	r2, [r3, #32]
 8001b4e:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0249      	lsls	r1, r1, #9
 8001b54:	430a      	orrs	r2, r1
 8001b56:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b58:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b5e:	4945      	ldr	r1, [pc, #276]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b64:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7fe fe19 	bl	80007a8 <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	e009      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7fe fe14 	bl	80007a8 <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	4a3c      	ldr	r2, [pc, #240]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e067      	b.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b9a:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a34      	ldr	r2, [pc, #208]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bae:	2317      	movs	r3, #23
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bba:	69da      	ldr	r2, [r3, #28]
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bbe:	492f      	ldr	r1, [pc, #188]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	4393      	bics	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d009      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2220      	movs	r2, #32
 8001c06:	4013      	ands	r3, r2
 8001c08:	d009      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	2210      	movs	r2, #16
 8001c10:	4393      	bics	r3, r2
 8001c12:	0019      	movs	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	029b      	lsls	r3, r3, #10
 8001c26:	4013      	ands	r3, r2
 8001c28:	d009      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	4393      	bics	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4013      	ands	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	2240      	movs	r2, #64	; 0x40
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b006      	add	sp, #24
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	fffffcff 	.word	0xfffffcff
 8001c74:	fffeffff 	.word	0xfffeffff
 8001c78:	00001388 	.word	0x00001388
 8001c7c:	efffffff 	.word	0xefffffff
 8001c80:	fffcffff 	.word	0xfffcffff

08001c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e044      	b.n	8001d20 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d107      	bne.n	8001cae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2274      	movs	r2, #116	; 0x74
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7fe fc8f 	bl	80005cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2224      	movs	r2, #36	; 0x24
 8001cb2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	438a      	bics	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f830 	bl	8001d2c <UART_SetConfig>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e024      	b.n	8001d20 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 f9ab 	bl	800203c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	490d      	ldr	r1, [pc, #52]	; (8001d28 <HAL_UART_Init+0xa4>)
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	212a      	movs	r1, #42	; 0x2a
 8001d02:	438a      	bics	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 fa43 	bl	80021a4 <UART_CheckIdleState>
 8001d1e:	0003      	movs	r3, r0
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	ffffb7ff 	.word	0xffffb7ff

08001d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d34:	231e      	movs	r3, #30
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4aaf      	ldr	r2, [pc, #700]	; (8002018 <UART_SetConfig+0x2ec>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4aaa      	ldr	r2, [pc, #680]	; (800201c <UART_SetConfig+0x2f0>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4aa1      	ldr	r2, [pc, #644]	; (8002020 <UART_SetConfig+0x2f4>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a9d      	ldr	r2, [pc, #628]	; (8002024 <UART_SetConfig+0x2f8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d127      	bne.n	8001e02 <UART_SetConfig+0xd6>
 8001db2:	4b9d      	ldr	r3, [pc, #628]	; (8002028 <UART_SetConfig+0x2fc>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	2203      	movs	r2, #3
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d00d      	beq.n	8001dda <UART_SetConfig+0xae>
 8001dbe:	d81b      	bhi.n	8001df8 <UART_SetConfig+0xcc>
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d014      	beq.n	8001dee <UART_SetConfig+0xc2>
 8001dc4:	d818      	bhi.n	8001df8 <UART_SetConfig+0xcc>
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <UART_SetConfig+0xa4>
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d00a      	beq.n	8001de4 <UART_SetConfig+0xb8>
 8001dce:	e013      	b.n	8001df8 <UART_SetConfig+0xcc>
 8001dd0:	231f      	movs	r3, #31
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e065      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001dda:	231f      	movs	r3, #31
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	2202      	movs	r2, #2
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	e060      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001de4:	231f      	movs	r3, #31
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2204      	movs	r2, #4
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e05b      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001dee:	231f      	movs	r3, #31
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2208      	movs	r2, #8
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e056      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001df8:	231f      	movs	r3, #31
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e051      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a89      	ldr	r2, [pc, #548]	; (800202c <UART_SetConfig+0x300>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d134      	bne.n	8001e76 <UART_SetConfig+0x14a>
 8001e0c:	4b86      	ldr	r3, [pc, #536]	; (8002028 <UART_SetConfig+0x2fc>)
 8001e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e10:	23c0      	movs	r3, #192	; 0xc0
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	4013      	ands	r3, r2
 8001e16:	22c0      	movs	r2, #192	; 0xc0
 8001e18:	0292      	lsls	r2, r2, #10
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d017      	beq.n	8001e4e <UART_SetConfig+0x122>
 8001e1e:	22c0      	movs	r2, #192	; 0xc0
 8001e20:	0292      	lsls	r2, r2, #10
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d822      	bhi.n	8001e6c <UART_SetConfig+0x140>
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	0292      	lsls	r2, r2, #10
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d019      	beq.n	8001e62 <UART_SetConfig+0x136>
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	0292      	lsls	r2, r2, #10
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d81a      	bhi.n	8001e6c <UART_SetConfig+0x140>
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <UART_SetConfig+0x118>
 8001e3a:	2280      	movs	r2, #128	; 0x80
 8001e3c:	0252      	lsls	r2, r2, #9
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00a      	beq.n	8001e58 <UART_SetConfig+0x12c>
 8001e42:	e013      	b.n	8001e6c <UART_SetConfig+0x140>
 8001e44:	231f      	movs	r3, #31
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e02b      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001e4e:	231f      	movs	r3, #31
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	e026      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001e58:	231f      	movs	r3, #31
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	e021      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001e62:	231f      	movs	r3, #31
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2208      	movs	r2, #8
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e01c      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001e6c:	231f      	movs	r3, #31
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2210      	movs	r2, #16
 8001e72:	701a      	strb	r2, [r3, #0]
 8001e74:	e017      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6d      	ldr	r2, [pc, #436]	; (8002030 <UART_SetConfig+0x304>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d104      	bne.n	8001e8a <UART_SetConfig+0x15e>
 8001e80:	231f      	movs	r3, #31
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	e00d      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a69      	ldr	r2, [pc, #420]	; (8002034 <UART_SetConfig+0x308>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d104      	bne.n	8001e9e <UART_SetConfig+0x172>
 8001e94:	231f      	movs	r3, #31
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e003      	b.n	8001ea6 <UART_SetConfig+0x17a>
 8001e9e:	231f      	movs	r3, #31
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d15d      	bne.n	8001f6e <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8001eb2:	231f      	movs	r3, #31
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d015      	beq.n	8001ee8 <UART_SetConfig+0x1bc>
 8001ebc:	dc18      	bgt.n	8001ef0 <UART_SetConfig+0x1c4>
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d00d      	beq.n	8001ede <UART_SetConfig+0x1b2>
 8001ec2:	dc15      	bgt.n	8001ef0 <UART_SetConfig+0x1c4>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <UART_SetConfig+0x1a2>
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d005      	beq.n	8001ed8 <UART_SetConfig+0x1ac>
 8001ecc:	e010      	b.n	8001ef0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ece:	f7ff fdc5 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	61bb      	str	r3, [r7, #24]
        break;
 8001ed6:	e012      	b.n	8001efe <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ed8:	4b57      	ldr	r3, [pc, #348]	; (8002038 <UART_SetConfig+0x30c>)
 8001eda:	61bb      	str	r3, [r7, #24]
        break;
 8001edc:	e00f      	b.n	8001efe <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ede:	f7ff fd33 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	61bb      	str	r3, [r7, #24]
        break;
 8001ee6:	e00a      	b.n	8001efe <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	61bb      	str	r3, [r7, #24]
        break;
 8001eee:	e006      	b.n	8001efe <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ef4:	231e      	movs	r3, #30
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
        break;
 8001efc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d100      	bne.n	8001f06 <UART_SetConfig+0x1da>
 8001f04:	e07b      	b.n	8001ffe <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	005a      	lsls	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	085b      	lsrs	r3, r3, #1
 8001f10:	18d2      	adds	r2, r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	0019      	movs	r1, r3
 8001f18:	0010      	movs	r0, r2
 8001f1a:	f7fe f8f5 	bl	8000108 <__udivsi3>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b0f      	cmp	r3, #15
 8001f28:	d91c      	bls.n	8001f64 <UART_SetConfig+0x238>
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	025b      	lsls	r3, r3, #9
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d217      	bcs.n	8001f64 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	200e      	movs	r0, #14
 8001f3a:	183b      	adds	r3, r7, r0
 8001f3c:	210f      	movs	r1, #15
 8001f3e:	438a      	bics	r2, r1
 8001f40:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2207      	movs	r2, #7
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	b299      	uxth	r1, r3
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	183a      	adds	r2, r7, r0
 8001f52:	8812      	ldrh	r2, [r2, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	183a      	adds	r2, r7, r0
 8001f5e:	8812      	ldrh	r2, [r2, #0]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	e04c      	b.n	8001ffe <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8001f64:	231e      	movs	r3, #30
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e047      	b.n	8001ffe <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f6e:	231f      	movs	r3, #31
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d015      	beq.n	8001fa4 <UART_SetConfig+0x278>
 8001f78:	dc18      	bgt.n	8001fac <UART_SetConfig+0x280>
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d00d      	beq.n	8001f9a <UART_SetConfig+0x26e>
 8001f7e:	dc15      	bgt.n	8001fac <UART_SetConfig+0x280>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <UART_SetConfig+0x25e>
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d005      	beq.n	8001f94 <UART_SetConfig+0x268>
 8001f88:	e010      	b.n	8001fac <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f8a:	f7ff fd67 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	61bb      	str	r3, [r7, #24]
        break;
 8001f92:	e012      	b.n	8001fba <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <UART_SetConfig+0x30c>)
 8001f96:	61bb      	str	r3, [r7, #24]
        break;
 8001f98:	e00f      	b.n	8001fba <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f9a:	f7ff fcd5 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	61bb      	str	r3, [r7, #24]
        break;
 8001fa2:	e00a      	b.n	8001fba <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	61bb      	str	r3, [r7, #24]
        break;
 8001faa:	e006      	b.n	8001fba <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001fb0:	231e      	movs	r3, #30
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
        break;
 8001fb8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01e      	beq.n	8001ffe <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	085a      	lsrs	r2, r3, #1
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	18d2      	adds	r2, r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0019      	movs	r1, r3
 8001fd0:	0010      	movs	r0, r2
 8001fd2:	f7fe f899 	bl	8000108 <__udivsi3>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	d909      	bls.n	8001ff6 <UART_SetConfig+0x2ca>
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	025b      	lsls	r3, r3, #9
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d204      	bcs.n	8001ff6 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	e003      	b.n	8001ffe <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8001ff6:	231e      	movs	r3, #30
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800200a:	231e      	movs	r3, #30
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	781b      	ldrb	r3, [r3, #0]
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b008      	add	sp, #32
 8002016:	bd80      	pop	{r7, pc}
 8002018:	efff69f3 	.word	0xefff69f3
 800201c:	ffffcfff 	.word	0xffffcfff
 8002020:	fffff4ff 	.word	0xfffff4ff
 8002024:	40013800 	.word	0x40013800
 8002028:	40021000 	.word	0x40021000
 800202c:	40004400 	.word	0x40004400
 8002030:	40004800 	.word	0x40004800
 8002034:	40004c00 	.word	0x40004c00
 8002038:	007a1200 	.word	0x007a1200

0800203c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2201      	movs	r2, #1
 800204a:	4013      	ands	r3, r2
 800204c:	d00b      	beq.n	8002066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a4a      	ldr	r2, [pc, #296]	; (8002180 <UART_AdvFeatureConfig+0x144>)
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	2202      	movs	r2, #2
 800206c:	4013      	ands	r3, r2
 800206e:	d00b      	beq.n	8002088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a43      	ldr	r2, [pc, #268]	; (8002184 <UART_AdvFeatureConfig+0x148>)
 8002078:	4013      	ands	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	2204      	movs	r2, #4
 800208e:	4013      	ands	r3, r2
 8002090:	d00b      	beq.n	80020aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a3b      	ldr	r2, [pc, #236]	; (8002188 <UART_AdvFeatureConfig+0x14c>)
 800209a:	4013      	ands	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	2208      	movs	r2, #8
 80020b0:	4013      	ands	r3, r2
 80020b2:	d00b      	beq.n	80020cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a34      	ldr	r2, [pc, #208]	; (800218c <UART_AdvFeatureConfig+0x150>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2210      	movs	r2, #16
 80020d2:	4013      	ands	r3, r2
 80020d4:	d00b      	beq.n	80020ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <UART_AdvFeatureConfig+0x154>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	2220      	movs	r2, #32
 80020f4:	4013      	ands	r3, r2
 80020f6:	d00b      	beq.n	8002110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4a25      	ldr	r2, [pc, #148]	; (8002194 <UART_AdvFeatureConfig+0x158>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	2240      	movs	r2, #64	; 0x40
 8002116:	4013      	ands	r3, r2
 8002118:	d01d      	beq.n	8002156 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <UART_AdvFeatureConfig+0x15c>)
 8002122:	4013      	ands	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	035b      	lsls	r3, r3, #13
 800213a:	429a      	cmp	r2, r3
 800213c:	d10b      	bne.n	8002156 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a15      	ldr	r2, [pc, #84]	; (800219c <UART_AdvFeatureConfig+0x160>)
 8002146:	4013      	ands	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	4013      	ands	r3, r2
 800215e:	d00b      	beq.n	8002178 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <UART_AdvFeatureConfig+0x164>)
 8002168:	4013      	ands	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	605a      	str	r2, [r3, #4]
  }
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}
 8002180:	fffdffff 	.word	0xfffdffff
 8002184:	fffeffff 	.word	0xfffeffff
 8002188:	fffbffff 	.word	0xfffbffff
 800218c:	ffff7fff 	.word	0xffff7fff
 8002190:	ffffefff 	.word	0xffffefff
 8002194:	ffffdfff 	.word	0xffffdfff
 8002198:	ffefffff 	.word	0xffefffff
 800219c:	ff9fffff 	.word	0xff9fffff
 80021a0:	fff7ffff 	.word	0xfff7ffff

080021a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2280      	movs	r2, #128	; 0x80
 80021b0:	2100      	movs	r1, #0
 80021b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80021b4:	f7fe faf8 	bl	80007a8 <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2208      	movs	r2, #8
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d10c      	bne.n	80021e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	0391      	lsls	r1, r2, #14
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4a17      	ldr	r2, [pc, #92]	; (8002230 <UART_CheckIdleState+0x8c>)
 80021d4:	9200      	str	r2, [sp, #0]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f000 f82c 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 80021dc:	1e03      	subs	r3, r0, #0
 80021de:	d001      	beq.n	80021e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e021      	b.n	8002228 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2204      	movs	r2, #4
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d10c      	bne.n	800220c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	03d1      	lsls	r1, r2, #15
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <UART_CheckIdleState+0x8c>)
 80021fc:	9200      	str	r2, [sp, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	f000 f818 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 8002204:	1e03      	subs	r3, r0, #0
 8002206:	d001      	beq.n	800220c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e00d      	b.n	8002228 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2220      	movs	r2, #32
 8002210:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2274      	movs	r2, #116	; 0x74
 8002222:	2100      	movs	r1, #0
 8002224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b004      	add	sp, #16
 800222e:	bd80      	pop	{r7, pc}
 8002230:	01ffffff 	.word	0x01ffffff

08002234 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b094      	sub	sp, #80	; 0x50
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002244:	e0a3      	b.n	800238e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002248:	3301      	adds	r3, #1
 800224a:	d100      	bne.n	800224e <UART_WaitOnFlagUntilTimeout+0x1a>
 800224c:	e09f      	b.n	800238e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224e:	f7fe faab 	bl	80007a8 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800225a:	429a      	cmp	r2, r3
 800225c:	d302      	bcc.n	8002264 <UART_WaitOnFlagUntilTimeout+0x30>
 800225e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002260:	2b00      	cmp	r3, #0
 8002262:	d13d      	bne.n	80022e0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002264:	f3ef 8310 	mrs	r3, PRIMASK
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800226c:	647b      	str	r3, [r7, #68]	; 0x44
 800226e:	2301      	movs	r3, #1
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	f383 8810 	msr	PRIMASK, r3
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	494c      	ldr	r1, [pc, #304]	; (80023b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002286:	400a      	ands	r2, r1
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	f383 8810 	msr	PRIMASK, r3
}
 8002294:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002296:	f3ef 8310 	mrs	r3, PRIMASK
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229e:	643b      	str	r3, [r7, #64]	; 0x40
 80022a0:	2301      	movs	r3, #1
 80022a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	f383 8810 	msr	PRIMASK, r3
}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2101      	movs	r1, #1
 80022b8:	438a      	bics	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c2:	f383 8810 	msr	PRIMASK, r3
}
 80022c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2274      	movs	r2, #116	; 0x74
 80022d8:	2100      	movs	r1, #0
 80022da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e067      	b.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2204      	movs	r2, #4
 80022e8:	4013      	ands	r3, r2
 80022ea:	d050      	beq.n	800238e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	401a      	ands	r2, r3
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d146      	bne.n	800238e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800230a:	f3ef 8310 	mrs	r3, PRIMASK
 800230e:	613b      	str	r3, [r7, #16]
  return(result);
 8002310:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002314:	2301      	movs	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f383 8810 	msr	PRIMASK, r3
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4923      	ldr	r1, [pc, #140]	; (80023b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800232c:	400a      	ands	r2, r1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002332:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f383 8810 	msr	PRIMASK, r3
}
 800233a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233c:	f3ef 8310 	mrs	r3, PRIMASK
 8002340:	61fb      	str	r3, [r7, #28]
  return(result);
 8002342:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002344:	64bb      	str	r3, [r7, #72]	; 0x48
 8002346:	2301      	movs	r3, #1
 8002348:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f383 8810 	msr	PRIMASK, r3
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	438a      	bics	r2, r1
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	f383 8810 	msr	PRIMASK, r3
}
 800236c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	2120      	movs	r1, #32
 8002380:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2274      	movs	r2, #116	; 0x74
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e010      	b.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	4013      	ands	r3, r2
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	425a      	negs	r2, r3
 800239e:	4153      	adcs	r3, r2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	001a      	movs	r2, r3
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d100      	bne.n	80023ae <UART_WaitOnFlagUntilTimeout+0x17a>
 80023ac:	e74b      	b.n	8002246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b014      	add	sp, #80	; 0x50
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	fffffe5f 	.word	0xfffffe5f

080023bc <__libc_init_array>:
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	2600      	movs	r6, #0
 80023c0:	4d0c      	ldr	r5, [pc, #48]	; (80023f4 <__libc_init_array+0x38>)
 80023c2:	4c0d      	ldr	r4, [pc, #52]	; (80023f8 <__libc_init_array+0x3c>)
 80023c4:	1b64      	subs	r4, r4, r5
 80023c6:	10a4      	asrs	r4, r4, #2
 80023c8:	42a6      	cmp	r6, r4
 80023ca:	d109      	bne.n	80023e0 <__libc_init_array+0x24>
 80023cc:	2600      	movs	r6, #0
 80023ce:	f000 f821 	bl	8002414 <_init>
 80023d2:	4d0a      	ldr	r5, [pc, #40]	; (80023fc <__libc_init_array+0x40>)
 80023d4:	4c0a      	ldr	r4, [pc, #40]	; (8002400 <__libc_init_array+0x44>)
 80023d6:	1b64      	subs	r4, r4, r5
 80023d8:	10a4      	asrs	r4, r4, #2
 80023da:	42a6      	cmp	r6, r4
 80023dc:	d105      	bne.n	80023ea <__libc_init_array+0x2e>
 80023de:	bd70      	pop	{r4, r5, r6, pc}
 80023e0:	00b3      	lsls	r3, r6, #2
 80023e2:	58eb      	ldr	r3, [r5, r3]
 80023e4:	4798      	blx	r3
 80023e6:	3601      	adds	r6, #1
 80023e8:	e7ee      	b.n	80023c8 <__libc_init_array+0xc>
 80023ea:	00b3      	lsls	r3, r6, #2
 80023ec:	58eb      	ldr	r3, [r5, r3]
 80023ee:	4798      	blx	r3
 80023f0:	3601      	adds	r6, #1
 80023f2:	e7f2      	b.n	80023da <__libc_init_array+0x1e>
 80023f4:	08002464 	.word	0x08002464
 80023f8:	08002464 	.word	0x08002464
 80023fc:	08002464 	.word	0x08002464
 8002400:	08002468 	.word	0x08002468

08002404 <memset>:
 8002404:	0003      	movs	r3, r0
 8002406:	1882      	adds	r2, r0, r2
 8002408:	4293      	cmp	r3, r2
 800240a:	d100      	bne.n	800240e <memset+0xa>
 800240c:	4770      	bx	lr
 800240e:	7019      	strb	r1, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	e7f9      	b.n	8002408 <memset+0x4>

08002414 <_init>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241a:	bc08      	pop	{r3}
 800241c:	469e      	mov	lr, r3
 800241e:	4770      	bx	lr

08002420 <_fini>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002426:	bc08      	pop	{r3}
 8002428:	469e      	mov	lr, r3
 800242a:	4770      	bx	lr
